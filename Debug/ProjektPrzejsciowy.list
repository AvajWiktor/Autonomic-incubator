
ProjektPrzejsciowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c808  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800c9d8  0800c9d8  0001c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc8  0800ccc8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccd0  0800ccd0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccd0  0800ccd0  0001ccd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccd4  0800ccd4  0001ccd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ccd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  200001f0  0800cec8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0800cec8  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff6b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004318  00000000  00000000  0004018b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  000444a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00045e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a98d  00000000  00000000  00047560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018240  00000000  00000000  00071eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc8e8  00000000  00000000  0008a12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007464  00000000  00000000  00186a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9c0 	.word	0x0800c9c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c9c0 	.word	0x0800c9c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <SetValue>:
#include <M_M_functions.h>

/* FUNKCJA PRZETWARZANIA DANYCH PRZEZ PID */
//NA WEJSCIE PRZEKAZUJEMY:(Z zakresu 0-1400)WARTOSC ZADANA, ODCZYT Z CZUNIKA, INSTANCJE SAMEGO PID
void SetValue(int in, int out, arm_pid_instance_f32 * PID_INSTANCE)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int return_value; // ZWRACANA WARTOSC

//FUNKCJA REGULATORA PID ZWRACAJACA WYNIK REGULACJI,
//NA WEJSCIE PRZEKAZUJEMY INSTANCJE PID ORAZ UCHYB(roznice war zadanej  i war odczytanej)
	return_value = arm_pid_f32(PID_INSTANCE, in - out);
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	edc7 7a05 	vstr	s15, [r7, #20]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	ed93 7a00 	vldr	s14, [r3]
 8000ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001008:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Update state */
    S->state[1] = S->state[0];
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001042:	edd7 7a04 	vldr	s15, [r7, #16]
 8001046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	61fb      	str	r3, [r7, #28]

	/* WARUNEK OGRANICZENIA WARTOSCI */

	if (return_value < 0)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da02      	bge.n	800105c <SetValue+0x94>
	{
		return_value = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e006      	b.n	800106a <SetValue+0xa2>
	}
	else if (return_value > 1000)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	dd02      	ble.n	800106a <SetValue+0xa2>
	{
	return_value = 1000;
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	61fb      	str	r3, [r7, #28]
	}
// USTAWIANIE WARTOSCI PWMA ZALEZNIE OD OTRZYMANEJ REGULACJI
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, return_value);
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SetValue+0xb8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000056c 	.word	0x2000056c

08001084 <ReadData>:

//---------------------------------------------------------------------------

/* FUNKCJA ODCZYTUJACA DANE Z CZUJNIKA */
int ReadData()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	float dataf;
	int data;
	BH1750_ReadLight(&dataf); //ODCZYT WARTOSCI DO PRZEKAZANEJ ZMIENNEJ
 800108a:	463b      	mov	r3, r7
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f9ed 	bl	800146c <BH1750_ReadLight>
	data = dataf;
 8001092:	edd7 7a00 	vldr	s15, [r7]
 8001096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	607b      	str	r3, [r7, #4]
	return data;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <RefreshLCD_3v>:
		  sprintf(&msg, "Wilg: %.1f [%%]", out); //PONOWNIE ZAPISUJEMY DO TABLICY msg WIADOMOSC, TYM RAZEM WARTOSCI ODCZYTANEJ Z CZUJNIKA
		  lcd_send_string(msg); // WYSYLAMY WIADOMOSC DO WYSWIETLENIA
		  }
}
void RefreshLCD_3v(float in, float out, int nr3) // PRZEKAZUJEM DO FUNKCJI WARTOSC ZADANA ORAZ ODCZYT Z CZUJNIKA Z ZAKRESU 0-1400
{
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80010b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80010ba:	6078      	str	r0, [r7, #4]
		  char msg[16]; // TWORZYMY BUFOR W KTORYM BEDZIE PRZECHOWYWANA WIADOMOSC (MAX 16 ZNAKOW, PONIEWAZ TYLE MIESCI SIE NA EKRANIE LCD)
		  lcd_clear(); // CZYSCIMY EKRAN PRZED WPROWADZENIEM NOWYCH DANYCH
 80010bc:	f001 f87c 	bl	80021b8 <lcd_clear>
		  lcd_put_cur(0, 0); // USTAWIAMY MIEJSCE ROZPOCZECIA ZAPISU WIADOMOSCI NA EKRANIE (PIERWSZY RZAD PIERWSZA KOLUMNA)
 80010c0:	2100      	movs	r1, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f001 f88e 	bl	80021e4 <lcd_put_cur>
		  if(in > 1400) // JEZELI WARTOSC ZADANA PRZEKRACZA ZAKRES PRACY REGULATORA, WYSWIETLANY JEST ODPOWIEDNI KOMUNIKAT
 80010c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001150 <RefreshLCD_3v+0xa4>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	dd03      	ble.n	80010e2 <RefreshLCD_3v+0x36>
		  {
			  lcd_send_string("Out of range!");
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <RefreshLCD_3v+0xa8>)
 80010dc:	f001 f8dd 	bl	800229a <lcd_send_string>
		  lcd_send_string(msg); //WYSYLAMY UTWORZONA PRZEZ NAS WCZESNIEJ WIADOMOSC PRZEKAZUJAC JA DO FUNKCJI
		  lcd_put_cur(1, 0); //USTAWIAMY WSKAZNIK NA DRUGI RZAD I 1 KOLUMNE
		  sprintf(&msg, "L: %d[LUX]", nr3); //PONOWNIE ZAPISUJEMY DO TABLICY msg WIADOMOSC, TYM RAZEM WARTOSCI ODCZYTANEJ Z CZUJNIKA
		  lcd_send_string(msg); // WYSYLAMY WIADOMOSC DO WYSWIETLENIA
		  }
}
 80010e0:	e032      	b.n	8001148 <RefreshLCD_3v+0x9c>
		  else if(in<0)
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d503      	bpl.n	80010f8 <RefreshLCD_3v+0x4c>
			  lcd_send_string("It burns xD");
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <RefreshLCD_3v+0xac>)
 80010f2:	f001 f8d2 	bl	800229a <lcd_send_string>
}
 80010f6:	e027      	b.n	8001148 <RefreshLCD_3v+0x9c>
		  sprintf(&msg, "T:%.1fC H:%.1f%%", in,out); //ZA POMOCA FUNKCJI sprintf ZAPISUJEMY DO WIADOMOSCI "SET: " ORAZ WARTOSCI CALKOWITA POPRZEZ DODANIE "%d"
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fa45 	bl	8000588 <__aeabi_f2d>
 80010fe:	4605      	mov	r5, r0
 8001100:	460e      	mov	r6, r1
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f7ff fa40 	bl	8000588 <__aeabi_f2d>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	f107 0010 	add.w	r0, r7, #16
 8001110:	e9cd 3400 	strd	r3, r4, [sp]
 8001114:	462a      	mov	r2, r5
 8001116:	4633      	mov	r3, r6
 8001118:	4910      	ldr	r1, [pc, #64]	; (800115c <RefreshLCD_3v+0xb0>)
 800111a:	f009 ffdb 	bl	800b0d4 <siprintf>
		  lcd_send_string(msg); //WYSYLAMY UTWORZONA PRZEZ NAS WCZESNIEJ WIADOMOSC PRZEKAZUJAC JA DO FUNKCJI
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f8b9 	bl	800229a <lcd_send_string>
		  lcd_put_cur(1, 0); //USTAWIAMY WSKAZNIK NA DRUGI RZAD I 1 KOLUMNE
 8001128:	2100      	movs	r1, #0
 800112a:	2001      	movs	r0, #1
 800112c:	f001 f85a 	bl	80021e4 <lcd_put_cur>
		  sprintf(&msg, "L: %d[LUX]", nr3); //PONOWNIE ZAPISUJEMY DO TABLICY msg WIADOMOSC, TYM RAZEM WARTOSCI ODCZYTANEJ Z CZUJNIKA
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <RefreshLCD_3v+0xb4>)
 8001138:	4618      	mov	r0, r3
 800113a:	f009 ffcb 	bl	800b0d4 <siprintf>
		  lcd_send_string(msg); // WYSYLAMY WIADOMOSC DO WYSWIETLENIA
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4618      	mov	r0, r3
 8001144:	f001 f8a9 	bl	800229a <lcd_send_string>
}
 8001148:	bf00      	nop
 800114a:	3724      	adds	r7, #36	; 0x24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	44af0000 	.word	0x44af0000
 8001154:	0800c9d8 	.word	0x0800c9d8
 8001158:	0800c9e8 	.word	0x0800c9e8
 800115c:	0800ca14 	.word	0x0800ca14
 8001160:	0800ca28 	.word	0x0800ca28

08001164 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_ADC1_Init+0x98>)
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <MX_ADC1_Init+0x9c>)
 800117a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_ADC1_Init+0x98>)
 800117e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001182:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_ADC1_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_ADC1_Init+0x98>)
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_ADC1_Init+0xa0>)
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_ADC1_Init+0x98>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_ADC1_Init+0x98>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_ADC1_Init+0x98>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_ADC1_Init+0x98>)
 80011c6:	f002 fa07 	bl	80035d8 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d0:	f001 fd1c 	bl	8002c0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d4:	2303      	movs	r3, #3
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011dc:	2307      	movs	r3, #7
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_ADC1_Init+0x98>)
 80011e6:	f002 fc89 	bl	8003afc <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f0:	f001 fd0c 	bl	8002c0c <Error_Handler>
  }

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000022c 	.word	0x2000022c
 8001200:	40012000 	.word	0x40012000
 8001204:	0f000001 	.word	0x0f000001

08001208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <HAL_ADC_MspInit+0xe4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d15b      	bne.n	80012e2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_ADC_MspInit+0xe8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800125a:	2308      	movs	r3, #8
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4821      	ldr	r0, [pc, #132]	; (80012f4 <HAL_ADC_MspInit+0xec>)
 800126e:	f003 fbbf 	bl	80049f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <HAL_ADC_MspInit+0xf4>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 8001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 800129c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012b8:	f003 f802 	bl	80042c0 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80012c2:	f001 fca3 	bl	8002c0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_ADC_MspInit+0xf0>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2012      	movs	r0, #18
 80012d8:	f002 ffbb 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012dc:	2012      	movs	r0, #18
 80012de:	f002 ffd4 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012000 	.word	0x40012000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	20000274 	.word	0x20000274
 80012fc:	40026410 	.word	0x40026410

08001300 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <BH1750_Init+0x34>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 800130e:	f000 f813 	bl	8001338 <BH1750_Reset>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001318:	2045      	movs	r0, #69	; 0x45
 800131a:	f000 f859 	bl	80013d0 <BH1750_SetMtreg>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <BH1750_Init+0x28>
			return BH1750_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	e000      	b.n	800132a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002d8 	.word	0x200002d8

08001338 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800133e:	2307      	movs	r3, #7
 8001340:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <BH1750_Reset+0x30>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	1dfa      	adds	r2, r7, #7
 8001348:	230a      	movs	r3, #10
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	f003 fdba 	bl	8004ec8 <HAL_I2C_Master_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <BH1750_Reset+0x26>
		return BH1750_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002d8 	.word	0x200002d8

0800136c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af02      	add	r7, sp, #8
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d106      	bne.n	800138e <BH1750_SetMode+0x22>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <BH1750_SetMode+0x22>
 800138a:	2301      	movs	r3, #1
 800138c:	e018      	b.n	80013c0 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	2b03      	cmp	r3, #3
 8001396:	dd01      	ble.n	800139c <BH1750_SetMode+0x30>
 8001398:	2301      	movs	r3, #1
 800139a:	e011      	b.n	80013c0 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <BH1750_SetMode+0x5c>)
 80013a0:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <BH1750_SetMode+0x60>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	230a      	movs	r3, #10
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	2146      	movs	r1, #70	; 0x46
 80013b0:	f003 fd8a 	bl	8004ec8 <HAL_I2C_Master_Transmit>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <BH1750_SetMode+0x52>
		return BH1750_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200002d4 	.word	0x200002d4
 80013cc:	200002d8 	.word	0x200002d8

080013d0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b1e      	cmp	r3, #30
 80013de:	d902      	bls.n	80013e6 <BH1750_SetMtreg+0x16>
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d101      	bne.n	80013ea <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e037      	b.n	800145a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <BH1750_SetMtreg+0x94>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140c:	b25b      	sxtb	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <BH1750_SetMtreg+0x98>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	230a      	movs	r3, #10
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2146      	movs	r1, #70	; 0x46
 8001422:	f003 fd51 	bl	8004ec8 <HAL_I2C_Master_Transmit>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e012      	b.n	800145a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <BH1750_SetMtreg+0x98>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	230a      	movs	r3, #10
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	2146      	movs	r1, #70	; 0x46
 8001446:	f003 fd3f 	bl	8004ec8 <HAL_I2C_Master_Transmit>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	e000      	b.n	800145a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002dc 	.word	0x200002dc
 8001468:	200002d8 	.word	0x200002d8

0800146c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af02      	add	r7, sp, #8
 8001472:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <BH1750_ReadLight+0xa0>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	230a      	movs	r3, #10
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2302      	movs	r3, #2
 8001482:	2146      	movs	r1, #70	; 0x46
 8001484:	f003 fe14 	bl	80050b0 <HAL_I2C_Master_Receive>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d138      	bne.n	8001500 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800148e:	7a3b      	ldrb	r3, [r7, #8]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	7a7a      	ldrb	r2, [r7, #9]
 8001494:	4313      	orrs	r3, r2
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <BH1750_ReadLight+0xa4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b45      	cmp	r3, #69	; 0x45
 80014a8:	d00f      	beq.n	80014ca <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <BH1750_ReadLight+0xa4>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001514 <BH1750_ReadLight+0xa8>
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	ed97 7a03 	vldr	s14, [r7, #12]
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <BH1750_ReadLight+0xac>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b21      	cmp	r3, #33	; 0x21
 80014d0:	d003      	beq.n	80014da <BH1750_ReadLight+0x6e>
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <BH1750_ReadLight+0xac>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b11      	cmp	r3, #17
 80014d8:	d107      	bne.n	80014ea <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 80014da:	ed97 7a03 	vldr	s14, [r7, #12]
 80014de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 80014ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800151c <BH1750_ReadLight+0xb0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002d8 	.word	0x200002d8
 8001510:	200002dc 	.word	0x200002dc
 8001514:	428a0000 	.word	0x428a0000
 8001518:	200002d4 	.word	0x200002d4
 800151c:	3f99999a 	.word	0x3f99999a

08001520 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	4613      	mov	r3, r2
 8001530:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 facc 	bl	8001ad0 <null_ptr_check>
 8001538:	4603      	mov	r3, r0
 800153a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 800153c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11c      	bne.n	800157e <bmp280_get_regs+0x5e>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001558:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685c      	ldr	r4, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7858      	ldrb	r0, [r3, #1]
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	b29b      	uxth	r3, r3
 8001566:	7bf9      	ldrb	r1, [r7, #15]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	47a0      	blx	r4
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001578:	23fc      	movs	r3, #252	; 0xfc
 800157a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800157c:	e001      	b.n	8001582 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800157e:	23ff      	movs	r3, #255	; 0xff
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	; 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4613      	mov	r3, r2
 800159c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d901      	bls.n	80015a8 <bmp280_set_regs+0x1a>
    {
        len = 4;
 80015a4:	2304      	movs	r3, #4
 80015a6:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f000 fa91 	bl	8001ad0 <null_ptr_check>
 80015ae:	4603      	mov	r3, r0
 80015b0:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80015b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d14d      	bne.n	8001656 <bmp280_set_regs+0xc8>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d04a      	beq.n	8001656 <bmp280_set_regs+0xc8>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d047      	beq.n	8001656 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d041      	beq.n	8001650 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d114      	bne.n	8001604 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015da:	2300      	movs	r3, #0
 80015dc:	76fb      	strb	r3, [r7, #27]
 80015de:	e00d      	b.n	80015fc <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80015e0:	7efb      	ldrb	r3, [r7, #27]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	7efb      	ldrb	r3, [r7, #27]
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	440b      	add	r3, r1
 80015ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015f6:	7efb      	ldrb	r3, [r7, #27]
 80015f8:	3301      	adds	r3, #1
 80015fa:	76fb      	strb	r3, [r7, #27]
 80015fc:	7efa      	ldrb	r2, [r7, #27]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3ed      	bcc.n	80015e0 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d90d      	bls.n	8001626 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f107 0110 	add.w	r1, r7, #16
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fa7c 	bl	8001b10 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b29b      	uxth	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b01      	subs	r3, #1
 8001622:	83bb      	strh	r3, [r7, #28]
 8001624:	e001      	b.n	800162a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689c      	ldr	r4, [r3, #8]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7858      	ldrb	r0, [r3, #1]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7819      	ldrb	r1, [r3, #0]
 8001636:	8bbb      	ldrh	r3, [r7, #28]
 8001638:	f107 0210 	add.w	r2, r7, #16
 800163c:	47a0      	blx	r4
 800163e:	4603      	mov	r3, r0
 8001640:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800164a:	23fc      	movs	r3, #252	; 0xfc
 800164c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800164e:	e005      	b.n	800165c <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001650:	23fd      	movs	r3, #253	; 0xfd
 8001652:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001654:	e002      	b.n	800165c <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	77fb      	strb	r3, [r7, #31]
 800165a:	e000      	b.n	800165e <bmp280_set_regs+0xd0>
        if (len != 0)
 800165c:	bf00      	nop
    }

    return rslt;
 800165e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}

0800166a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001672:	23e0      	movs	r3, #224	; 0xe0
 8001674:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001676:	23b6      	movs	r3, #182	; 0xb6
 8001678:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa28 	bl	8001ad0 <null_ptr_check>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800168c:	f107 010d 	add.w	r1, r7, #13
 8001690:	f107 000e 	add.w	r0, r7, #14
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f7ff ff79 	bl	800158e <bmp280_set_regs>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2002      	movs	r0, #2
 80016a6:	4798      	blx	r3
    }

    return rslt;
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 80016bc:	2305      	movs	r3, #5
 80016be:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fa05 	bl	8001ad0 <null_ptr_check>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d150      	bne.n	8001774 <bmp280_init+0xc0>
    {
        while (try_count)
 80016d2:	e02d      	b.n	8001730 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	20d0      	movs	r0, #208	; 0xd0
 80016dc:	f7ff ff20 	bl	8001520 <bmp280_get_regs>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11a      	bne.n	8001722 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80016f0:	2b56      	cmp	r3, #86	; 0x56
 80016f2:	d007      	beq.n	8001704 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b57      	cmp	r3, #87	; 0x57
 80016fa:	d003      	beq.n	8001704 <bmp280_init+0x50>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b58      	cmp	r3, #88	; 0x58
 8001702:	d10e      	bne.n	8001722 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffb0 	bl	800166a <bmp280_soft_reset>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d110      	bne.n	8001738 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa25 	bl	8001b66 <get_calib_param>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001720:	e00a      	b.n	8001738 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	200a      	movs	r0, #10
 8001728:	4798      	blx	r3
            --try_count;
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	3b01      	subs	r3, #1
 800172e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ce      	bne.n	80016d4 <bmp280_init+0x20>
 8001736:	e000      	b.n	800173a <bmp280_init+0x86>
                break;
 8001738:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001740:	23fe      	movs	r3, #254	; 0xfe
 8001742:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d113      	bne.n	8001774 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800178a:	2300      	movs	r3, #0
 800178c:	733b      	strb	r3, [r7, #12]
 800178e:	2300      	movs	r3, #0
 8001790:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f000 f99c 	bl	8001ad0 <null_ptr_check>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d137      	bne.n	8001814 <bmp280_get_config+0x94>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d034      	beq.n	8001814 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80017aa:	f107 010c 	add.w	r1, r7, #12
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2202      	movs	r2, #2
 80017b2:	20f4      	movs	r0, #244	; 0xf4
 80017b4:	f7ff feb4 	bl	8001520 <bmp280_get_regs>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80017bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d129      	bne.n	8001818 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80017c4:	7b3b      	ldrb	r3, [r7, #12]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80017ce:	7b3b      	ldrb	r3, [r7, #12]
 80017d0:	109b      	asrs	r3, r3, #2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	109b      	asrs	r3, r3, #2
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	332c      	adds	r3, #44	; 0x2c
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	6018      	str	r0, [r3, #0]
 800180e:	7912      	ldrb	r2, [r2, #4]
 8001810:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001812:	e001      	b.n	8001818 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fa34 	bl	8001ca0 <conf_sensor>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	6039      	str	r1, [r7, #0]
 800184c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f000 f93e 	bl	8001ad0 <null_ptr_check>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fa18 	bl	8001ca0 <conf_sensor>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f000 f91b 	bl	8001ad0 <null_ptr_check>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d133      	bne.n	800190e <bmp280_get_uncomp_data+0x8e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d030      	beq.n	800190e <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 80018ac:	f107 0108 	add.w	r1, r7, #8
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2206      	movs	r2, #6
 80018b4:	20f7      	movs	r0, #247	; 0xf7
 80018b6:	f7ff fe33 	bl	8001520 <bmp280_get_regs>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d120      	bne.n	8001908 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80018c6:	7a3b      	ldrb	r3, [r7, #8]
 80018c8:	031a      	lsls	r2, r3, #12
 80018ca:	7a7b      	ldrb	r3, [r7, #9]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4313      	orrs	r3, r2
 80018d0:	7aba      	ldrb	r2, [r7, #10]
 80018d2:	0912      	lsrs	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	031a      	lsls	r2, r3, #12
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4313      	orrs	r3, r2
 80018e6:	7b7a      	ldrb	r2, [r7, #13]
 80018e8:	0912      	lsrs	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f000 fa89 	bl	8001e14 <st_check_boundaries>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001906:	e004      	b.n	8001912 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8001908:	23f3      	movs	r3, #243	; 0xf3
 800190a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800190c:	e001      	b.n	8001912 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800190e:	23ff      	movs	r3, #255	; 0xff
 8001910:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001924:	b08a      	sub	sp, #40	; 0x28
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8ce 	bl	8001ad0 <null_ptr_check>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800193a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80ac 	bne.w	8001a9c <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7fe fe0d 	bl	8000564 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <bmp280_get_comp_temp_double+0x1a0>)
 8001950:	f7fe ff9c 	bl	800088c <__aeabi_ddiv>
 8001954:	4603      	mov	r3, r0
 8001956:	460c      	mov	r4, r1
 8001958:	4625      	mov	r5, r4
 800195a:	461c      	mov	r4, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	8a1b      	ldrh	r3, [r3, #16]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdef 	bl	8000544 <__aeabi_ui2d>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <bmp280_get_comp_temp_double+0x1a4>)
 800196c:	f7fe ff8e 	bl	800088c <__aeabi_ddiv>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fca6 	bl	80002c8 <__aeabi_dsub>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	4625      	mov	r5, r4
 8001982:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdea 	bl	8000564 <__aeabi_i2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fe4e 	bl	8000638 <__aeabi_dmul>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7fe fddd 	bl	8000564 <__aeabi_i2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019b2:	f7fe ff6b 	bl	800088c <__aeabi_ddiv>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	4625      	mov	r5, r4
 80019bc:	461c      	mov	r4, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdbe 	bl	8000544 <__aeabi_ui2d>
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <bmp280_get_comp_temp_double+0x1a8>)
 80019ce:	f7fe ff5d 	bl	800088c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe fc75 	bl	80002c8 <__aeabi_dsub>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
 80019e2:	4625      	mov	r5, r4
 80019e4:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019e6:	68b8      	ldr	r0, [r7, #8]
 80019e8:	f7fe fdbc 	bl	8000564 <__aeabi_i2d>
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019f4:	f7fe ff4a 	bl	800088c <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4690      	mov	r8, r2
 80019fe:	4699      	mov	r9, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	8a1b      	ldrh	r3, [r3, #16]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9d 	bl	8000544 <__aeabi_ui2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <bmp280_get_comp_temp_double+0x1a8>)
 8001a10:	f7fe ff3c 	bl	800088c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	f7fe fc54 	bl	80002c8 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fe06 	bl	8000638 <__aeabi_dmul>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4625      	mov	r5, r4
 8001a32:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd92 	bl	8000564 <__aeabi_i2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
        var2 =
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fdf6 	bl	8000638 <__aeabi_dmul>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a5c:	f7fe fc36 	bl	80002cc <__adddf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	4618      	mov	r0, r3
 8001a66:	4621      	mov	r1, r4
 8001a68:	f7ff f896 	bl	8000b98 <__aeabi_d2iz>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001a72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a7a:	f7fe fc27 	bl	80002cc <__adddf3>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	4618      	mov	r0, r3
 8001a84:	4621      	mov	r1, r4
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <bmp280_get_comp_temp_double+0x1ac>)
 8001a8c:	f7fe fefe 	bl	800088c <__aeabi_ddiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	460c      	mov	r4, r1
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	e9c2 3400 	strd	r3, r4, [r2]
 8001a9a:	e009      	b.n	8001ab0 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	f04f 0400 	mov.w	r4, #0
 8001aa6:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001aaa:	23ef      	movs	r3, #239	; 0xef
 8001aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001abe:	bf00      	nop
 8001ac0:	40d00000 	.word	0x40d00000
 8001ac4:	40900000 	.word	0x40900000
 8001ac8:	40c00000 	.word	0x40c00000
 8001acc:	40b40000 	.word	0x40b40000

08001ad0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <null_ptr_check+0x26>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <null_ptr_check+0x26>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <null_ptr_check+0x26>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001af6:	23ff      	movs	r3, #255	; 0xff
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
 8001b22:	e016      	b.n	8001b52 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	441a      	add	r2, r3
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	440b      	add	r3, r1
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	440b      	add	r3, r1
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
 8001b52:	7dfa      	ldrb	r2, [r7, #23]
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3e4      	bcc.n	8001b24 <interleave_data+0x14>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08a      	sub	sp, #40	; 0x28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffa5 	bl	8001ad0 <null_ptr_check>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d17f      	bne.n	8001c94 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001b94:	f107 010c 	add.w	r1, r7, #12
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2218      	movs	r2, #24
 8001b9c:	2088      	movs	r0, #136	; 0x88
 8001b9e:	f7ff fcbf 	bl	8001520 <bmp280_get_regs>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001ba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d171      	bne.n	8001c94 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001bd6:	7c7b      	ldrb	r3, [r7, #17]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	7c3b      	ldrb	r3, [r7, #16]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	7cbb      	ldrb	r3, [r7, #18]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001bfc:	7d7b      	ldrb	r3, [r7, #21]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	7d3b      	ldrb	r3, [r7, #20]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	7dbb      	ldrb	r3, [r7, #22]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001c20:	7e7b      	ldrb	r3, [r7, #25]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	7e3b      	ldrb	r3, [r7, #24]
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001c32:	7efb      	ldrb	r3, [r7, #27]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	7ebb      	ldrb	r3, [r7, #26]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001c44:	7f7b      	ldrb	r3, [r7, #29]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	7f3b      	ldrb	r3, [r7, #28]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	7fbb      	ldrb	r3, [r7, #30]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001c68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8001c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001cae:	2300      	movs	r3, #0
 8001cb0:	753b      	strb	r3, [r7, #20]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001cb6:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <conf_sensor+0x170>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff07 	bl	8001ad0 <null_ptr_check>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8095 	bne.w	8001dfa <conf_sensor+0x15a>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8091 	beq.w	8001dfa <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001cd8:	f107 0114 	add.w	r1, r7, #20
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	20f4      	movs	r0, #244	; 0xf4
 8001ce2:	f7ff fc1d 	bl	8001520 <bmp280_get_regs>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8086 	bne.w	8001e00 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fcb8 	bl	800166a <bmp280_soft_reset>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8001cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d17c      	bne.n	8001e00 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001d06:	7d3b      	ldrb	r3, [r7, #20]
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	b25a      	sxtb	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	015b      	lsls	r3, r3, #5
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001d20:	7d3b      	ldrb	r3, [r7, #20]
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	f023 031c 	bic.w	r3, r3, #28
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	f003 031c 	and.w	r3, r3, #28
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001d40:	7d7b      	ldrb	r3, [r7, #21]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	789b      	ldrb	r3, [r3, #2]
 8001d4e:	015b      	lsls	r3, r3, #5
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001d5a:	7d7b      	ldrb	r3, [r7, #21]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	f023 031c 	bic.w	r3, r3, #28
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	f003 031c 	and.w	r3, r3, #28
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001d7a:	7d7b      	ldrb	r3, [r7, #21]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	791b      	ldrb	r3, [r3, #4]
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001d98:	f107 0114 	add.w	r1, r7, #20
 8001d9c:	f107 0010 	add.w	r0, r7, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f7ff fbf3 	bl	800158e <bmp280_set_regs>
 8001da8:	4603      	mov	r3, r0
 8001daa:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d125      	bne.n	8001e00 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	332c      	adds	r3, #44	; 0x2c
 8001dba:	6810      	ldr	r0, [r2, #0]
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	7912      	ldrb	r2, [r2, #4]
 8001dc0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001dc8:	7d3b      	ldrb	r3, [r7, #20]
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	f023 0303 	bic.w	r3, r3, #3
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001de4:	f107 0114 	add.w	r1, r7, #20
 8001de8:	f107 0010 	add.w	r0, r7, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f7ff fbcd 	bl	800158e <bmp280_set_regs>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001df8:	e002      	b.n	8001e00 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001dfa:	23ff      	movs	r3, #255	; 0xff
 8001dfc:	75fb      	strb	r3, [r7, #23]
 8001dfe:	e000      	b.n	8001e02 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8001e00:	bf00      	nop
    }

    return rslt;
 8001e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800ca34 	.word	0x0800ca34

08001e14 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	dd03      	ble.n	8001e30 <st_check_boundaries+0x1c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <st_check_boundaries+0x6c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	dd09      	ble.n	8001e44 <st_check_boundaries+0x30>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd03      	ble.n	8001e3e <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <st_check_boundaries+0x6c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	dd02      	ble.n	8001e44 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001e3e:	23f4      	movs	r3, #244	; 0xf4
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e015      	b.n	8001e70 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dd03      	ble.n	8001e52 <st_check_boundaries+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <st_check_boundaries+0x6c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	dd02      	ble.n	8001e58 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001e52:	23f6      	movs	r3, #246	; 0xf6
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e00b      	b.n	8001e70 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dd03      	ble.n	8001e66 <st_check_boundaries+0x52>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <st_check_boundaries+0x6c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	dd02      	ble.n	8001e6c <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001e66:	23f5      	movs	r3, #245	; 0xf5
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e001      	b.n	8001e70 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	000fffef 	.word	0x000fffef

08001e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_DMA_Init+0x38>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <MX_DMA_Init+0x38>)
 8001e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_DMA_Init+0x38>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2038      	movs	r0, #56	; 0x38
 8001ea8:	f002 f9d3 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001eac:	2038      	movs	r0, #56	; 0x38
 8001eae:	f002 f9ec 	bl	800428a <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b81      	ldr	r3, [pc, #516]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a80      	ldr	r2, [pc, #512]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f06:	4b75      	ldr	r3, [pc, #468]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a74      	ldr	r2, [pc, #464]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f0c:	f043 0320 	orr.w	r3, r3, #32
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b6c      	ldr	r3, [pc, #432]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b69      	ldr	r3, [pc, #420]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a68      	ldr	r2, [pc, #416]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a62      	ldr	r2, [pc, #392]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b60      	ldr	r3, [pc, #384]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7e:	4b57      	ldr	r3, [pc, #348]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a56      	ldr	r2, [pc, #344]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <MX_GPIO_Init+0x21c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4851      	ldr	r0, [pc, #324]	; (80020e0 <MX_GPIO_Init+0x220>)
 8001f9c:	f002 fed2 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f244 0181 	movw	r1, #16513	; 0x4081
 8001fa6:	484f      	ldr	r0, [pc, #316]	; (80020e4 <MX_GPIO_Init+0x224>)
 8001fa8:	f002 fecc 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	484d      	ldr	r0, [pc, #308]	; (80020e8 <MX_GPIO_Init+0x228>)
 8001fb2:	f002 fec7 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4844      	ldr	r0, [pc, #272]	; (80020e0 <MX_GPIO_Init+0x220>)
 8001fce:	f002 fd0f 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <MX_GPIO_Init+0x22c>)
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4842      	ldr	r0, [pc, #264]	; (80020f0 <MX_GPIO_Init+0x230>)
 8001fe8:	f002 fd02 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fec:	2332      	movs	r3, #50	; 0x32
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	483a      	ldr	r0, [pc, #232]	; (80020f0 <MX_GPIO_Init+0x230>)
 8002008:	f002 fcf2 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800200c:	2386      	movs	r3, #134	; 0x86
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800201c:	230b      	movs	r3, #11
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <MX_GPIO_Init+0x234>)
 8002028:	f002 fce2 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800202c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_GPIO_Init+0x224>)
 8002046:	f002 fcd3 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800205c:	230b      	movs	r3, #11
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	481f      	ldr	r0, [pc, #124]	; (80020e4 <MX_GPIO_Init+0x224>)
 8002068:	f002 fcc2 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4819      	ldr	r0, [pc, #100]	; (80020e8 <MX_GPIO_Init+0x228>)
 8002084:	f002 fcb4 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_GPIO_Init+0x228>)
 800209c:	f002 fca8 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b2:	230b      	movs	r3, #11
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <MX_GPIO_Init+0x228>)
 80020be:	f002 fc97 	bl	80049f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2028      	movs	r0, #40	; 0x28
 80020c8:	f002 f8c3 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020cc:	2028      	movs	r0, #40	; 0x28
 80020ce:	f002 f8dc 	bl	800428a <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3738      	adds	r7, #56	; 0x38
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40021800 	.word	0x40021800
 80020ec:	10110000 	.word	0x10110000
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020000 	.word	0x40020000

080020f8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f023 030f 	bic.w	r3, r3, #15
 8002108:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	f043 030c 	orr.w	r3, r3, #12
 8002116:	b2db      	uxtb	r3, r3
 8002118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	b2db      	uxtb	r3, r3
 8002122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	f043 030c 	orr.w	r3, r3, #12
 800212a:	b2db      	uxtb	r3, r3
 800212c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	b2db      	uxtb	r3, r3
 8002136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002138:	f107 0208 	add.w	r2, r7, #8
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2304      	movs	r3, #4
 8002142:	214e      	movs	r1, #78	; 0x4e
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <lcd_send_cmd+0x5c>)
 8002146:	f002 febf 	bl	8004ec8 <HAL_I2C_Master_Transmit>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000032c 	.word	0x2000032c

08002158 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	f043 030d 	orr.w	r3, r3, #13
 8002176:	b2db      	uxtb	r3, r3
 8002178:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f043 0309 	orr.w	r3, r3, #9
 8002180:	b2db      	uxtb	r3, r3
 8002182:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	f043 030d 	orr.w	r3, r3, #13
 800218a:	b2db      	uxtb	r3, r3
 800218c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800218e:	7bbb      	ldrb	r3, [r7, #14]
 8002190:	f043 0309 	orr.w	r3, r3, #9
 8002194:	b2db      	uxtb	r3, r3
 8002196:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	2364      	movs	r3, #100	; 0x64
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2304      	movs	r3, #4
 80021a2:	214e      	movs	r1, #78	; 0x4e
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <lcd_send_data+0x5c>)
 80021a6:	f002 fe8f 	bl	8004ec8 <HAL_I2C_Master_Transmit>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000032c 	.word	0x2000032c

080021b8 <lcd_clear>:

void lcd_clear (void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80021be:	2080      	movs	r0, #128	; 0x80
 80021c0:	f7ff ff9a 	bl	80020f8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	e005      	b.n	80021d6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80021ca:	2020      	movs	r0, #32
 80021cc:	f7ff ffc4 	bl	8002158 <lcd_send_data>
	for (int i=0; i<70; i++)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b45      	cmp	r3, #69	; 0x45
 80021da:	ddf6      	ble.n	80021ca <lcd_clear+0x12>
	}
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    switch (row)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <lcd_put_cur+0x16>
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d005      	beq.n	8002204 <lcd_put_cur+0x20>
 80021f8:	e009      	b.n	800220e <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002200:	603b      	str	r3, [r7, #0]
            break;
 8002202:	e004      	b.n	800220e <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800220a:	603b      	str	r3, [r7, #0]
            break;
 800220c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff70 	bl	80020f8 <lcd_send_cmd>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <lcd_init>:


void lcd_init (void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002224:	2032      	movs	r0, #50	; 0x32
 8002226:	f001 f9b5 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x30);
 800222a:	2030      	movs	r0, #48	; 0x30
 800222c:	f7ff ff64 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002230:	2005      	movs	r0, #5
 8002232:	f001 f9af 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002236:	2030      	movs	r0, #48	; 0x30
 8002238:	f7ff ff5e 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800223c:	2001      	movs	r0, #1
 800223e:	f001 f9a9 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002242:	2030      	movs	r0, #48	; 0x30
 8002244:	f7ff ff58 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(10);
 8002248:	200a      	movs	r0, #10
 800224a:	f001 f9a3 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800224e:	2020      	movs	r0, #32
 8002250:	f7ff ff52 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f001 f99d 	bl	8003594 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800225a:	2028      	movs	r0, #40	; 0x28
 800225c:	f7ff ff4c 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f001 f997 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002266:	2008      	movs	r0, #8
 8002268:	f7ff ff46 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f001 f991 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002272:	2001      	movs	r0, #1
 8002274:	f7ff ff40 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 8002278:	2001      	movs	r0, #1
 800227a:	f001 f98b 	bl	8003594 <HAL_Delay>
	HAL_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f001 f988 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002284:	2006      	movs	r0, #6
 8002286:	f7ff ff37 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f001 f982 	bl	8003594 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002290:	200c      	movs	r0, #12
 8002292:	f7ff ff31 	bl	80020f8 <lcd_send_cmd>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}

0800229a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80022a2:	e006      	b.n	80022b2 <lcd_send_string+0x18>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff53 	bl	8002158 <lcd_send_data>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f4      	bne.n	80022a4 <lcd_send_string+0xa>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_I2C1_Init+0x74>)
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <MX_I2C1_Init+0x78>)
 80022cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_I2C1_Init+0x74>)
 80022d0:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <MX_I2C1_Init+0x7c>)
 80022d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_I2C1_Init+0x74>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_I2C1_Init+0x74>)
 80022dc:	2201      	movs	r2, #1
 80022de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_I2C1_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_I2C1_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_I2C1_Init+0x74>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_I2C1_Init+0x74>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_I2C1_Init+0x74>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <MX_I2C1_Init+0x74>)
 8002300:	f002 fd52 	bl	8004da8 <HAL_I2C_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800230a:	f000 fc7f 	bl	8002c0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800230e:	2100      	movs	r1, #0
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <MX_I2C1_Init+0x74>)
 8002312:	f003 fe94 	bl	800603e <HAL_I2CEx_ConfigAnalogFilter>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800231c:	f000 fc76 	bl	8002c0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002320:	2100      	movs	r1, #0
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_I2C1_Init+0x74>)
 8002324:	f003 fed6 	bl	80060d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800232e:	f000 fc6d 	bl	8002c0c <Error_Handler>
  }

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002e0 	.word	0x200002e0
 800233c:	40005400 	.word	0x40005400
 8002340:	00808cd2 	.word	0x00808cd2

08002344 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_I2C2_Init+0x74>)
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <MX_I2C2_Init+0x78>)
 800234c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <MX_I2C2_Init+0x7c>)
 8002352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_I2C2_Init+0x74>)
 800235c:	2201      	movs	r2, #1
 800235e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_I2C2_Init+0x74>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_I2C2_Init+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002380:	f002 fd12 	bl	8004da8 <HAL_I2C_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800238a:	f000 fc3f 	bl	8002c0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4809      	ldr	r0, [pc, #36]	; (80023b8 <MX_I2C2_Init+0x74>)
 8002392:	f003 fe54 	bl	800603e <HAL_I2CEx_ConfigAnalogFilter>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800239c:	f000 fc36 	bl	8002c0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_I2C2_Init+0x74>)
 80023a4:	f003 fe96 	bl	80060d4 <HAL_I2CEx_ConfigDigitalFilter>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80023ae:	f000 fc2d 	bl	8002c0c <Error_Handler>
  }

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000032c 	.word	0x2000032c
 80023bc:	40005800 	.word	0x40005800
 80023c0:	00808cd2 	.word	0x00808cd2

080023c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <HAL_I2C_MspInit+0x118>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d139      	bne.n	800245a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80023fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002404:	2312      	movs	r3, #18
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002410:	2304      	movs	r3, #4
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	4832      	ldr	r0, [pc, #200]	; (80024e4 <HAL_I2C_MspInit+0x120>)
 800241c:	f002 fae8 	bl	80049f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 8002426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	201f      	movs	r0, #31
 800243e:	f001 ff08 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002442:	201f      	movs	r0, #31
 8002444:	f001 ff21 	bl	800428a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2020      	movs	r0, #32
 800244e:	f001 ff00 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002452:	2020      	movs	r0, #32
 8002454:	f001 ff19 	bl	800428a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002458:	e03c      	b.n	80024d4 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_I2C_MspInit+0x124>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d137      	bne.n	80024d4 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800247c:	2303      	movs	r3, #3
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002484:	2301      	movs	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800248c:	2304      	movs	r3, #4
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <HAL_I2C_MspInit+0x128>)
 8002498:	f002 faaa 	bl	80049f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 80024a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_I2C_MspInit+0x11c>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2021      	movs	r0, #33	; 0x21
 80024ba:	f001 feca 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80024be:	2021      	movs	r0, #33	; 0x21
 80024c0:	f001 fee3 	bl	800428a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	2022      	movs	r0, #34	; 0x22
 80024ca:	f001 fec2 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80024ce:	2022      	movs	r0, #34	; 0x22
 80024d0:	f001 fedb 	bl	800428a <HAL_NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40005400 	.word	0x40005400
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40005800 	.word	0x40005800
 80024ec:	40021400 	.word	0x40021400

080024f0 <spi_reg_read>:
}



int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	; 0x50
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	603a      	str	r2, [r7, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  int32_t iError = BMP280_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[SPI_BUFFER_LEN] = {0,};
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	615a      	str	r2, [r3, #20]
 8002522:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[SPI_BUFFER_LEN] = {0,};
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	615a      	str	r2, [r3, #20]
 8002536:	619a      	str	r2, [r3, #24]
  uint8_t stringpos;
 txarray[0] = reg_addr;
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 HAL_GPIO_WritePin(SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 800253e:	2200      	movs	r2, #0
 8002540:	2110      	movs	r1, #16
 8002542:	4824      	ldr	r0, [pc, #144]	; (80025d4 <spi_reg_read+0xe4>)
 8002544:	f002 fbfe 	bl	8004d44 <HAL_GPIO_WritePin>
 status = HAL_SPI_TransmitReceive( &hspi4 , (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+1, 5);
 8002548:	88bb      	ldrh	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	b298      	uxth	r0, r3
 800254e:	f107 0208 	add.w	r2, r7, #8
 8002552:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002556:	2305      	movs	r3, #5
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4603      	mov	r3, r0
 800255c:	481e      	ldr	r0, [pc, #120]	; (80025d8 <spi_reg_read+0xe8>)
 800255e:	f005 f9df 	bl	8007920 <HAL_SPI_TransmitReceive>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while( hspi4.State == HAL_SPI_STATE_BUSY ) {};
 8002568:	bf00      	nop
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <spi_reg_read+0xe8>)
 800256c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d0f9      	beq.n	800256a <spi_reg_read+0x7a>
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8002576:	2201      	movs	r2, #1
 8002578:	2110      	movs	r1, #16
 800257a:	4816      	ldr	r0, [pc, #88]	; (80025d4 <spi_reg_read+0xe4>)
 800257c:	f002 fbe2 	bl	8004d44 <HAL_GPIO_WritePin>
 for (stringpos = 0; stringpos < length; stringpos++)
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002586:	e011      	b.n	80025ac <spi_reg_read+0xbc>
 {
	 *(reg_data + stringpos) = rxarray[stringpos + BMP280_DATA_INDEX];
 8002588:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	440b      	add	r3, r1
 8002596:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800259a:	440a      	add	r2, r1
 800259c:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 80025a0:	701a      	strb	r2, [r3, #0]
 for (stringpos = 0; stringpos < length; stringpos++)
 80025a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80025a6:	3301      	adds	r3, #1
 80025a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80025ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	88ba      	ldrh	r2, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8e7      	bhi.n	8002588 <spi_reg_read+0x98>
 }
 if (status != HAL_OK)
 80025b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <spi_reg_read+0xd6>
 {
	 iError = (-1);
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
 }
 return (int8_t)iError;
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	b25b      	sxtb	r3, r3
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3748      	adds	r7, #72	; 0x48
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	200004c8 	.word	0x200004c8

080025dc <spi_reg_write>:
int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b092      	sub	sp, #72	; 0x48
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	603a      	str	r2, [r7, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	460b      	mov	r3, r1
 80025ec:	71bb      	strb	r3, [r7, #6]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	int32_t iError = BMP280_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t txarray[SPI_BUFFER_LEN * BMP280_ADDRESS_INDEX];
	uint8_t stringpos;
	txarray[0] = reg_addr;
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	723b      	strb	r3, [r7, #8]

	for (stringpos = 0; stringpos < length; stringpos++)
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002606:	e011      	b.n	800262c <spi_reg_write+0x50>
	{
		txarray[stringpos+BMP280_DATA_INDEX] = reg_data[stringpos];
 8002608:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	441a      	add	r2, r3
 8002610:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002614:	3301      	adds	r3, #1
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800261c:	440b      	add	r3, r1
 800261e:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (stringpos = 0; stringpos < length; stringpos++)
 8002622:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002626:	3301      	adds	r3, #1
 8002628:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800262c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002630:	b29b      	uxth	r3, r3
 8002632:	88ba      	ldrh	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8e7      	bhi.n	8002608 <spi_reg_write+0x2c>
	}

	HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 8002638:	2200      	movs	r2, #0
 800263a:	2110      	movs	r1, #16
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <spi_reg_write+0xb0>)
 800263e:	f002 fb81 	bl	8004d44 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit( &hspi4 , (uint8_t*)(&txarray), length*2, 100);
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	f107 0108 	add.w	r1, r7, #8
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	4810      	ldr	r0, [pc, #64]	; (8002690 <spi_reg_write+0xb4>)
 8002650:	f005 f800 	bl	8007654 <HAL_SPI_Transmit>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	while( hspi4.State == HAL_SPI_STATE_BUSY )
 800265a:	bf00      	nop
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <spi_reg_write+0xb4>)
 800265e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d0f9      	beq.n	800265c <spi_reg_write+0x80>
	{

	};
	HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8002668:	2201      	movs	r2, #1
 800266a:	2110      	movs	r1, #16
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <spi_reg_write+0xb0>)
 800266e:	f002 fb69 	bl	8004d44 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 8002672:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <spi_reg_write+0xa4>
	{
		iError = (-1);
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	return (int8_t)iError;
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	b25b      	sxtb	r3, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	3748      	adds	r7, #72	; 0x48
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	200004c8 	.word	0x200004c8

08002694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002694:	b598      	push	{r3, r4, r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	/* PRZEKAZANIE WARTOSCI CZLONOW REGULATORA DO SAMEGO PID */
	  light_PID.Kp = Kp;
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <main+0x1e8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a78      	ldr	r2, [pc, #480]	; (8002880 <main+0x1ec>)
 800269e:	6193      	str	r3, [r2, #24]
	  light_PID.Ki = Ki;
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <main+0x1f0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a76      	ldr	r2, [pc, #472]	; (8002880 <main+0x1ec>)
 80026a6:	61d3      	str	r3, [r2, #28]
	  light_PID.Kd = Kd;
 80026a8:	4b77      	ldr	r3, [pc, #476]	; (8002888 <main+0x1f4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a74      	ldr	r2, [pc, #464]	; (8002880 <main+0x1ec>)
 80026ae:	6213      	str	r3, [r2, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b0:	f000 ff13 	bl	80034da <HAL_Init>

 // print_rslt(" bmp280_set_power_mode status", rslt);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b4:	f000 f91c 	bl	80028f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b8:	f7ff fc02 	bl	8001ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 80026bc:	f7ff fbe2 	bl	8001e84 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80026c0:	f000 fda6 	bl	8003210 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80026c4:	f000 fe20 	bl	8003308 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80026c8:	f7fe fd4c 	bl	8001164 <MX_ADC1_Init>
  MX_I2C1_Init();
 80026cc:	f7ff fdfa 	bl	80022c4 <MX_I2C1_Init>
  MX_SPI4_Init();
 80026d0:	f000 faa4 	bl	8002c1c <MX_SPI4_Init>
  MX_TIM4_Init();
 80026d4:	f000 fcbc 	bl	8003050 <MX_TIM4_Init>
  MX_TIM3_Init();
 80026d8:	f000 fc26 	bl	8002f28 <MX_TIM3_Init>
  MX_I2C2_Init();
 80026dc:	f7ff fe32 	bl	8002344 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //bh1750 init*******************************************
  BH1750_Init(&hi2c1);
 80026e0:	486a      	ldr	r0, [pc, #424]	; (800288c <main+0x1f8>)
 80026e2:	f7fe fe0d 	bl	8001300 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 80026e6:	2010      	movs	r0, #16
 80026e8:	f7fe fe40 	bl	800136c <BH1750_SetMode>
  lcd_init();
 80026ec:	f7ff fd98 	bl	8002220 <lcd_init>
  arm_pid_init_f32(&light_PID, 1);
 80026f0:	2101      	movs	r1, #1
 80026f2:	4863      	ldr	r0, [pc, #396]	; (8002880 <main+0x1ec>)
 80026f4:	f000 febb 	bl	800346e <arm_pid_init_f32>


  //******************************************************

  HAL_TIM_Base_Start_IT(&htim4);
 80026f8:	4865      	ldr	r0, [pc, #404]	; (8002890 <main+0x1fc>)
 80026fa:	f005 fd8d 	bl	8008218 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80026fe:	2108      	movs	r1, #8
 8002700:	4864      	ldr	r0, [pc, #400]	; (8002894 <main+0x200>)
 8002702:	f005 fde9 	bl	80082d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002706:	2104      	movs	r1, #4
 8002708:	4862      	ldr	r0, [pc, #392]	; (8002894 <main+0x200>)
 800270a:	f005 fde5 	bl	80082d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800270e:	2100      	movs	r1, #0
 8002710:	4860      	ldr	r0, [pc, #384]	; (8002894 <main+0x200>)
 8002712:	f005 fde1 	bl	80082d8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, &adc_data, 1);
 8002716:	2201      	movs	r2, #1
 8002718:	495f      	ldr	r1, [pc, #380]	; (8002898 <main+0x204>)
 800271a:	4860      	ldr	r0, [pc, #384]	; (800289c <main+0x208>)
 800271c:	f001 f8e2 	bl	80038e4 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart3, &Received_msg,9);
 8002720:	2209      	movs	r2, #9
 8002722:	495f      	ldr	r1, [pc, #380]	; (80028a0 <main+0x20c>)
 8002724:	485f      	ldr	r0, [pc, #380]	; (80028a4 <main+0x210>)
 8002726:	f006 fe49 	bl	80093bc <HAL_UART_Receive_IT>


  //bmp280 init*******************************************
  bmp.delay_ms = HAL_Delay;
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <main+0x214>)
 800272c:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <main+0x218>)
 800272e:	60da      	str	r2, [r3, #12]
   bmp.dev_id = 0;
 8002730:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <main+0x214>)
 8002732:	2200      	movs	r2, #0
 8002734:	705a      	strb	r2, [r3, #1]
   bmp.intf = BMP280_SPI_INTF;
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <main+0x214>)
 8002738:	2200      	movs	r2, #0
 800273a:	709a      	strb	r2, [r3, #2]
   bmp.read = spi_reg_read;
 800273c:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <main+0x214>)
 800273e:	4a5c      	ldr	r2, [pc, #368]	; (80028b0 <main+0x21c>)
 8002740:	605a      	str	r2, [r3, #4]
   bmp.write = spi_reg_write;
 8002742:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <main+0x214>)
 8002744:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <main+0x220>)
 8002746:	609a      	str	r2, [r3, #8]
   rslt = bmp280_init(&bmp);
 8002748:	4857      	ldr	r0, [pc, #348]	; (80028a8 <main+0x214>)
 800274a:	f7fe ffb3 	bl	80016b4 <bmp280_init>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <main+0x224>)
 8002754:	701a      	strb	r2, [r3, #0]
   rslt = bmp280_get_config(&conf, &bmp);
 8002756:	4954      	ldr	r1, [pc, #336]	; (80028a8 <main+0x214>)
 8002758:	4858      	ldr	r0, [pc, #352]	; (80028bc <main+0x228>)
 800275a:	f7ff f811 	bl	8001780 <bmp280_get_config>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <main+0x224>)
 8002764:	701a      	strb	r2, [r3, #0]
   conf.filter = BMP280_FILTER_COEFF_2;
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <main+0x228>)
 8002768:	2201      	movs	r2, #1
 800276a:	70da      	strb	r2, [r3, #3]
   conf.os_temp = BMP280_OS_4X;
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <main+0x228>)
 800276e:	2203      	movs	r2, #3
 8002770:	701a      	strb	r2, [r3, #0]
   conf.os_pres = BMP280_OS_4X;
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <main+0x228>)
 8002774:	2203      	movs	r2, #3
 8002776:	705a      	strb	r2, [r3, #1]
   conf.odr = BMP280_ODR_1000_MS;
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <main+0x228>)
 800277a:	2205      	movs	r2, #5
 800277c:	709a      	strb	r2, [r3, #2]
   rslt = bmp280_set_config(&conf, &bmp);
 800277e:	494a      	ldr	r1, [pc, #296]	; (80028a8 <main+0x214>)
 8002780:	484e      	ldr	r0, [pc, #312]	; (80028bc <main+0x228>)
 8002782:	f7ff f84f 	bl	8001824 <bmp280_set_config>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <main+0x224>)
 800278c:	701a      	strb	r2, [r3, #0]
   rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 800278e:	4946      	ldr	r1, [pc, #280]	; (80028a8 <main+0x214>)
 8002790:	2003      	movs	r0, #3
 8002792:	f7ff f856 	bl	8001842 <bmp280_set_power_mode>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <main+0x224>)
 800279c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reading the raw data from sensor */

	  BH1750_int = ReadData();
 800279e:	f7fe fc71 	bl	8001084 <ReadData>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <main+0x22c>)
 80027a6:	601a      	str	r2, [r3, #0]
	  SetValue(L, BH1750_int, &light_PID);
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <main+0x230>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <main+0x22c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <main+0x1ec>)
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe fc07 	bl	8000fc8 <SetValue>

	  	    if(temp1 > T_int)
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <main+0x234>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <main+0x238>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	d508      	bpl.n	80027e8 <main+0x154>
	  	    {
	  	    	is2Hot = 1;
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <main+0x23c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
	  	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <main+0x200>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	e006      	b.n	80027f6 <main+0x162>
	  	    }
	  	    else
	  	    {
	  	    	is2Hot=0;
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <main+0x23c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
	  	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <main+0x200>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
	  	    }

	  	    if(adc_value < H)
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <main+0x240>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <main+0x244>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d908      	bls.n	8002816 <main+0x182>
	  	    {
	  	    	isDry = 1;
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <main+0x248>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
	  	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <main+0x200>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
 8002814:	e006      	b.n	8002824 <main+0x190>
	  	    }
	  	    else
	  	    {
	  	    	isDry=0;
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <main+0x248>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
	  	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <main+0x200>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
	  	    }



	         rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8002824:	4920      	ldr	r1, [pc, #128]	; (80028a8 <main+0x214>)
 8002826:	482e      	ldr	r0, [pc, #184]	; (80028e0 <main+0x24c>)
 8002828:	f7ff f82a 	bl	8001880 <bmp280_get_uncomp_data>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <main+0x224>)
 8002832:	701a      	strb	r2, [r3, #0]
	         rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <main+0x24c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <main+0x214>)
 800283a:	4619      	mov	r1, r3
 800283c:	4829      	ldr	r0, [pc, #164]	; (80028e4 <main+0x250>)
 800283e:	f7ff f86f 	bl	8001920 <bmp280_get_comp_temp_double>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <main+0x224>)
 8002848:	701a      	strb	r2, [r3, #0]

	         temp1 = temp;
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <main+0x250>)
 800284c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002850:	4618      	mov	r0, r3
 8002852:	4621      	mov	r1, r4
 8002854:	f7fe f9e8 	bl	8000c28 <__aeabi_d2f>
 8002858:	4602      	mov	r2, r0
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <main+0x238>)
 800285c:	601a      	str	r2, [r3, #0]
	         temperatura = temp1;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <main+0x238>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <main+0x254>)
 8002864:	6013      	str	r3, [r2, #0]
	         //size = sprintf(buffer, "  %.2f [C]  ", temp1);
	         //HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);


	         bmp.delay_ms(1000);
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <main+0x214>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286e:	4798      	blx	r3
	         timer++;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <main+0x258>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <main+0x258>)
 8002878:	6013      	str	r3, [r2, #0]
  {
 800287a:	e790      	b.n	800279e <main+0x10a>
 800287c:	20000008 	.word	0x20000008
 8002880:	20000494 	.word	0x20000494
 8002884:	20000010 	.word	0x20000010
 8002888:	2000000c 	.word	0x2000000c
 800288c:	200002e0 	.word	0x200002e0
 8002890:	2000052c 	.word	0x2000052c
 8002894:	2000056c 	.word	0x2000056c
 8002898:	20000460 	.word	0x20000460
 800289c:	2000022c 	.word	0x2000022c
 80028a0:	200004bc 	.word	0x200004bc
 80028a4:	200005ac 	.word	0x200005ac
 80028a8:	20000380 	.word	0x20000380
 80028ac:	08003595 	.word	0x08003595
 80028b0:	080024f1 	.word	0x080024f1
 80028b4:	080025dd 	.word	0x080025dd
 80028b8:	200003b4 	.word	0x200003b4
 80028bc:	20000378 	.word	0x20000378
 80028c0:	20000210 	.word	0x20000210
 80028c4:	20000002 	.word	0x20000002
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000218 	.word	0x20000218
 80028d0:	2000020c 	.word	0x2000020c
 80028d4:	20000004 	.word	0x20000004
 80028d8:	200003d0 	.word	0x200003d0
 80028dc:	2000020d 	.word	0x2000020d
 80028e0:	2000042c 	.word	0x2000042c
 80028e4:	200003b8 	.word	0x200003b8
 80028e8:	20000214 	.word	0x20000214
 80028ec:	2000021c 	.word	0x2000021c

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0b4      	sub	sp, #208	; 0xd0
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028fa:	2230      	movs	r2, #48	; 0x30
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f007 ff84 	bl	800a80c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	2284      	movs	r2, #132	; 0x84
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f007 ff75 	bl	800a80c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002922:	f003 fd6b 	bl	80063fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <SystemClock_Config+0x11c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <SystemClock_Config+0x11c>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <SystemClock_Config+0x11c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <SystemClock_Config+0x120>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002946:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <SystemClock_Config+0x120>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <SystemClock_Config+0x120>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800295a:	2301      	movs	r3, #1
 800295c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002960:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002968:	2302      	movs	r3, #2
 800296a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002976:	2304      	movs	r3, #4
 8002978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800297c:	2348      	movs	r3, #72	; 0x48
 800297e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002982:	2302      	movs	r3, #2
 8002984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002988:	2303      	movs	r3, #3
 800298a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fd42 	bl	800641c <HAL_RCC_OscConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800299e:	f000 f935 	bl	8002c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a2:	230f      	movs	r3, #15
 80029a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 ffcb 	bl	8006964 <HAL_RCC_ClockConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80029d4:	f000 f91a 	bl	8002c0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <SystemClock_Config+0x124>)
 80029da:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029dc:	2300      	movs	r3, #0
 80029de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 f9ae 	bl	8006d54 <HAL_RCCEx_PeriphCLKConfig>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80029fe:	f000 f905 	bl	8002c0c <Error_Handler>
  }
}
 8002a02:	bf00      	nop
 8002a04:	37d0      	adds	r7, #208	; 0xd0
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	0020c100 	.word	0x0020c100

08002a18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	//adc_value = 0.714*(4200.0 - adc_value)/21.0;
	//adc_size = sprintf(adc_buffer, "  Value: %d [%%]\n\r  ", adc_value);
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*)adc_buffer, adc_size);
	//HAL_ADC_Stop_DMA(&hadc1);

}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]




}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	0000      	movs	r0, r0
 8002a44:	0000      	movs	r0, r0
	...

08002a48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d15b      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0xca>
		{

			adc_value = 0.714*(4200.0 - adc_data)/21.0;
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd80 	bl	8000564 <__aeabi_i2d>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	a12c      	add	r1, pc, #176	; (adr r1, 8002b20 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a72:	f7fd fc29 	bl	80002c8 <__aeabi_dsub>
 8002a76:	4603      	mov	r3, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	a32a      	add	r3, pc, #168	; (adr r3, 8002b28 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f7fd fdd8 	bl	8000638 <__aeabi_dmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	4621      	mov	r1, r4
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002a96:	f7fd fef9 	bl	800088c <__aeabi_ddiv>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	f7fe f8a1 	bl	8000be8 <__aeabi_d2uiz>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002aac:	801a      	strh	r2, [r3, #0]

			RefreshLCD_3v(temperatura, adc_value, BH1750_int);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	ee07 3a10 	vmov	s14, r3
 8002abc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	eef0 0a47 	vmov.f32	s1, s14
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	f7fe faed 	bl	80010ac <RefreshLCD_3v>

			i2c_size = sprintf(Uart_data, "L:%d,H:%d,T:%.2f\n\r", BH1750_int, adc_value, temperatura);
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002ad4:	681d      	ldr	r5, [r3, #0]
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	461e      	mov	r6, r3
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	e9cd 3400 	strd	r3, r4, [sp]
 8002aee:	4633      	mov	r3, r6
 8002af0:	462a      	mov	r2, r5
 8002af2:	4915      	ldr	r1, [pc, #84]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002af4:	4815      	ldr	r0, [pc, #84]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002af6:	f008 faed 	bl	800b0d4 <siprintf>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002b00:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit_IT(&huart3, (uint8_t*)Uart_data, i2c_size);
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4910      	ldr	r1, [pc, #64]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002b0c:	4811      	ldr	r0, [pc, #68]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002b0e:	f006 fbf9 	bl	8009304 <HAL_UART_Transmit_IT>
			//adc_size = sprintf(adc_buffer, "  Value: %d [%%]\n\r  ", adc_value);
			//HAL_UART_Transmit_IT(&huart3, (uint8_t*)adc_buffer, adc_size);

		}

}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40b06800 	.word	0x40b06800
 8002b28:	872b020c 	.word	0x872b020c
 8002b2c:	3fe6d916 	.word	0x3fe6d916
 8002b30:	40000800 	.word	0x40000800
 8002b34:	20000460 	.word	0x20000460
 8002b38:	40350000 	.word	0x40350000
 8002b3c:	200003d0 	.word	0x200003d0
 8002b40:	20000214 	.word	0x20000214
 8002b44:	20000210 	.word	0x20000210
 8002b48:	0800ca38 	.word	0x0800ca38
 8002b4c:	200003fc 	.word	0x200003fc
 8002b50:	20000434 	.word	0x20000434
 8002b54:	200005ac 	.word	0x200005ac

08002b58 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	char value1[4]; //light
	char value2[3]; //humm
	char value3[2]; //temp
	int value_i1, value_i2 ,value_i3;

	value1[0] = Received_msg[0];
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	743b      	strb	r3, [r7, #16]
	value1[1] = Received_msg[1];
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	747b      	strb	r3, [r7, #17]
	value1[2] = Received_msg[2];
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	74bb      	strb	r3, [r7, #18]
	value1[2] = Received_msg[3];
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b74:	78db      	ldrb	r3, [r3, #3]
 8002b76:	74bb      	strb	r3, [r7, #18]

	value2[0] = Received_msg[4];
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	733b      	strb	r3, [r7, #12]
	value2[1] = Received_msg[5];
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b80:	795b      	ldrb	r3, [r3, #5]
 8002b82:	737b      	strb	r3, [r7, #13]
	value2[2] = Received_msg[6];
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b86:	799b      	ldrb	r3, [r3, #6]
 8002b88:	73bb      	strb	r3, [r7, #14]

	value3[0] = Received_msg[7];
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b8c:	79db      	ldrb	r3, [r3, #7]
 8002b8e:	723b      	strb	r3, [r7, #8]
	value3[1] = Received_msg[8];
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
 8002b94:	727b      	strb	r3, [r7, #9]


	value_i1 = 10*(atoi(value1));
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f007 fe08 	bl	800a7b0 <atoi>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
	value_i2 = (atoi(value2));
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f007 fdfd 	bl	800a7b0 <atoi>
 8002bb6:	61b8      	str	r0, [r7, #24]
	value_i3= (atoi(value3));
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f007 fdf7 	bl	800a7b0 <atoi>
 8002bc2:	6178      	str	r0, [r7, #20]

	L = value_i1;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_UART_RxCpltCallback+0xa4>)
 8002bca:	801a      	strh	r2, [r3, #0]
	H = value_i2;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_UART_RxCpltCallback+0xa8>)
 8002bd2:	701a      	strb	r2, [r3, #0]
	T_int = value_i3;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_UART_RxCpltCallback+0xac>)
 8002bda:	701a      	strb	r2, [r3, #0]
	memset(Received_msg, 0, sizeof(Received_msg));
 8002bdc:	2209      	movs	r2, #9
 8002bde:	2100      	movs	r1, #0
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002be2:	f007 fe13 	bl	800a80c <memset>

	HAL_UART_Receive_IT(&huart3, &Received_msg,9);
 8002be6:	2209      	movs	r2, #9
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8002bea:	4807      	ldr	r0, [pc, #28]	; (8002c08 <HAL_UART_RxCpltCallback+0xb0>)
 8002bec:	f006 fbe6 	bl	80093bc <HAL_UART_Receive_IT>
}
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200004bc 	.word	0x200004bc
 8002bfc:	20000002 	.word	0x20000002
 8002c00:	20000004 	.word	0x20000004
 8002c04:	20000000 	.word	0x20000000
 8002c08:	200005ac 	.word	0x200005ac

08002c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <MX_SPI4_Init+0x78>)
 8002c24:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c2c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c3a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c52:	2208      	movs	r2, #8
 8002c54:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_SPI4_Init+0x74>)
 8002c7c:	f004 fc58 	bl	8007530 <HAL_SPI_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002c86:	f7ff ffc1 	bl	8002c0c <Error_Handler>
  }

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200004c8 	.word	0x200004c8
 8002c94:	40013400 	.word	0x40013400

08002c98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_SPI_MspInit+0x8c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12f      	bne.n	8002d1a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002cc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_SPI_MspInit+0x90>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002cea:	2364      	movs	r3, #100	; 0x64
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4619      	mov	r1, r3
 8002d04:	4809      	ldr	r0, [pc, #36]	; (8002d2c <HAL_SPI_MspInit+0x94>)
 8002d06:	f001 fe73 	bl	80049f0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2054      	movs	r0, #84	; 0x54
 8002d10:	f001 fa9f 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d14:	2054      	movs	r0, #84	; 0x54
 8002d16:	f001 fab8 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40013400 	.word	0x40013400
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_MspInit+0x44>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_MspInit+0x44>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_MspInit+0x44>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_MspInit+0x44>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_MspInit+0x44>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_MspInit+0x44>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800

08002d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <NMI_Handler+0x4>

08002d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <HardFault_Handler+0x4>

08002d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <MemManage_Handler+0x4>

08002d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8e:	e7fe      	b.n	8002d8e <BusFault_Handler+0x4>

08002d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <UsageFault_Handler+0x4>

08002d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc4:	f000 fbc6 	bl	8003554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <ADC_IRQHandler+0x10>)
 8002dd2:	f000 fc45 	bl	8003660 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000022c 	.word	0x2000022c

08002de0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <TIM4_IRQHandler+0x10>)
 8002de6:	f005 fabb 	bl	8008360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	2000052c 	.word	0x2000052c

08002df4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <I2C1_EV_IRQHandler+0x10>)
 8002dfa:	f002 fa4f 	bl	800529c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200002e0 	.word	0x200002e0

08002e08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <I2C1_ER_IRQHandler+0x10>)
 8002e0e:	f002 fa5f 	bl	80052d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200002e0 	.word	0x200002e0

08002e1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <I2C2_EV_IRQHandler+0x10>)
 8002e22:	f002 fa3b 	bl	800529c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000032c 	.word	0x2000032c

08002e30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <I2C2_ER_IRQHandler+0x10>)
 8002e36:	f002 fa4b 	bl	80052d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000032c 	.word	0x2000032c

08002e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <USART3_IRQHandler+0x10>)
 8002e4a:	f006 fb59 	bl	8009500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200005ac 	.word	0x200005ac

08002e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e60:	f001 ff8a 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA2_Stream0_IRQHandler+0x10>)
 8002e6e:	f001 fb57 	bl	8004520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000274 	.word	0x20000274

08002e7c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <SPI4_IRQHandler+0x10>)
 8002e82:	f004 ff61 	bl	8007d48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200004c8 	.word	0x200004c8

08002e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec0:	f007 fc7a 	bl	800a7b8 <__errno>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20050000 	.word	0x20050000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	20000220 	.word	0x20000220
 8002ef8:	20000a38 	.word	0x20000a38

08002efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <SystemInit+0x28>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <SystemInit+0x28>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SystemInit+0x28>)
 8002f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f16:	609a      	str	r2, [r3, #8]
#endif
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	615a      	str	r2, [r3, #20]
 8002f58:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f5c:	4a3b      	ldr	r2, [pc, #236]	; (800304c <MX_TIM3_Init+0x124>)
 8002f5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f62:	2247      	movs	r2, #71	; 0x47
 8002f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7a:	4b33      	ldr	r3, [pc, #204]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f80:	4831      	ldr	r0, [pc, #196]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f82:	f005 f91d 	bl	80081c0 <HAL_TIM_Base_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f8c:	f7ff fe3e 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	482a      	ldr	r0, [pc, #168]	; (8003048 <MX_TIM3_Init+0x120>)
 8002f9e:	f005 fc17 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002fa8:	f7ff fe30 	bl	8002c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fac:	4826      	ldr	r0, [pc, #152]	; (8003048 <MX_TIM3_Init+0x120>)
 8002fae:	f005 f95d 	bl	800826c <HAL_TIM_PWM_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002fb8:	f7ff fe28 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	481f      	ldr	r0, [pc, #124]	; (8003048 <MX_TIM3_Init+0x120>)
 8002fcc:	f006 f8a0 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002fd6:	f7ff fe19 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fda:	2360      	movs	r3, #96	; 0x60
 8002fdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002fde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4815      	ldr	r0, [pc, #84]	; (8003048 <MX_TIM3_Init+0x120>)
 8002ff4:	f005 fad4 	bl	80085a0 <HAL_TIM_PWM_ConfigChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002ffe:	f7ff fe05 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8003002:	2396      	movs	r3, #150	; 0x96
 8003004:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003006:	463b      	mov	r3, r7
 8003008:	2204      	movs	r2, #4
 800300a:	4619      	mov	r1, r3
 800300c:	480e      	ldr	r0, [pc, #56]	; (8003048 <MX_TIM3_Init+0x120>)
 800300e:	f005 fac7 	bl	80085a0 <HAL_TIM_PWM_ConfigChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8003018:	f7ff fdf8 	bl	8002c0c <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 800301c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003020:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	2208      	movs	r2, #8
 8003026:	4619      	mov	r1, r3
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <MX_TIM3_Init+0x120>)
 800302a:	f005 fab9 	bl	80085a0 <HAL_TIM_PWM_ConfigChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8003034:	f7ff fdea 	bl	8002c0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <MX_TIM3_Init+0x120>)
 800303a:	f000 f893 	bl	8003164 <HAL_TIM_MspPostInit>

}
 800303e:	bf00      	nop
 8003040:	3738      	adds	r7, #56	; 0x38
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000056c 	.word	0x2000056c
 800304c:	40000400 	.word	0x40000400

08003050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <MX_TIM4_Init+0x98>)
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <MX_TIM4_Init+0x9c>)
 8003072:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35999;
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <MX_TIM4_Init+0x98>)
 8003076:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800307a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <MX_TIM4_Init+0x98>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <MX_TIM4_Init+0x98>)
 8003084:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <MX_TIM4_Init+0x98>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <MX_TIM4_Init+0x98>)
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <MX_TIM4_Init+0x98>)
 8003098:	f005 f892 	bl	80081c0 <HAL_TIM_Base_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80030a2:	f7ff fdb3 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	4619      	mov	r1, r3
 80030b2:	480d      	ldr	r0, [pc, #52]	; (80030e8 <MX_TIM4_Init+0x98>)
 80030b4:	f005 fb8c 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80030be:	f7ff fda5 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	; (80030e8 <MX_TIM4_Init+0x98>)
 80030d0:	f006 f81e 	bl	8009110 <HAL_TIMEx_MasterConfigSynchronization>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80030da:	f7ff fd97 	bl	8002c0c <Error_Handler>
  }

}
 80030de:	bf00      	nop
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000052c 	.word	0x2000052c
 80030ec:	40000800 	.word	0x40000800

080030f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <HAL_TIM_Base_MspInit+0x68>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10c      	bne.n	800311c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800311a:	e018      	b.n	800314e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_TIM_Base_MspInit+0x70>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d113      	bne.n	800314e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	201e      	movs	r0, #30
 8003144:	f001 f885 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003148:	201e      	movs	r0, #30
 800314a:	f001 f89e 	bl	800428a <HAL_NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40000400 	.word	0x40000400
 800315c:	40023800 	.word	0x40023800
 8003160:	40000800 	.word	0x40000800

08003164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_TIM_MspPostInit+0x9c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d138      	bne.n	80031f8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_TIM_MspPostInit+0xa0>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031b6:	2340      	movs	r3, #64	; 0x40
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c6:	2302      	movs	r3, #2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <HAL_TIM_MspPostInit+0xa4>)
 80031d2:	f001 fc0d 	bl	80049f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e8:	2302      	movs	r3, #2
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <HAL_TIM_MspPostInit+0xa8>)
 80031f4:	f001 fbfc 	bl	80049f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40000400 	.word	0x40000400
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020800 	.word	0x40020800

08003210 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <MX_USART3_UART_Init+0x5c>)
 8003218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <MX_USART3_UART_Init+0x58>)
 800321c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_USART3_UART_Init+0x58>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003236:	220c      	movs	r2, #12
 8003238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_USART3_UART_Init+0x58>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_USART3_UART_Init+0x58>)
 800324e:	2200      	movs	r2, #0
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <MX_USART3_UART_Init+0x58>)
 8003254:	f006 f808 	bl	8009268 <HAL_UART_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800325e:	f7ff fcd5 	bl	8002c0c <Error_Handler>
  }

}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200005ac 	.word	0x200005ac
 800326c:	40004800 	.word	0x40004800

08003270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_UART_MspInit+0x8c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d130      	bne.n	80032f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_UART_MspInit+0x90>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_UART_MspInit+0x90>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_UART_MspInit+0x90>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_UART_MspInit+0x90>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_UART_MspInit+0x90>)
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_UART_MspInit+0x90>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80032c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032d4:	2307      	movs	r3, #7
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4809      	ldr	r0, [pc, #36]	; (8003304 <HAL_UART_MspInit+0x94>)
 80032e0:	f001 fb86 	bl	80049f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	2027      	movs	r0, #39	; 0x27
 80032ea:	f000 ffb2 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032ee:	2027      	movs	r0, #39	; 0x27
 80032f0:	f000 ffcb 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032f4:	bf00      	nop
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40004800 	.word	0x40004800
 8003300:	40023800 	.word	0x40023800
 8003304:	40020c00 	.word	0x40020c00

08003308 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800330e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003312:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003316:	2206      	movs	r2, #6
 8003318:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800331c:	2202      	movs	r2, #2
 800331e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003328:	2202      	movs	r2, #2
 800332a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800332e:	2201      	movs	r2, #1
 8003330:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003334:	2200      	movs	r2, #0
 8003336:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003340:	2201      	movs	r2, #1
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800334c:	f002 ff0e 	bl	800616c <HAL_PCD_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003356:	f7ff fc59 	bl	8002c0c <Error_Handler>
  }

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000062c 	.word	0x2000062c

08003364 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003384:	d141      	bne.n	800340a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800339e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80033a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ac:	2303      	movs	r3, #3
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033b0:	230a      	movs	r3, #10
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4619      	mov	r1, r3
 80033ba:	4817      	ldr	r0, [pc, #92]	; (8003418 <HAL_PCD_MspInit+0xb4>)
 80033bc:	f001 fb18 	bl	80049f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80033c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4810      	ldr	r0, [pc, #64]	; (8003418 <HAL_PCD_MspInit+0xb4>)
 80033d6:	f001 fb0b 	bl	80049f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	6353      	str	r3, [r2, #52]	; 0x34
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_PCD_MspInit+0xb0>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40020000 	.word	0x40020000

0800341c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800341c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003422:	e003      	b.n	800342c <LoopCopyDataInit>

08003424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800342a:	3104      	adds	r1, #4

0800342c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800342c:	480b      	ldr	r0, [pc, #44]	; (800345c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003434:	d3f6      	bcc.n	8003424 <CopyDataInit>
  ldr  r2, =_sbss
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003438:	e002      	b.n	8003440 <LoopFillZerobss>

0800343a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800343a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800343c:	f842 3b04 	str.w	r3, [r2], #4

08003440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003444:	d3f9      	bcc.n	800343a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003446:	f7ff fd59 	bl	8002efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800344a:	f007 f9bb 	bl	800a7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800344e:	f7ff f921 	bl	8002694 <main>
  bx  lr    
 8003452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003454:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003458:	0800ccd8 	.word	0x0800ccd8
  ldr  r0, =_sdata
 800345c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003460:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8003464:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8003468:	20000a38 	.word	0x20000a38

0800346c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800346c:	e7fe      	b.n	800346c <CAN1_RX0_IRQHandler>

0800346e <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	ed93 7a06 	vldr	s14, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	edd3 7a07 	vldr	s15, [r3, #28]
 8003484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edd3 7a08 	vldr	s15, [r3, #32]
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edd3 7a06 	vldr	s15, [r3, #24]
 800349e:	eeb1 7a67 	vneg.f32	s14, s15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80034a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	330c      	adds	r3, #12
 80034c8:	220c      	movs	r2, #12
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f007 f99d 	bl	800a80c <memset>
  }

}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034de:	2003      	movs	r0, #3
 80034e0:	f000 feac 	bl	800423c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f000 f805 	bl	80034f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80034ea:	f7ff fc21 	bl	8002d30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_InitTick+0x54>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_InitTick+0x58>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350a:	fbb3 f3f1 	udiv	r3, r3, r1
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fec7 	bl	80042a6 <HAL_SYSTICK_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e00e      	b.n	8003540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d80a      	bhi.n	800353e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003528:	2200      	movs	r2, #0
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f000 fe8f 	bl	8004252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003534:	4a06      	ldr	r2, [pc, #24]	; (8003550 <HAL_InitTick+0x5c>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000014 	.word	0x20000014
 800354c:	2000001c 	.word	0x2000001c
 8003550:	20000018 	.word	0x20000018

08003554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_IncTick+0x20>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_IncTick+0x24>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4413      	add	r3, r2
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_IncTick+0x24>)
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	2000001c 	.word	0x2000001c
 8003578:	20000a30 	.word	0x20000a30

0800357c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return uwTick;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_GetTick+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000a30 	.word	0x20000a30

08003594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7ff ffee 	bl	800357c <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d005      	beq.n	80035ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_Delay+0x40>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ba:	bf00      	nop
 80035bc:	f7ff ffde 	bl	800357c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d8f7      	bhi.n	80035bc <HAL_Delay+0x28>
  {
  }
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000001c 	.word	0x2000001c

080035d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e031      	b.n	8003652 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fe06 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_ADC_Init+0x84>)
 800361c:	4013      	ands	r3, r2
 800361e:	f043 0202 	orr.w	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fbb2 	bl	8003d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
 8003642:	e001      	b.n	8003648 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	ffffeefd 	.word	0xffffeefd

08003660 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d049      	beq.n	8003736 <HAL_ADC_IRQHandler+0xd6>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d046      	beq.n	8003736 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d12b      	bne.n	8003726 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d127      	bne.n	8003726 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0220 	bic.w	r2, r2, #32
 8003700:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff f976 	bl	8002a18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0212 	mvn.w	r2, #18
 8003734:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d057      	beq.n	8003818 <HAL_ADC_IRQHandler+0x1b8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d054      	beq.n	8003818 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d139      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d12b      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d124      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11d      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d119      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fc3d 	bl	8004088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 020c 	mvn.w	r2, #12
 8003816:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <HAL_ADC_IRQHandler+0x21a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d014      	beq.n	800387a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10d      	bne.n	800387a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f932 	bl	8003ad4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b20      	cmp	r3, #32
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800389a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_ADC_IRQHandler+0x27a>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	f043 0202 	orr.w	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0220 	mvn.w	r2, #32
 80038c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f90c 	bl	8003ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0220 	mvn.w	r2, #32
 80038d8:	601a      	str	r2, [r3, #0]
  }
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Start_DMA+0x1e>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0c7      	b.n	8003a92 <HAL_ADC_Start_DMA+0x1ae>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d018      	beq.n	800394a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003928:	4b5c      	ldr	r3, [pc, #368]	; (8003a9c <HAL_ADC_Start_DMA+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_ADC_Start_DMA+0x1bc>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9a      	lsrs	r2, r3, #18
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800393c:	e002      	b.n	8003944 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3b01      	subs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f9      	bne.n	800393e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 809b 	bne.w	8003a90 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <HAL_ADC_Start_DMA+0x1c0>)
 8003960:	4013      	ands	r3, r2
 8003962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003980:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d106      	bne.n	80039a4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f023 0206 	bic.w	r2, r3, #6
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
 80039a2:	e002      	b.n	80039aa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_ADC_Start_DMA+0x1c4>)
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_ADC_Start_DMA+0x1c8>)
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_ADC_Start_DMA+0x1cc>)
 80039c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	334c      	adds	r3, #76	; 0x4c
 80039fe:	4619      	mov	r1, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f000 fd0a 	bl	800441c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_ADC_Start_DMA+0x1d0>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d136      	bne.n	8003a90 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	e02d      	b.n	8003a90 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_ADC_Start_DMA+0x1d4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10e      	bne.n	8003a5c <HAL_ADC_Start_DMA+0x178>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a5a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_ADC_Start_DMA+0x1d0>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d113      	bne.n	8003a90 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_ADC_Start_DMA+0x1d8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_ADC_Start_DMA+0x1ac>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a8e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000014 	.word	0x20000014
 8003aa0:	431bde83 	.word	0x431bde83
 8003aa4:	fffff8fe 	.word	0xfffff8fe
 8003aa8:	08003f85 	.word	0x08003f85
 8003aac:	0800403f 	.word	0x0800403f
 8003ab0:	0800405b 	.word	0x0800405b
 8003ab4:	40012300 	.word	0x40012300
 8003ab8:	40012000 	.word	0x40012000
 8003abc:	40012200 	.word	0x40012200

08003ac0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1c>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e12a      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x272>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	d93a      	bls.n	8003b9e <HAL_ADC_ConfigChannel+0xa2>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b30:	d035      	beq.n	8003b9e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68d9      	ldr	r1, [r3, #12]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	3b1e      	subs	r3, #30
 8003b48:	2207      	movs	r2, #7
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	400a      	ands	r2, r1
 8003b56:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a87      	ldr	r2, [pc, #540]	; (8003d7c <HAL_ADC_ConfigChannel+0x280>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10a      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68d9      	ldr	r1, [r3, #12]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	061a      	lsls	r2, r3, #24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b76:	e035      	b.n	8003be4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68d9      	ldr	r1, [r3, #12]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4403      	add	r3, r0
 8003b90:	3b1e      	subs	r3, #30
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b9c:	e022      	b.n	8003be4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6919      	ldr	r1, [r3, #16]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6919      	ldr	r1, [r3, #16]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4403      	add	r3, r0
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d824      	bhi.n	8003c36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3b05      	subs	r3, #5
 8003bfe:	221f      	movs	r2, #31
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43da      	mvns	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	3b05      	subs	r3, #5
 8003c28:	fa00 f203 	lsl.w	r2, r0, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	635a      	str	r2, [r3, #52]	; 0x34
 8003c34:	e04c      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d824      	bhi.n	8003c88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3b23      	subs	r3, #35	; 0x23
 8003c50:	221f      	movs	r2, #31
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	3b23      	subs	r3, #35	; 0x23
 8003c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
 8003c86:	e023      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	3b41      	subs	r3, #65	; 0x41
 8003c9a:	221f      	movs	r2, #31
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3b41      	subs	r3, #65	; 0x41
 8003cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_ADC_ConfigChannel+0x284>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x1f4>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003cea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003cee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <HAL_ADC_ConfigChannel+0x284>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d109      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x212>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d105      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_ADC_ConfigChannel+0x284>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d125      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x268>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_ADC_ConfigChannel+0x280>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x22e>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b11      	cmp	r3, #17
 8003d28:	d11c      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <HAL_ADC_ConfigChannel+0x288>)
 8003d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_ADC_ConfigChannel+0x280>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d111      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <HAL_ADC_ConfigChannel+0x28c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_ADC_ConfigChannel+0x290>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9a      	lsrs	r2, r3, #18
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d56:	e002      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f9      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	10000012 	.word	0x10000012
 8003d80:	40012000 	.word	0x40012000
 8003d84:	40012300 	.word	0x40012300
 8003d88:	20000014 	.word	0x20000014
 8003d8c:	431bde83 	.word	0x431bde83

08003d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d98:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <ADC_Init+0x1ec>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a77      	ldr	r2, [pc, #476]	; (8003f7c <ADC_Init+0x1ec>)
 8003d9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003da2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <ADC_Init+0x1ec>)
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4973      	ldr	r1, [pc, #460]	; (8003f7c <ADC_Init+0x1ec>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <ADC_Init+0x1f0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d022      	beq.n	8003e6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6899      	ldr	r1, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	e00f      	b.n	8003e8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0202 	bic.w	r2, r2, #2
 8003e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	005a      	lsls	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01b      	beq.n	8003ef0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	035a      	lsls	r2, r3, #13
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e007      	b.n	8003f00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	051a      	lsls	r2, r3, #20
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6899      	ldr	r1, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f42:	025a      	lsls	r2, r3, #9
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	029a      	lsls	r2, r3, #10
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012300 	.word	0x40012300
 8003f80:	0f000001 	.word	0x0f000001

08003f84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d13c      	bne.n	8004018 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d12b      	bne.n	8004010 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d127      	bne.n	8004010 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d119      	bne.n	8004010 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0220 	bic.w	r2, r2, #32
 8003fea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7fe fd01 	bl	8002a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004016:	e00e      	b.n	8004036 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fd5f 	bl	8003ae8 <HAL_ADC_ErrorCallback>
}
 800402a:	e004      	b.n	8004036 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fd37 	bl	8003ac0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f043 0204 	orr.w	r2, r3, #4
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff fd34 	bl	8003ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <__NVIC_SetPriorityGrouping+0x40>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040b8:	4013      	ands	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <__NVIC_SetPriorityGrouping+0x40>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	60d3      	str	r3, [r2, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000ed00 	.word	0xe000ed00
 80040e0:	05fa0000 	.word	0x05fa0000

080040e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <__NVIC_GetPriorityGrouping+0x18>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	f003 0307 	and.w	r3, r3, #7
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	2b00      	cmp	r3, #0
 8004110:	db0b      	blt.n	800412a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	4907      	ldr	r1, [pc, #28]	; (8004138 <__NVIC_EnableIRQ+0x38>)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2001      	movs	r0, #1
 8004122:	fa00 f202 	lsl.w	r2, r0, r2
 8004126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	e000e100 	.word	0xe000e100

0800413c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	; (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	; (800418c <__NVIC_SetPriority+0x50>)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf28      	it	cs
 80041ae:	2304      	movcs	r3, #4
 80041b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d902      	bls.n	80041c0 <NVIC_EncodePriority+0x30>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3b03      	subs	r3, #3
 80041be:	e000      	b.n	80041c2 <NVIC_EncodePriority+0x32>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	4313      	orrs	r3, r2
         );
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004208:	d301      	bcc.n	800420e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800420a:	2301      	movs	r3, #1
 800420c:	e00f      	b.n	800422e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <SysTick_Config+0x40>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004216:	210f      	movs	r1, #15
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f7ff ff8e 	bl	800413c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <SysTick_Config+0x40>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SysTick_Config+0x40>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff29 	bl	800409c <__NVIC_SetPriorityGrouping>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004264:	f7ff ff3e 	bl	80040e4 <__NVIC_GetPriorityGrouping>
 8004268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ff8e 	bl	8004190 <NVIC_EncodePriority>
 8004274:	4602      	mov	r2, r0
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff5d 	bl	800413c <__NVIC_SetPriority>
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff31 	bl	8004100 <__NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ffa2 	bl	80041f8 <SysTick_Config>
 80042b4:	4603      	mov	r3, r0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff f956 	bl	800357c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e099      	b.n	8004410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fc:	e00f      	b.n	800431e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042fe:	f7ff f93d 	bl	800357c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b05      	cmp	r3, #5
 800430a:	d908      	bls.n	800431e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2203      	movs	r2, #3
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e078      	b.n	8004410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e8      	bne.n	80042fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_DMA_Init+0x158>)
 8004338:	4013      	ands	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800434a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	2b04      	cmp	r3, #4
 8004376:	d107      	bne.n	8004388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4313      	orrs	r3, r2
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d117      	bne.n	80043e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa99 	bl	80048fc <DMA_CheckFifoParam>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043de:	2301      	movs	r3, #1
 80043e0:	e016      	b.n	8004410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa50 	bl	8004890 <DMA_CalcBaseAndBitshift>
 80043f0:	4603      	mov	r3, r0
 80043f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	223f      	movs	r2, #63	; 0x3f
 80043fa:	409a      	lsls	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	f010803f 	.word	0xf010803f

0800441c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_DMA_Start_IT+0x26>
 800443e:	2302      	movs	r3, #2
 8004440:	e048      	b.n	80044d4 <HAL_DMA_Start_IT+0xb8>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d137      	bne.n	80044c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f9e2 	bl	8004834 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	223f      	movs	r2, #63	; 0x3f
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0216 	orr.w	r2, r2, #22
 800448a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800449a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0208 	orr.w	r2, r2, #8
 80044b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e005      	b.n	80044d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d004      	beq.n	80044fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00c      	b.n	8004514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2205      	movs	r2, #5
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800452c:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_DMA_IRQHandler+0x258>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a92      	ldr	r2, [pc, #584]	; (800477c <HAL_DMA_IRQHandler+0x25c>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2208      	movs	r2, #8
 800454c:	409a      	lsls	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0204 	bic.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	2208      	movs	r2, #8
 800457a:	409a      	lsls	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	2201      	movs	r2, #1
 80045b0:	409a      	lsls	r2, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f043 0202 	orr.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	2204      	movs	r2, #4
 80045c8:	409a      	lsls	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2204      	movs	r2, #4
 80045e6:	409a      	lsls	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2210      	movs	r2, #16
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d043      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03c      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	2210      	movs	r2, #16
 800461c:	409a      	lsls	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d024      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
 800464e:	e01f      	b.n	8004690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e016      	b.n	8004690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0208 	bic.w	r2, r2, #8
 800467e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2220      	movs	r2, #32
 8004696:	409a      	lsls	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 808e 	beq.w	80047be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8086 	beq.w	80047be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	2220      	movs	r2, #32
 80046b8:	409a      	lsls	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d136      	bne.n	8004738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0216 	bic.w	r2, r2, #22
 80046d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <HAL_DMA_IRQHandler+0x1da>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0208 	bic.w	r2, r2, #8
 8004708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470e:	223f      	movs	r2, #63	; 0x3f
 8004710:	409a      	lsls	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d07d      	beq.n	800482a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
        }
        return;
 8004736:	e078      	b.n	800482a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01c      	beq.n	8004780 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d108      	bne.n	8004766 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	2b00      	cmp	r3, #0
 800475a:	d030      	beq.n	80047be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
 8004764:	e02b      	b.n	80047be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d027      	beq.n	80047be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
 8004776:	e022      	b.n	80047be <HAL_DMA_IRQHandler+0x29e>
 8004778:	20000014 	.word	0x20000014
 800477c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0210 	bic.w	r2, r2, #16
 800479c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d032      	beq.n	800482c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d022      	beq.n	8004818 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2205      	movs	r2, #5
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d307      	bcc.n	8004806 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f2      	bne.n	80047ea <HAL_DMA_IRQHandler+0x2ca>
 8004804:	e000      	b.n	8004808 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004806:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
 8004828:	e000      	b.n	800482c <HAL_DMA_IRQHandler+0x30c>
        return;
 800482a:	bf00      	nop
    }
  }
}
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004850:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d108      	bne.n	8004874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004872:	e007      	b.n	8004884 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	3b10      	subs	r3, #16
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <DMA_CalcBaseAndBitshift+0x60>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <DMA_CalcBaseAndBitshift+0x64>)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d908      	bls.n	80048d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <DMA_CalcBaseAndBitshift+0x68>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	659a      	str	r2, [r3, #88]	; 0x58
 80048ce:	e006      	b.n	80048de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <DMA_CalcBaseAndBitshift+0x68>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	aaaaaaab 	.word	0xaaaaaaab
 80048f4:	0800ca64 	.word	0x0800ca64
 80048f8:	fffffc00 	.word	0xfffffc00

080048fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11f      	bne.n	8004956 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d855      	bhi.n	80049c8 <DMA_CheckFifoParam+0xcc>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <DMA_CheckFifoParam+0x28>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004947 	.word	0x08004947
 800492c:	08004935 	.word	0x08004935
 8004930:	080049c9 	.word	0x080049c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d045      	beq.n	80049cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004944:	e042      	b.n	80049cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800494e:	d13f      	bne.n	80049d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004954:	e03c      	b.n	80049d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	d121      	bne.n	80049a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d836      	bhi.n	80049d4 <DMA_CheckFifoParam+0xd8>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <DMA_CheckFifoParam+0x70>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004983 	.word	0x08004983
 8004974:	0800497d 	.word	0x0800497d
 8004978:	08004995 	.word	0x08004995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e02f      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d024      	beq.n	80049d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e021      	b.n	80049d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800499c:	d11e      	bne.n	80049dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049a2:	e01b      	b.n	80049dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <DMA_CheckFifoParam+0xb4>
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d003      	beq.n	80049b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049ae:	e018      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e015      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00e      	beq.n	80049e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      break;
 80049c6:	e00b      	b.n	80049e0 <DMA_CheckFifoParam+0xe4>
      break;
 80049c8:	bf00      	nop
 80049ca:	e00a      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049cc:	bf00      	nop
 80049ce:	e008      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049d0:	bf00      	nop
 80049d2:	e006      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049d4:	bf00      	nop
 80049d6:	e004      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049e0:	bf00      	nop
    }
  } 
  
  return status; 
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e175      	b.n	8004cfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a10:	2201      	movs	r2, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	f040 8164 	bne.w	8004cf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d00b      	beq.n	8004a4e <HAL_GPIO_Init+0x5e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d007      	beq.n	8004a4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a42:	2b11      	cmp	r3, #17
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b12      	cmp	r3, #18
 8004a4c:	d130      	bne.n	8004ab0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 0201 	and.w	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2203      	movs	r2, #3
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x100>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b12      	cmp	r3, #18
 8004aee:	d123      	bne.n	8004b38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	08da      	lsrs	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3208      	adds	r2, #8
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	08da      	lsrs	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0203 	and.w	r2, r3, #3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80be 	beq.w	8004cf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7a:	4b65      	ldr	r3, [pc, #404]	; (8004d10 <HAL_GPIO_Init+0x320>)
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	4a64      	ldr	r2, [pc, #400]	; (8004d10 <HAL_GPIO_Init+0x320>)
 8004b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b84:	6453      	str	r3, [r2, #68]	; 0x44
 8004b86:	4b62      	ldr	r3, [pc, #392]	; (8004d10 <HAL_GPIO_Init+0x320>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b92:	4a60      	ldr	r2, [pc, #384]	; (8004d14 <HAL_GPIO_Init+0x324>)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	3302      	adds	r3, #2
 8004b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_GPIO_Init+0x328>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d037      	beq.n	8004c2e <HAL_GPIO_Init+0x23e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a56      	ldr	r2, [pc, #344]	; (8004d1c <HAL_GPIO_Init+0x32c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_GPIO_Init+0x23a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a55      	ldr	r2, [pc, #340]	; (8004d20 <HAL_GPIO_Init+0x330>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02b      	beq.n	8004c26 <HAL_GPIO_Init+0x236>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a54      	ldr	r2, [pc, #336]	; (8004d24 <HAL_GPIO_Init+0x334>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d025      	beq.n	8004c22 <HAL_GPIO_Init+0x232>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a53      	ldr	r2, [pc, #332]	; (8004d28 <HAL_GPIO_Init+0x338>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01f      	beq.n	8004c1e <HAL_GPIO_Init+0x22e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a52      	ldr	r2, [pc, #328]	; (8004d2c <HAL_GPIO_Init+0x33c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d019      	beq.n	8004c1a <HAL_GPIO_Init+0x22a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <HAL_GPIO_Init+0x340>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_GPIO_Init+0x226>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a50      	ldr	r2, [pc, #320]	; (8004d34 <HAL_GPIO_Init+0x344>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00d      	beq.n	8004c12 <HAL_GPIO_Init+0x222>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a4f      	ldr	r2, [pc, #316]	; (8004d38 <HAL_GPIO_Init+0x348>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <HAL_GPIO_Init+0x21e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a4e      	ldr	r2, [pc, #312]	; (8004d3c <HAL_GPIO_Init+0x34c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <HAL_GPIO_Init+0x21a>
 8004c06:	2309      	movs	r3, #9
 8004c08:	e012      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e010      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	e00e      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c12:	2307      	movs	r3, #7
 8004c14:	e00c      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c16:	2306      	movs	r3, #6
 8004c18:	e00a      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	e008      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c1e:	2304      	movs	r3, #4
 8004c20:	e006      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c22:	2303      	movs	r3, #3
 8004c24:	e004      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e002      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f002 0203 	and.w	r2, r2, #3
 8004c36:	0092      	lsls	r2, r2, #2
 8004c38:	4093      	lsls	r3, r2
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c40:	4934      	ldr	r1, [pc, #208]	; (8004d14 <HAL_GPIO_Init+0x324>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	3302      	adds	r3, #2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c72:	4a33      	ldr	r2, [pc, #204]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c78:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	f67f ae86 	bls.w	8004a10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	3724      	adds	r7, #36	; 0x24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40021400 	.word	0x40021400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	40021c00 	.word	0x40021c00
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40022400 	.word	0x40022400
 8004d40:	40013c00 	.word	0x40013c00

08004d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
 8004d50:	4613      	mov	r3, r2
 8004d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d54:	787b      	ldrb	r3, [r7, #1]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d60:	e003      	b.n	8004d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d62:	887b      	ldrh	r3, [r7, #2]
 8004d64:	041a      	lsls	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	619a      	str	r2, [r3, #24]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d8e:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd fe48 	bl	8002a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40013c00 	.word	0x40013c00

08004da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd faf8 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	; 0x24
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e006      	b.n	8004e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d104      	bne.n	8004e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_I2C_Init+0x11c>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	ea42 0103 	orr.w	r1, r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	02008000 	.word	0x02008000

08004ec8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	817b      	strh	r3, [r7, #10]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	f040 80da 	bne.w	800509e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2C_Master_Transmit+0x30>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0d3      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f00:	f7fe fb3c 	bl	800357c <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2319      	movs	r3, #25
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fe72 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0be      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2221      	movs	r2, #33	; 0x21
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2bff      	cmp	r3, #255	; 0xff
 8004f52:	d90e      	bls.n	8004f72 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	22ff      	movs	r2, #255	; 0xff
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	8979      	ldrh	r1, [r7, #10]
 8004f62:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 ffd4 	bl	8005f18 <I2C_TransferConfig>
 8004f70:	e06c      	b.n	800504c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	8979      	ldrh	r1, [r7, #10]
 8004f84:	4b48      	ldr	r3, [pc, #288]	; (80050a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 ffc3 	bl	8005f18 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004f92:	e05b      	b.n	800504c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6a39      	ldr	r1, [r7, #32]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fe6f 	bl	8005c7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e07b      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d034      	beq.n	800504c <HAL_I2C_Master_Transmit+0x184>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d130      	bne.n	800504c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fe01 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e04d      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2bff      	cmp	r3, #255	; 0xff
 800500c:	d90e      	bls.n	800502c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	b2da      	uxtb	r2, r3
 800501a:	8979      	ldrh	r1, [r7, #10]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 ff77 	bl	8005f18 <I2C_TransferConfig>
 800502a:	e00f      	b.n	800504c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	b2da      	uxtb	r2, r3
 800503c:	8979      	ldrh	r1, [r7, #10]
 800503e:	2300      	movs	r3, #0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 ff66 	bl	8005f18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d19e      	bne.n	8004f94 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fe4e 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e01a      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2220      	movs	r2, #32
 8005070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_I2C_Master_Transmit+0x1e4>)
 800507e:	400b      	ands	r3, r1
 8005080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	80002000 	.word	0x80002000
 80050ac:	fe00e800 	.word	0xfe00e800

080050b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	461a      	mov	r2, r3
 80050bc:	460b      	mov	r3, r1
 80050be:	817b      	strh	r3, [r7, #10]
 80050c0:	4613      	mov	r3, r2
 80050c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 80db 	bne.w	8005288 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_I2C_Master_Receive+0x30>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0d4      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050e8:	f7fe fa48 	bl	800357c <HAL_GetTick>
 80050ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2319      	movs	r3, #25
 80050f4:	2201      	movs	r2, #1
 80050f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fd7e 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0bf      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2222      	movs	r2, #34	; 0x22
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2210      	movs	r2, #16
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	893a      	ldrh	r2, [r7, #8]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	2bff      	cmp	r3, #255	; 0xff
 800513a:	d90e      	bls.n	800515a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	22ff      	movs	r2, #255	; 0xff
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	b2da      	uxtb	r2, r3
 8005148:	8979      	ldrh	r1, [r7, #10]
 800514a:	4b52      	ldr	r3, [pc, #328]	; (8005294 <HAL_I2C_Master_Receive+0x1e4>)
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fee0 	bl	8005f18 <I2C_TransferConfig>
 8005158:	e06d      	b.n	8005236 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	b2da      	uxtb	r2, r3
 800516a:	8979      	ldrh	r1, [r7, #10]
 800516c:	4b49      	ldr	r3, [pc, #292]	; (8005294 <HAL_I2C_Master_Receive+0x1e4>)
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fecf 	bl	8005f18 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800517a:	e05c      	b.n	8005236 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	6a39      	ldr	r1, [r7, #32]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fdf7 	bl	8005d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e07c      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d034      	beq.n	8005236 <HAL_I2C_Master_Receive+0x186>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d130      	bne.n	8005236 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fd0c 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e04d      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2bff      	cmp	r3, #255	; 0xff
 80051f6:	d90e      	bls.n	8005216 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	22ff      	movs	r2, #255	; 0xff
 80051fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	b2da      	uxtb	r2, r3
 8005204:	8979      	ldrh	r1, [r7, #10]
 8005206:	2300      	movs	r3, #0
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fe82 	bl	8005f18 <I2C_TransferConfig>
 8005214:	e00f      	b.n	8005236 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	b2da      	uxtb	r2, r3
 8005226:	8979      	ldrh	r1, [r7, #10]
 8005228:	2300      	movs	r3, #0
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fe71 	bl	8005f18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d19d      	bne.n	800517c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fd59 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e01a      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2220      	movs	r2, #32
 800525a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <HAL_I2C_Master_Receive+0x1e8>)
 8005268:	400b      	ands	r3, r1
 800526a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e000      	b.n	800528a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	80002400 	.word	0x80002400
 8005298:	fe00e800 	.word	0xfe00e800

0800529c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
  }
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <HAL_I2C_ER_IRQHandler+0x46>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	09db      	lsrs	r3, r3, #7
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f043 0201 	orr.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005314:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	0a9b      	lsrs	r3, r3, #10
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d010      	beq.n	8005344 <HAL_I2C_ER_IRQHandler+0x74>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	09db      	lsrs	r3, r3, #7
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f043 0208 	orr.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005342:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	0a5b      	lsrs	r3, r3, #9
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_I2C_ER_IRQHandler+0xa2>
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	09db      	lsrs	r3, r3, #7
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f043 0202 	orr.w	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005370:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 030b 	and.w	r3, r3, #11
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fb31 	bl	80059ec <I2C_ITError>
  }
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
 80053c6:	4613      	mov	r3, r2
 80053c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <I2C_Slave_ISR_IT+0x24>
 8005432:	2302      	movs	r3, #2
 8005434:	e0ec      	b.n	8005610 <I2C_Slave_ISR_IT+0x1fe>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <I2C_Slave_ISR_IT+0x4c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005456:	6939      	ldr	r1, [r7, #16]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f99d 	bl	8005798 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04d      	beq.n	8005506 <I2C_Slave_ISR_IT+0xf4>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d047      	beq.n	8005506 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d128      	bne.n	80054d2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b28      	cmp	r3, #40	; 0x28
 800548a:	d108      	bne.n	800549e <I2C_Slave_ISR_IT+0x8c>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005492:	d104      	bne.n	800549e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005494:	6939      	ldr	r1, [r7, #16]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa54 	bl	8005944 <I2C_ITListenCplt>
 800549c:	e032      	b.n	8005504 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b29      	cmp	r3, #41	; 0x29
 80054a8:	d10e      	bne.n	80054c8 <I2C_Slave_ISR_IT+0xb6>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054b0:	d00a      	beq.n	80054c8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fb56 	bl	8005b6c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f92b 	bl	800571c <I2C_ITSlaveSeqCplt>
 80054c6:	e01d      	b.n	8005504 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2210      	movs	r2, #16
 80054ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80054d0:	e096      	b.n	8005600 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2210      	movs	r2, #16
 80054d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f043 0204 	orr.w	r2, r3, #4
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <I2C_Slave_ISR_IT+0xe4>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f2:	f040 8085 	bne.w	8005600 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	4619      	mov	r1, r3
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa75 	bl	80059ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005502:	e07d      	b.n	8005600 <I2C_Slave_ISR_IT+0x1ee>
 8005504:	e07c      	b.n	8005600 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	089b      	lsrs	r3, r3, #2
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d030      	beq.n	8005574 <I2C_Slave_ISR_IT+0x162>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02a      	beq.n	8005574 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d018      	beq.n	800555a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d14f      	bne.n	8005604 <I2C_Slave_ISR_IT+0x1f2>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800556a:	d04b      	beq.n	8005604 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f8d5 	bl	800571c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005572:	e047      	b.n	8005604 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	08db      	lsrs	r3, r3, #3
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <I2C_Slave_ISR_IT+0x184>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800558c:	6939      	ldr	r1, [r7, #16]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f842 	bl	8005618 <I2C_ITAddrCplt>
 8005594:	e037      	b.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d031      	beq.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d02b      	beq.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d018      	beq.n	80055ea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80055e8:	e00d      	b.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055f0:	d002      	beq.n	80055f8 <I2C_Slave_ISR_IT+0x1e6>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f88f 	bl	800571c <I2C_ITSlaveSeqCplt>
 80055fe:	e002      	b.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005604:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562e:	2b28      	cmp	r3, #40	; 0x28
 8005630:	d168      	bne.n	8005704 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	0c1b      	lsrs	r3, r3, #16
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005650:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800566c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d137      	bne.n	80056e6 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005676:	897b      	ldrh	r3, [r7, #10]
 8005678:	09db      	lsrs	r3, r3, #7
 800567a:	b29a      	uxth	r2, r3
 800567c:	89bb      	ldrh	r3, [r7, #12]
 800567e:	4053      	eors	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11c      	bne.n	80056c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569c:	2b02      	cmp	r3, #2
 800569e:	d139      	bne.n	8005714 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056b6:	89ba      	ldrh	r2, [r7, #12]
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe7c 	bl	80053ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80056c2:	e027      	b.n	8005714 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80056c4:	893b      	ldrh	r3, [r7, #8]
 80056c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056c8:	2104      	movs	r1, #4
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fc52 	bl	8005f74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056d8:	89ba      	ldrh	r2, [r7, #12]
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fe6b 	bl	80053ba <HAL_I2C_AddrCallback>
}
 80056e4:	e016      	b.n	8005714 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056e6:	2104      	movs	r1, #4
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc43 	bl	8005f74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056f6:	89ba      	ldrh	r2, [r7, #12]
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fe5c 	bl	80053ba <HAL_I2C_AddrCallback>
}
 8005702:	e007      	b.n	8005714 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2208      	movs	r2, #8
 800570a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b29      	cmp	r3, #41	; 0x29
 8005736:	d112      	bne.n	800575e <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2228      	movs	r2, #40	; 0x28
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2221      	movs	r2, #33	; 0x21
 8005744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005746:	2101      	movs	r1, #1
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fc13 	bl	8005f74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe1b 	bl	8005392 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800575c:	e017      	b.n	800578e <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b2a      	cmp	r3, #42	; 0x2a
 8005768:	d111      	bne.n	800578e <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2228      	movs	r2, #40	; 0x28
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2222      	movs	r2, #34	; 0x22
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005778:	2102      	movs	r1, #2
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fbfa 	bl	8005f74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fe0c 	bl	80053a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2220      	movs	r2, #32
 80057b4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80057b6:	2107      	movs	r1, #7
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fbdb 	bl	8005f74 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057cc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b58      	ldr	r3, [pc, #352]	; (800593c <I2C_ITSlaveCplt+0x1a4>)
 80057da:	400b      	ands	r3, r1
 80057dc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9c4 	bl	8005b6c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0b9b      	lsrs	r3, r3, #14
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005806:	e010      	b.n	800582a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	0bdb      	lsrs	r3, r3, #15
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	089b      	lsrs	r3, r3, #2
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d020      	beq.n	8005878 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0204 	orr.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f89b 	bl	80059ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b28      	cmp	r3, #40	; 0x28
 80058c0:	d138      	bne.n	8005934 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f83d 	bl	8005944 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058ca:	e033      	b.n	8005934 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d4:	d011      	beq.n	80058fa <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff20 	bl	800571c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <I2C_ITSlaveCplt+0x1a8>)
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fd6f 	bl	80053d6 <HAL_I2C_ListenCpltCallback>
}
 80058f8:	e01c      	b.n	8005934 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b22      	cmp	r3, #34	; 0x22
 8005904:	d10b      	bne.n	800591e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fd45 	bl	80053a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800591c:	e00a      	b.n	8005934 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fd2f 	bl	8005392 <HAL_I2C_SlaveTxCpltCallback>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	fe00e800 	.word	0xfe00e800
 8005940:	ffff0000 	.word	0xffff0000

08005944 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <I2C_ITListenCplt+0xa4>)
 8005952:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d022      	beq.n	80059c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	f043 0204 	orr.w	r2, r3, #4
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059c2:	2107      	movs	r1, #7
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fad5 	bl	8005f74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fcfb 	bl	80053d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	ffff0000 	.word	0xffff0000

080059ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fc:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a55      	ldr	r2, [pc, #340]	; (8005b60 <I2C_ITError+0x174>)
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	2b28      	cmp	r3, #40	; 0x28
 8005a22:	d005      	beq.n	8005a30 <I2C_ITError+0x44>
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b29      	cmp	r3, #41	; 0x29
 8005a28:	d002      	beq.n	8005a30 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2e:	d10e      	bne.n	8005a4e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a30:	2103      	movs	r1, #3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa9e 	bl	8005f74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2228      	movs	r2, #40	; 0x28
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a46      	ldr	r2, [pc, #280]	; (8005b64 <I2C_ITError+0x178>)
 8005a4a:	635a      	str	r2, [r3, #52]	; 0x34
 8005a4c:	e013      	b.n	8005a76 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a4e:	2107      	movs	r1, #7
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa8f 	bl	8005f74 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b60      	cmp	r3, #96	; 0x60
 8005a60:	d003      	beq.n	8005a6a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a84:	d123      	bne.n	8005ace <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d05c      	beq.n	8005b58 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <I2C_ITError+0x17c>)
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fd12 	bl	80044dc <HAL_DMA_Abort_IT>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d04c      	beq.n	8005b58 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005acc:	e044      	b.n	8005b58 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005adc:	d123      	bne.n	8005b26 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aec:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d030      	beq.n	8005b58 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	4a1b      	ldr	r2, [pc, #108]	; (8005b68 <I2C_ITError+0x17c>)
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fce6 	bl	80044dc <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d020      	beq.n	8005b58 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
}
 8005b24:	e018      	b.n	8005b58 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b60      	cmp	r3, #96	; 0x60
 8005b30:	d10b      	bne.n	8005b4a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fc5b 	bl	80053fe <HAL_I2C_AbortCpltCallback>
}
 8005b48:	e006      	b.n	8005b58 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fc49 	bl	80053ea <HAL_I2C_ErrorCallback>
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	ffff0000 	.word	0xffff0000
 8005b64:	08005413 	.word	0x08005413
 8005b68:	08005bb5 	.word	0x08005bb5

08005b6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d103      	bne.n	8005b8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d007      	beq.n	8005ba8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	619a      	str	r2, [r3, #24]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	2200      	movs	r2, #0
 8005bd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b60      	cmp	r3, #96	; 0x60
 8005bdc:	d107      	bne.n	8005bee <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fc09 	bl	80053fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bec:	e002      	b.n	8005bf4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fbfb 	bl	80053ea <HAL_I2C_ErrorCallback>
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e022      	b.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d01e      	beq.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fd fcb1 	bl	800357c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d113      	bne.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e00f      	b.n	8005c74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d0cd      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c88:	e02c      	b.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f8dc 	bl	8005e4c <I2C_IsAcknowledgeFailed>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e02a      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d01e      	beq.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca6:	f7fd fc69 	bl	800357c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d113      	bne.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e007      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d1cb      	bne.n	8005c8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d08:	e028      	b.n	8005d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f89c 	bl	8005e4c <I2C_IsAcknowledgeFailed>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e026      	b.n	8005d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fd fc2d 	bl	800357c <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d113      	bne.n	8005d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e007      	b.n	8005d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d1cf      	bne.n	8005d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d80:	e055      	b.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f860 	bl	8005e4c <I2C_IsAcknowledgeFailed>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e053      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d129      	bne.n	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d105      	bne.n	8005dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e03f      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e022      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fd fbc0 	bl	800357c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e007      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d1a2      	bne.n	8005d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	fe00e800 	.word	0xfe00e800

08005e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d151      	bne.n	8005f0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e66:	e022      	b.n	8005eae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d01e      	beq.n	8005eae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e70:	f7fd fb84 	bl	800357c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <I2C_IsAcknowledgeFailed+0x3a>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d113      	bne.n	8005eae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e02e      	b.n	8005f0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d1d5      	bne.n	8005e68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fe4d 	bl	8005b6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6859      	ldr	r1, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ede:	400b      	ands	r3, r1
 8005ee0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	f043 0204 	orr.w	r2, r3, #4
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	fe00e800 	.word	0xfe00e800

08005f18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	4613      	mov	r3, r2
 8005f28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	0d5b      	lsrs	r3, r3, #21
 8005f34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <I2C_TransferConfig+0x58>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	ea02 0103 	and.w	r1, r2, r3
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f48:	7a7b      	ldrb	r3, [r7, #9]
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	03ff63ff 	.word	0x03ff63ff

08005f74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f84:	887b      	ldrh	r3, [r7, #2]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005f94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fa2:	2b28      	cmp	r3, #40	; 0x28
 8005fa4:	d003      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005fac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fae:	887b      	ldrh	r3, [r7, #2]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005fbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fcc:	2b28      	cmp	r3, #40	; 0x28
 8005fce:	d003      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005fe8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	f003 0311 	and.w	r3, r3, #17
 8005ff0:	2b11      	cmp	r3, #17
 8005ff2:	d103      	bne.n	8005ffc <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005ffc:	887b      	ldrh	r3, [r7, #2]
 8005ffe:	f003 0312 	and.w	r3, r3, #18
 8006002:	2b12      	cmp	r3, #18
 8006004:	d103      	bne.n	800600e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f043 0320 	orr.w	r3, r3, #32
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	f003 0312 	and.w	r3, r3, #18
 8006014:	2b12      	cmp	r3, #18
 8006016:	d103      	bne.n	8006020 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	43da      	mvns	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	400a      	ands	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d138      	bne.n	80060c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800605e:	2302      	movs	r3, #2
 8006060:	e032      	b.n	80060c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2224      	movs	r2, #36	; 0x24
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006090:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6819      	ldr	r1, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d139      	bne.n	800615e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e033      	b.n	8006160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2224      	movs	r2, #36	; 0x24
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006126:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616e:	b08f      	sub	sp, #60	; 0x3c
 8006170:	af0a      	add	r7, sp, #40	; 0x28
 8006172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e116      	b.n	80063ac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fd f8e3 	bl	8003364 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2203      	movs	r2, #3
 80061a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 f89f 	bl	800a300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	687e      	ldr	r6, [r7, #4]
 80061ca:	466d      	mov	r5, sp
 80061cc:	f106 0410 	add.w	r4, r6, #16
 80061d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80061e0:	1d33      	adds	r3, r6, #4
 80061e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e4:	6838      	ldr	r0, [r7, #0]
 80061e6:	f004 f833 	bl	800a250 <USB_CoreInit>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0d7      	b.n	80063ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f004 f88d 	bl	800a322 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
 800620c:	e04a      	b.n	80062a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800620e:	7bfa      	ldrb	r2, [r7, #15]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	333d      	adds	r3, #61	; 0x3d
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	333c      	adds	r3, #60	; 0x3c
 8006232:	7bfa      	ldrb	r2, [r7, #15]
 8006234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006236:	7bfa      	ldrb	r2, [r7, #15]
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	b298      	uxth	r0, r3
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	3342      	adds	r3, #66	; 0x42
 800624a:	4602      	mov	r2, r0
 800624c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	333f      	adds	r3, #63	; 0x3f
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006262:	7bfa      	ldrb	r2, [r7, #15]
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	3344      	adds	r3, #68	; 0x44
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3348      	adds	r3, #72	; 0x48
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3350      	adds	r3, #80	; 0x50
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	3301      	adds	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d3af      	bcc.n	800620e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
 80062b2:	e044      	b.n	800633e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062b4:	7bfa      	ldrb	r2, [r7, #15]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062e0:	7bfa      	ldrb	r2, [r7, #15]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	3301      	adds	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	7bfa      	ldrb	r2, [r7, #15]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d3b5      	bcc.n	80062b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	687e      	ldr	r6, [r7, #4]
 8006350:	466d      	mov	r5, sp
 8006352:	f106 0410 	add.w	r4, r6, #16
 8006356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800635a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800635c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800635e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006362:	e885 0003 	stmia.w	r5, {r0, r1}
 8006366:	1d33      	adds	r3, r6, #4
 8006368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636a:	6838      	ldr	r0, [r7, #0]
 800636c:	f004 f804 	bl	800a378 <USB_DevInit>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e014      	b.n	80063ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f80a 	bl	80063b4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f004 f9b6 	bl	800a716 <USB_DevDisconnect>

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	10000003 	.word	0x10000003

080063fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a04      	ldr	r2, [pc, #16]	; (8006418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640a:	6013      	str	r3, [r2, #0]
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40007000 	.word	0x40007000

0800641c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e291      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8087 	beq.w	800654e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006440:	4b96      	ldr	r3, [pc, #600]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b04      	cmp	r3, #4
 800644a:	d00c      	beq.n	8006466 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644c:	4b93      	ldr	r3, [pc, #588]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b08      	cmp	r3, #8
 8006456:	d112      	bne.n	800647e <HAL_RCC_OscConfig+0x62>
 8006458:	4b90      	ldr	r3, [pc, #576]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006464:	d10b      	bne.n	800647e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006466:	4b8d      	ldr	r3, [pc, #564]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d06c      	beq.n	800654c <HAL_RCC_OscConfig+0x130>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d168      	bne.n	800654c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e26b      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x7a>
 8006488:	4b84      	ldr	r3, [pc, #528]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a83      	ldr	r2, [pc, #524]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800648e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e02e      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x9c>
 800649e:	4b7f      	ldr	r3, [pc, #508]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7e      	ldr	r2, [pc, #504]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b7c      	ldr	r3, [pc, #496]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7b      	ldr	r2, [pc, #492]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e01d      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0xc0>
 80064c2:	4b76      	ldr	r3, [pc, #472]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b73      	ldr	r3, [pc, #460]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a72      	ldr	r2, [pc, #456]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a6e      	ldr	r2, [pc, #440]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b6c      	ldr	r3, [pc, #432]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a6b      	ldr	r2, [pc, #428]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fd f83e 	bl	800357c <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd f83a 	bl	800357c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e21f      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	4b61      	ldr	r3, [pc, #388]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0xe8>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fd f82a 	bl	800357c <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652c:	f7fd f826 	bl	800357c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	; 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e20b      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653e:	4b57      	ldr	r3, [pc, #348]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x110>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d069      	beq.n	800662e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800655a:	4b50      	ldr	r3, [pc, #320]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b4d      	ldr	r3, [pc, #308]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b08      	cmp	r3, #8
 8006570:	d11c      	bne.n	80065ac <HAL_RCC_OscConfig+0x190>
 8006572:	4b4a      	ldr	r3, [pc, #296]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x17a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1df      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	493d      	ldr	r1, [pc, #244]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065aa:	e040      	b.n	800662e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	4b39      	ldr	r3, [pc, #228]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a38      	ldr	r2, [pc, #224]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fc ffdc 	bl	800357c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fc ffd8 	bl	800357c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e1bd      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e6:	4b2d      	ldr	r3, [pc, #180]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4929      	ldr	r1, [pc, #164]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]
 80065fa:	e018      	b.n	800662e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a26      	ldr	r2, [pc, #152]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fc ffb8 	bl	800357c <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006610:	f7fc ffb4 	bl	800357c <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e199      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006622:	4b1e      	ldr	r3, [pc, #120]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d038      	beq.n	80066ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d019      	beq.n	8006676 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664e:	f7fc ff95 	bl	800357c <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006656:	f7fc ff91 	bl	800357c <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e176      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800666a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x23a>
 8006674:	e01a      	b.n	80066ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667a:	4a08      	ldr	r2, [pc, #32]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fc ff7b 	bl	800357c <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006688:	e00a      	b.n	80066a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668a:	f7fc ff77 	bl	800357c <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d903      	bls.n	80066a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e15c      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
 800669c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a0:	4b91      	ldr	r3, [pc, #580]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ee      	bne.n	800668a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80a4 	beq.w	8006802 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ba:	4b8b      	ldr	r3, [pc, #556]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c6:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4a87      	ldr	r2, [pc, #540]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	; 0x40
 80066d2:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d118      	bne.n	8006720 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066ee:	4b7f      	ldr	r3, [pc, #508]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a7e      	ldr	r2, [pc, #504]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066fa:	f7fc ff3f 	bl	800357c <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006702:	f7fc ff3b 	bl	800357c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b64      	cmp	r3, #100	; 0x64
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e120      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006714:	4b75      	ldr	r3, [pc, #468]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d106      	bne.n	8006736 <HAL_RCC_OscConfig+0x31a>
 8006728:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	; 0x70
 8006734:	e02d      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0x33c>
 800673e:	4b6a      	ldr	r3, [pc, #424]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	4a69      	ldr	r2, [pc, #420]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	6713      	str	r3, [r2, #112]	; 0x70
 800674a:	4b67      	ldr	r3, [pc, #412]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a66      	ldr	r2, [pc, #408]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	e01c      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b05      	cmp	r3, #5
 800675e:	d10c      	bne.n	800677a <HAL_RCC_OscConfig+0x35e>
 8006760:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006764:	4a60      	ldr	r2, [pc, #384]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006766:	f043 0304 	orr.w	r3, r3, #4
 800676a:	6713      	str	r3, [r2, #112]	; 0x70
 800676c:	4b5e      	ldr	r3, [pc, #376]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a5d      	ldr	r2, [pc, #372]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	e00b      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 800677a:	4b5b      	ldr	r3, [pc, #364]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	4a5a      	ldr	r2, [pc, #360]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	6713      	str	r3, [r2, #112]	; 0x70
 8006786:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a57      	ldr	r2, [pc, #348]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d015      	beq.n	80067c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679a:	f7fc feef 	bl	800357c <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a0:	e00a      	b.n	80067b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fc feeb 	bl	800357c <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e0ce      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b8:	4b4b      	ldr	r3, [pc, #300]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ee      	beq.n	80067a2 <HAL_RCC_OscConfig+0x386>
 80067c4:	e014      	b.n	80067f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c6:	f7fc fed9 	bl	800357c <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067cc:	e00a      	b.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ce:	f7fc fed5 	bl	800357c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e0b8      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e4:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ee      	bne.n	80067ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f6:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a3b      	ldr	r2, [pc, #236]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80a4 	beq.w	8006954 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800680c:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b08      	cmp	r3, #8
 8006816:	d06b      	beq.n	80068f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d149      	bne.n	80068b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006820:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fc fea6 	bl	800357c <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006834:	f7fc fea2 	bl	800357c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e087      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006846:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	3b01      	subs	r3, #1
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	4313      	orrs	r3, r2
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800687a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800687e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006880:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fc fe76 	bl	800357c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006894:	f7fc fe72 	bl	800357c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e057      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x478>
 80068b2:	e04f      	b.n	8006954 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc fe5c 	bl	800357c <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fc fe58 	bl	800357c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e03d      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4ac>
 80068e6:	e035      	b.n	8006954 <HAL_RCC_OscConfig+0x538>
 80068e8:	40023800 	.word	0x40023800
 80068ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <HAL_RCC_OscConfig+0x544>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d028      	beq.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d121      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d11a      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006920:	4013      	ands	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006926:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006928:	4293      	cmp	r3, r2
 800692a:	d111      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	3b01      	subs	r3, #1
 800693a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d107      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800

08006964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0d0      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800697c:	4b6a      	ldr	r3, [pc, #424]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d910      	bls.n	80069ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 020f 	bic.w	r2, r3, #15
 8006992:	4965      	ldr	r1, [pc, #404]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b8      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d020      	beq.n	80069fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a58      	ldr	r2, [pc, #352]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a52      	ldr	r2, [pc, #328]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	494d      	ldr	r1, [pc, #308]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d040      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d115      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a26:	4b41      	ldr	r3, [pc, #260]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e073      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a36:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e06b      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0203 	bic.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4936      	ldr	r1, [pc, #216]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a58:	f7fc fd90 	bl	800357c <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7fc fd8c 	bl	800357c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e053      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 020c 	and.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1eb      	bne.n	8006a60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d210      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4922      	ldr	r1, [pc, #136]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e032      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4916      	ldr	r1, [pc, #88]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006af6:	f000 f821 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006afa:	4601      	mov	r1, r0
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_RCC_ClockConfig+0x1cc>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_RCC_ClockConfig+0x1d0>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCC_ClockConfig+0x1d4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fc fcec 	bl	80034f4 <HAL_InitTick>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40023c00 	.word	0x40023c00
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	0800ca4c 	.word	0x0800ca4c
 8006b34:	20000014 	.word	0x20000014
 8006b38:	20000018 	.word	0x20000018

08006b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b52:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d007      	beq.n	8006b6e <HAL_RCC_GetSysClockFreq+0x32>
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d008      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x38>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 80b4 	bne.w	8006cd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b68:	4b5e      	ldr	r3, [pc, #376]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b6a:	60bb      	str	r3, [r7, #8]
      break;
 8006b6c:	e0b3      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b6e:	4b5e      	ldr	r3, [pc, #376]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006b70:	60bb      	str	r3, [r7, #8]
      break;
 8006b72:	e0b0      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b74:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b7e:	4b58      	ldr	r3, [pc, #352]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d04a      	beq.n	8006c20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b8a:	4b55      	ldr	r3, [pc, #340]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	099b      	lsrs	r3, r3, #6
 8006b90:	f04f 0400 	mov.w	r4, #0
 8006b94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	ea03 0501 	and.w	r5, r3, r1
 8006ba0:	ea04 0602 	and.w	r6, r4, r2
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	f04f 0400 	mov.w	r4, #0
 8006bb0:	0154      	lsls	r4, r2, #5
 8006bb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bb6:	014b      	lsls	r3, r1, #5
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4622      	mov	r2, r4
 8006bbc:	1b49      	subs	r1, r1, r5
 8006bbe:	eb62 0206 	sbc.w	r2, r2, r6
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	f04f 0400 	mov.w	r4, #0
 8006bca:	0194      	lsls	r4, r2, #6
 8006bcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bd0:	018b      	lsls	r3, r1, #6
 8006bd2:	1a5b      	subs	r3, r3, r1
 8006bd4:	eb64 0402 	sbc.w	r4, r4, r2
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	00e2      	lsls	r2, r4, #3
 8006be2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006be6:	00d9      	lsls	r1, r3, #3
 8006be8:	460b      	mov	r3, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	195b      	adds	r3, r3, r5
 8006bee:	eb44 0406 	adc.w	r4, r4, r6
 8006bf2:	f04f 0100 	mov.w	r1, #0
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	0262      	lsls	r2, r4, #9
 8006bfc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006c00:	0259      	lsls	r1, r3, #9
 8006c02:	460b      	mov	r3, r1
 8006c04:	4614      	mov	r4, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	4621      	mov	r1, r4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f04f 0400 	mov.w	r4, #0
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	f7fa f858 	bl	8000cc8 <__aeabi_uldivmod>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e049      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c20:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	099b      	lsrs	r3, r3, #6
 8006c26:	f04f 0400 	mov.w	r4, #0
 8006c2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	ea03 0501 	and.w	r5, r3, r1
 8006c36:	ea04 0602 	and.w	r6, r4, r2
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 0400 	mov.w	r4, #0
 8006c46:	0154      	lsls	r4, r2, #5
 8006c48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c4c:	014b      	lsls	r3, r1, #5
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4622      	mov	r2, r4
 8006c52:	1b49      	subs	r1, r1, r5
 8006c54:	eb62 0206 	sbc.w	r2, r2, r6
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	f04f 0400 	mov.w	r4, #0
 8006c60:	0194      	lsls	r4, r2, #6
 8006c62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c66:	018b      	lsls	r3, r1, #6
 8006c68:	1a5b      	subs	r3, r3, r1
 8006c6a:	eb64 0402 	sbc.w	r4, r4, r2
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	00e2      	lsls	r2, r4, #3
 8006c78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c7c:	00d9      	lsls	r1, r3, #3
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	195b      	adds	r3, r3, r5
 8006c84:	eb44 0406 	adc.w	r4, r4, r6
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	02a2      	lsls	r2, r4, #10
 8006c92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c96:	0299      	lsls	r1, r3, #10
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f04f 0400 	mov.w	r4, #0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4623      	mov	r3, r4
 8006caa:	f7fa f80d 	bl	8000cc8 <__aeabi_uldivmod>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	60bb      	str	r3, [r7, #8]
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006cd2:	60bb      	str	r3, [r7, #8]
      break;
 8006cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	00f42400 	.word	0x00f42400
 8006ce8:	007a1200 	.word	0x007a1200

08006cec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf0:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000014 	.word	0x20000014

08006d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d08:	f7ff fff0 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0a9b      	lsrs	r3, r3, #10
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	4a03      	ldr	r2, [pc, #12]	; (8006d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d1a:	5cd3      	ldrb	r3, [r2, r3]
 8006d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40023800 	.word	0x40023800
 8006d28:	0800ca5c 	.word	0x0800ca5c

08006d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d30:	f7ff ffdc 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d34:	4601      	mov	r1, r0
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	0b5b      	lsrs	r3, r3, #13
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	4a03      	ldr	r2, [pc, #12]	; (8006d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	0800ca5c 	.word	0x0800ca5c

08006d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d012      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d7c:	4b69      	ldr	r3, [pc, #420]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4a68      	ldr	r2, [pc, #416]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d86:	6093      	str	r3, [r2, #8]
 8006d88:	4b66      	ldr	r3, [pc, #408]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	4964      	ldr	r1, [pc, #400]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d017      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dae:	4b5d      	ldr	r3, [pc, #372]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbc:	4959      	ldr	r1, [pc, #356]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dea:	4b4e      	ldr	r3, [pc, #312]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	494a      	ldr	r1, [pc, #296]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e26:	2301      	movs	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 808b 	beq.w	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e38:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	4a39      	ldr	r2, [pc, #228]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e42:	6413      	str	r3, [r2, #64]	; 0x40
 8006e44:	4b37      	ldr	r3, [pc, #220]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a34      	ldr	r2, [pc, #208]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fc fb8e 	bl	800357c <HAL_GetTick>
 8006e60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e64:	f7fc fb8a 	bl	800357c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	; 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e355      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e76:	4b2c      	ldr	r3, [pc, #176]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e82:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d035      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d02e      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ea0:	4b20      	ldr	r3, [pc, #128]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eaa:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eb6:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	4a1a      	ldr	r2, [pc, #104]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ec2:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ec8:	4b16      	ldr	r3, [pc, #88]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d114      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fc fb52 	bl	800357c <HAL_GetTick>
 8006ed8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006edc:	f7fc fb4e 	bl	800357c <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e317      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ee      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f1a:	400b      	ands	r3, r1
 8006f1c:	4901      	ldr	r1, [pc, #4]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
 8006f22:	e00b      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f24:	40023800 	.word	0x40023800
 8006f28:	40007000 	.word	0x40007000
 8006f2c:	0ffffcff 	.word	0x0ffffcff
 8006f30:	4bb0      	ldr	r3, [pc, #704]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4aaf      	ldr	r2, [pc, #700]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f3a:	6093      	str	r3, [r2, #8]
 8006f3c:	4bad      	ldr	r3, [pc, #692]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f48:	49aa      	ldr	r1, [pc, #680]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d010      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f5a:	4ba6      	ldr	r3, [pc, #664]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f60:	4aa4      	ldr	r2, [pc, #656]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f6a:	4ba2      	ldr	r3, [pc, #648]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	499f      	ldr	r1, [pc, #636]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f88:	4b9a      	ldr	r3, [pc, #616]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f96:	4997      	ldr	r1, [pc, #604]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006faa:	4b92      	ldr	r3, [pc, #584]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb8:	498e      	ldr	r1, [pc, #568]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fcc:	4b89      	ldr	r3, [pc, #548]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fda:	4986      	ldr	r1, [pc, #536]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fee:	4b81      	ldr	r3, [pc, #516]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	497d      	ldr	r1, [pc, #500]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007010:	4b78      	ldr	r3, [pc, #480]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007016:	f023 0203 	bic.w	r2, r3, #3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	4975      	ldr	r1, [pc, #468]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007032:	4b70      	ldr	r3, [pc, #448]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007038:	f023 020c 	bic.w	r2, r3, #12
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007040:	496c      	ldr	r1, [pc, #432]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007054:	4b67      	ldr	r3, [pc, #412]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007062:	4964      	ldr	r1, [pc, #400]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007076:	4b5f      	ldr	r3, [pc, #380]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	495b      	ldr	r1, [pc, #364]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007098:	4b56      	ldr	r3, [pc, #344]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	4953      	ldr	r1, [pc, #332]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070ba:	4b4e      	ldr	r3, [pc, #312]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c8:	494a      	ldr	r1, [pc, #296]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070dc:	4b45      	ldr	r3, [pc, #276]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	4942      	ldr	r1, [pc, #264]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80070fe:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710c:	4939      	ldr	r1, [pc, #228]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007120:	4b34      	ldr	r3, [pc, #208]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007126:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800712e:	4931      	ldr	r1, [pc, #196]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007142:	4b2c      	ldr	r3, [pc, #176]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007150:	4928      	ldr	r1, [pc, #160]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007160:	d101      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007182:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007190:	4918      	ldr	r1, [pc, #96]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b4:	490f      	ldr	r1, [pc, #60]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d005      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ca:	f040 80d8 	bne.w	800737e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071da:	f7fc f9cf 	bl	800357c <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071e2:	f7fc f9cb 	bl	800357c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b64      	cmp	r3, #100	; 0x64
 80071ee:	d903      	bls.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e196      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80071f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071f8:	4b6c      	ldr	r3, [pc, #432]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1ee      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d021      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11d      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007218:	4b64      	ldr	r3, [pc, #400]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721e:	0c1b      	lsrs	r3, r3, #16
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007226:	4b61      	ldr	r3, [pc, #388]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	019a      	lsls	r2, r3, #6
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	431a      	orrs	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	061b      	lsls	r3, r3, #24
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	071b      	lsls	r3, r3, #28
 800724c:	4957      	ldr	r1, [pc, #348]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007268:	d00a      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007272:	2b00      	cmp	r3, #0
 8007274:	d02e      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727e:	d129      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007280:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800728e:	4b47      	ldr	r3, [pc, #284]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007294:	0f1b      	lsrs	r3, r3, #28
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	019a      	lsls	r2, r3, #6
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	061b      	lsls	r3, r3, #24
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	071b      	lsls	r3, r3, #28
 80072b4:	493d      	ldr	r1, [pc, #244]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c2:	f023 021f 	bic.w	r2, r3, #31
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4937      	ldr	r1, [pc, #220]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01d      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072e0:	4b32      	ldr	r3, [pc, #200]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072ee:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f4:	0f1b      	lsrs	r3, r3, #28
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	019a      	lsls	r2, r3, #6
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	431a      	orrs	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	431a      	orrs	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	071b      	lsls	r3, r3, #28
 8007314:	4925      	ldr	r1, [pc, #148]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d011      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	019a      	lsls	r2, r3, #6
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	061b      	lsls	r3, r3, #24
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	071b      	lsls	r3, r3, #28
 8007344:	4919      	ldr	r1, [pc, #100]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800734c:	4b17      	ldr	r3, [pc, #92]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007358:	f7fc f910 	bl	800357c <HAL_GetTick>
 800735c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007360:	f7fc f90c 	bl	800357c <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	; 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e0d7      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007372:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b01      	cmp	r3, #1
 8007382:	f040 80cd 	bne.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007386:	4b09      	ldr	r3, [pc, #36]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a08      	ldr	r2, [pc, #32]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800738c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007392:	f7fc f8f3 	bl	800357c <HAL_GetTick>
 8007396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007398:	e00a      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800739a:	f7fc f8ef 	bl	800357c <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b64      	cmp	r3, #100	; 0x64
 80073a6:	d903      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e0ba      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80073ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073b0:	4b5e      	ldr	r3, [pc, #376]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d0ed      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d02e      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d12a      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073e6:	4b51      	ldr	r3, [pc, #324]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073f4:	4b4d      	ldr	r3, [pc, #308]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fa:	0f1b      	lsrs	r3, r3, #28
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	019a      	lsls	r2, r3, #6
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	431a      	orrs	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	071b      	lsls	r3, r3, #28
 800741a:	4944      	ldr	r1, [pc, #272]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	493d      	ldr	r1, [pc, #244]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d022      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007450:	d11d      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007458:	0e1b      	lsrs	r3, r3, #24
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007460:	4b32      	ldr	r3, [pc, #200]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007466:	0f1b      	lsrs	r3, r3, #28
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	019a      	lsls	r2, r3, #6
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	041b      	lsls	r3, r3, #16
 800747a:	431a      	orrs	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	061b      	lsls	r3, r3, #24
 8007480:	431a      	orrs	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	071b      	lsls	r3, r3, #28
 8007486:	4929      	ldr	r1, [pc, #164]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d028      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800749a:	4b24      	ldr	r3, [pc, #144]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	0e1b      	lsrs	r3, r3, #24
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074a8:	4b20      	ldr	r3, [pc, #128]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	019a      	lsls	r2, r3, #6
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	071b      	lsls	r3, r3, #28
 80074ce:	4917      	ldr	r1, [pc, #92]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074d6:	4b15      	ldr	r3, [pc, #84]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4911      	ldr	r1, [pc, #68]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0e      	ldr	r2, [pc, #56]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f8:	f7fc f840 	bl	800357c <HAL_GetTick>
 80074fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074fe:	e008      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007500:	f7fc f83c 	bl	800357c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b64      	cmp	r3, #100	; 0x64
 800750c:	d901      	bls.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e007      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800751a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800751e:	d1ef      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800

08007530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e084      	b.n	800764c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fb fb9b 	bl	8002c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007582:	d902      	bls.n	800758a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e002      	b.n	8007590 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800758a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800758e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007598:	d007      	beq.n	80075aa <HAL_SPI_Init+0x7a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075ba:	d903      	bls.n	80075c4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
 80075c2:	e002      	b.n	80075ca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	ea42 0103 	orr.w	r1, r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0204 	and.w	r2, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	ea42 0103 	orr.w	r1, r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69da      	ldr	r2, [r3, #28]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800763a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	4613      	mov	r3, r2
 8007662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <HAL_SPI_Transmit+0x22>
 8007672:	2302      	movs	r3, #2
 8007674:	e150      	b.n	8007918 <HAL_SPI_Transmit+0x2c4>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800767e:	f7fb ff7d 	bl	800357c <HAL_GetTick>
 8007682:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d002      	beq.n	800769a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007694:	2302      	movs	r3, #2
 8007696:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007698:	e135      	b.n	8007906 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Transmit+0x52>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076aa:	e12c      	b.n	8007906 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2203      	movs	r2, #3
 80076b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f6:	d107      	bne.n	8007708 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007706:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d007      	beq.n	8007726 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800772e:	d94b      	bls.n	80077c8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_SPI_Transmit+0xea>
 8007738:	8afb      	ldrh	r3, [r7, #22]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d13e      	bne.n	80077bc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	881a      	ldrh	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	1c9a      	adds	r2, r3, #2
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007762:	e02b      	b.n	80077bc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b02      	cmp	r3, #2
 8007770:	d112      	bne.n	8007798 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	881a      	ldrh	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	1c9a      	adds	r2, r3, #2
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007796:	e011      	b.n	80077bc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007798:	f7fb fef0 	bl	800357c <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d803      	bhi.n	80077b0 <HAL_SPI_Transmit+0x15c>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d102      	bne.n	80077b6 <HAL_SPI_Transmit+0x162>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077ba:	e0a4      	b.n	8007906 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1ce      	bne.n	8007764 <HAL_SPI_Transmit+0x110>
 80077c6:	e07c      	b.n	80078c2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_SPI_Transmit+0x182>
 80077d0:	8afb      	ldrh	r3, [r7, #22]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d170      	bne.n	80078b8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d912      	bls.n	8007806 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	881a      	ldrh	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	1c9a      	adds	r2, r3, #2
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b02      	subs	r3, #2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007804:	e058      	b.n	80078b8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	7812      	ldrb	r2, [r2, #0]
 8007812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800782c:	e044      	b.n	80078b8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d12b      	bne.n	8007894 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d912      	bls.n	800786c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	881a      	ldrh	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b02      	subs	r3, #2
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800786a:	e025      	b.n	80078b8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007892:	e011      	b.n	80078b8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007894:	f7fb fe72 	bl	800357c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d803      	bhi.n	80078ac <HAL_SPI_Transmit+0x258>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	d102      	bne.n	80078b2 <HAL_SPI_Transmit+0x25e>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b6:	e026      	b.n	8007906 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1b5      	bne.n	800782e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fc34 	bl	8008134 <SPI_EndRxTxTransaction>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078e0:	2300      	movs	r3, #0
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	77fb      	strb	r3, [r7, #31]
 8007902:	e000      	b.n	8007906 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007916:	7ffb      	ldrb	r3, [r7, #31]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800792e:	2301      	movs	r3, #1
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x26>
 8007942:	2302      	movs	r3, #2
 8007944:	e1fb      	b.n	8007d3e <HAL_SPI_TransmitReceive+0x41e>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794e:	f7fb fe15 	bl	800357c <HAL_GetTick>
 8007952:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800795a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007962:	887b      	ldrh	r3, [r7, #2]
 8007964:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007966:	887b      	ldrh	r3, [r7, #2]
 8007968:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800796a:	7efb      	ldrb	r3, [r7, #27]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d00e      	beq.n	800798e <HAL_SPI_TransmitReceive+0x6e>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007976:	d106      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x66>
 8007980:	7efb      	ldrb	r3, [r7, #27]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d003      	beq.n	800798e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007986:	2302      	movs	r3, #2
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800798c:	e1cd      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x80>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x80>
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80079a6:	e1c0      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d003      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2205      	movs	r2, #5
 80079b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	887a      	ldrh	r2, [r7, #2]
 80079d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	887a      	ldrh	r2, [r7, #2]
 80079e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079fe:	d802      	bhi.n	8007a06 <HAL_SPI_TransmitReceive+0xe6>
 8007a00:	8a3b      	ldrh	r3, [r7, #16]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d908      	bls.n	8007a18 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	e007      	b.n	8007a28 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d007      	beq.n	8007a46 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a4e:	d97c      	bls.n	8007b4a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x13e>
 8007a58:	8a7b      	ldrh	r3, [r7, #18]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d169      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	881a      	ldrh	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	1c9a      	adds	r2, r3, #2
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a82:	e056      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d11b      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x1aa>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d016      	beq.n	8007aca <HAL_SPI_TransmitReceive+0x1aa>
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d113      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa6:	881a      	ldrh	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d11c      	bne.n	8007b12 <HAL_SPI_TransmitReceive+0x1f2>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d016      	beq.n	8007b12 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	b292      	uxth	r2, r2
 8007af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	1c9a      	adds	r2, r3, #2
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b12:	f7fb fd33 	bl	800357c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d807      	bhi.n	8007b32 <HAL_SPI_TransmitReceive+0x212>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d003      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007b30:	e0fb      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1a3      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x164>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d19d      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x164>
 8007b48:	e0df      	b.n	8007d0a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_SPI_TransmitReceive+0x23a>
 8007b52:	8a7b      	ldrh	r3, [r7, #18]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 80cb 	bne.w	8007cf0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d912      	bls.n	8007b8a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	881a      	ldrh	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	1c9a      	adds	r2, r3, #2
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b02      	subs	r3, #2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b88:	e0b2      	b.n	8007cf0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb0:	e09e      	b.n	8007cf0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d134      	bne.n	8007c2a <HAL_SPI_TransmitReceive+0x30a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02f      	beq.n	8007c2a <HAL_SPI_TransmitReceive+0x30a>
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d12c      	bne.n	8007c2a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d912      	bls.n	8007c00 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	881a      	ldrh	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	1c9a      	adds	r2, r3, #2
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b02      	subs	r3, #2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bfe:	e012      	b.n	8007c26 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d148      	bne.n	8007cca <HAL_SPI_TransmitReceive+0x3aa>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d042      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d923      	bls.n	8007c98 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b02      	subs	r3, #2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d81f      	bhi.n	8007cc6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	e016      	b.n	8007cc6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f103 020c 	add.w	r2, r3, #12
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cca:	f7fb fc57 	bl	800357c <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d803      	bhi.n	8007ce2 <HAL_SPI_TransmitReceive+0x3c2>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d102      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x3c8>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007cee:	e01c      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f47f af5b 	bne.w	8007bb2 <HAL_SPI_TransmitReceive+0x292>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f af54 	bne.w	8007bb2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fa10 	bl	8008134 <SPI_EndRxTxTransaction>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60
 8007d26:	e000      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007d28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	099b      	lsrs	r3, r3, #6
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10f      	bne.n	8007d8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	099b      	lsrs	r3, r3, #6
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
    return;
 8007d8a:	e0d8      	b.n	8007f3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <HAL_SPI_IRQHandler+0x66>
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	09db      	lsrs	r3, r3, #7
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
    return;
 8007dac:	e0c7      	b.n	8007f3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10c      	bne.n	8007dd4 <HAL_SPI_IRQHandler+0x8c>
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	099b      	lsrs	r3, r3, #6
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <HAL_SPI_IRQHandler+0x8c>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80b5 	beq.w	8007f3e <HAL_SPI_IRQHandler+0x1f6>
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80ae 	beq.w	8007f3e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d023      	beq.n	8007e36 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d011      	beq.n	8007e1e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	f043 0204 	orr.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	e00b      	b.n	8007e36 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	693b      	ldr	r3, [r7, #16]
        return;
 8007e34:	e083      	b.n	8007f3e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d014      	beq.n	8007e6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e46:	f043 0201 	orr.w	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00c      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7c:	f043 0208 	orr.w	r2, r3, #8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e84:	2300      	movs	r3, #0
 8007e86:	60bb      	str	r3, [r7, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	60bb      	str	r3, [r7, #8]
 8007e90:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d050      	beq.n	8007f3c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ea8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <HAL_SPI_IRQHandler+0x17e>
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d034      	beq.n	8007f30 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0203 	bic.w	r2, r2, #3
 8007ed4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	4a18      	ldr	r2, [pc, #96]	; (8007f44 <HAL_SPI_IRQHandler+0x1fc>)
 8007ee4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc faf6 	bl	80044dc <HAL_DMA_Abort_IT>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d016      	beq.n	8007f38 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	4a0d      	ldr	r2, [pc, #52]	; (8007f44 <HAL_SPI_IRQHandler+0x1fc>)
 8007f10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fc fae0 	bl	80044dc <HAL_DMA_Abort_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007f2e:	e003      	b.n	8007f38 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f809 	bl	8007f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f36:	e000      	b.n	8007f3a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007f38:	bf00      	nop
    return;
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
  }
}
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	08007f5d 	.word	0x08007f5d

08007f48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff ffe5 	bl	8007f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f96:	e04c      	b.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9e:	d048      	beq.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007fa0:	f7fb faec 	bl	800357c <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d902      	bls.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d13d      	bne.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fce:	d111      	bne.n	8007ff4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd8:	d004      	beq.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fe2:	d107      	bne.n	8007ff4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffc:	d10f      	bne.n	800801e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800801c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e00f      	b.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	429a      	cmp	r2, r3
 800804e:	d1a3      	bne.n	8007f98 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008068:	e057      	b.n	800811a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008070:	d106      	bne.n	8008080 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d048      	beq.n	800811a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008088:	f7fb fa78 	bl	800357c <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d902      	bls.n	800809e <SPI_WaitFifoStateUntilTimeout+0x44>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d13d      	bne.n	800811a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d111      	bne.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x82>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c0:	d004      	beq.n	80080cc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ca:	d107      	bne.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e4:	d10f      	bne.n	8008106 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e008      	b.n	800812c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	429a      	cmp	r2, r3
 8008128:	d19f      	bne.n	800806a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff ff84 	bl	800805a <SPI_WaitFifoStateUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e027      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff ff07 	bl	8007f86 <SPI_WaitFlagStateUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e014      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff ff5d 	bl	800805a <SPI_WaitFifoStateUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e000      	b.n	80081b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e01d      	b.n	800820e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fa ff82 	bl	80030f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4610      	mov	r0, r2
 8008200:	f000 fbc8 	bl	8008994 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <HAL_TIM_Base_Start_IT+0x50>)
 8008238:	4013      	ands	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b06      	cmp	r3, #6
 8008240:	d00b      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x42>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008248:	d007      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	00010007 	.word	0x00010007

0800826c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e01d      	b.n	80082ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f815 	bl	80082c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f000 fb72 	bl	8008994 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2201      	movs	r2, #1
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 feea 	bl	80090c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a17      	ldr	r2, [pc, #92]	; (8008354 <HAL_TIM_PWM_Start+0x7c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_PWM_Start+0x2c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a16      	ldr	r2, [pc, #88]	; (8008358 <HAL_TIM_PWM_Start+0x80>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d101      	bne.n	8008308 <HAL_TIM_PWM_Start+0x30>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <HAL_TIM_PWM_Start+0x32>
 8008308:	2300      	movs	r3, #0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800831c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <HAL_TIM_PWM_Start+0x84>)
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b06      	cmp	r3, #6
 800832e:	d00b      	beq.n	8008348 <HAL_TIM_PWM_Start+0x70>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008336:	d007      	beq.n	8008348 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	40010400 	.word	0x40010400
 800835c:	00010007 	.word	0x00010007

08008360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b02      	cmp	r3, #2
 8008374:	d122      	bne.n	80083bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b02      	cmp	r3, #2
 8008382:	d11b      	bne.n	80083bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f06f 0202 	mvn.w	r2, #2
 800838c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fad8 	bl	8008958 <HAL_TIM_IC_CaptureCallback>
 80083a8:	e005      	b.n	80083b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 faca 	bl	8008944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fadb 	bl	800896c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d122      	bne.n	8008410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d11b      	bne.n	8008410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0204 	mvn.w	r2, #4
 80083e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2202      	movs	r2, #2
 80083e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 faae 	bl	8008958 <HAL_TIM_IC_CaptureCallback>
 80083fc:	e005      	b.n	800840a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 faa0 	bl	8008944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fab1 	bl	800896c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b08      	cmp	r3, #8
 800841c:	d122      	bne.n	8008464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b08      	cmp	r3, #8
 800842a:	d11b      	bne.n	8008464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0208 	mvn.w	r2, #8
 8008434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2204      	movs	r2, #4
 800843a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa84 	bl	8008958 <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fa76 	bl	8008944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa87 	bl	800896c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b10      	cmp	r3, #16
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b10      	cmp	r3, #16
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0210 	mvn.w	r2, #16
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2208      	movs	r2, #8
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa5a 	bl	8008958 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa4c 	bl	8008944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa5d 	bl	800896c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10e      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0201 	mvn.w	r2, #1
 80084dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fa fab2 	bl	8002a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d10e      	bne.n	8008510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fc:	2b80      	cmp	r3, #128	; 0x80
 80084fe:	d107      	bne.n	8008510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fe98 	bl	8009240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851e:	d10e      	bne.n	800853e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b80      	cmp	r3, #128	; 0x80
 800852c:	d107      	bne.n	800853e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fe8b 	bl	8009254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b40      	cmp	r3, #64	; 0x40
 800854a:	d10e      	bne.n	800856a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d107      	bne.n	800856a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fa0b 	bl	8008980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b20      	cmp	r3, #32
 8008576:	d10e      	bne.n	8008596 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b20      	cmp	r3, #32
 8008584:	d107      	bne.n	8008596 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f06f 0220 	mvn.w	r2, #32
 800858e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fe4b 	bl	800922c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80085b6:	2302      	movs	r3, #2
 80085b8:	e105      	b.n	80087c6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b14      	cmp	r3, #20
 80085ce:	f200 80f0 	bhi.w	80087b2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	080087b3 	.word	0x080087b3
 80085e0:	080087b3 	.word	0x080087b3
 80085e4:	080087b3 	.word	0x080087b3
 80085e8:	0800866d 	.word	0x0800866d
 80085ec:	080087b3 	.word	0x080087b3
 80085f0:	080087b3 	.word	0x080087b3
 80085f4:	080087b3 	.word	0x080087b3
 80085f8:	080086af 	.word	0x080086af
 80085fc:	080087b3 	.word	0x080087b3
 8008600:	080087b3 	.word	0x080087b3
 8008604:	080087b3 	.word	0x080087b3
 8008608:	080086ef 	.word	0x080086ef
 800860c:	080087b3 	.word	0x080087b3
 8008610:	080087b3 	.word	0x080087b3
 8008614:	080087b3 	.word	0x080087b3
 8008618:	08008731 	.word	0x08008731
 800861c:	080087b3 	.word	0x080087b3
 8008620:	080087b3 	.word	0x080087b3
 8008624:	080087b3 	.word	0x080087b3
 8008628:	08008771 	.word	0x08008771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fa4e 	bl	8008ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0208 	orr.w	r2, r2, #8
 8008646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0204 	bic.w	r2, r2, #4
 8008656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6999      	ldr	r1, [r3, #24]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	619a      	str	r2, [r3, #24]
      break;
 800866a:	e0a3      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 faa0 	bl	8008bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699a      	ldr	r2, [r3, #24]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6999      	ldr	r1, [r3, #24]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	021a      	lsls	r2, r3, #8
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	619a      	str	r2, [r3, #24]
      break;
 80086ac:	e082      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 faf7 	bl	8008ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0208 	orr.w	r2, r2, #8
 80086c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0204 	bic.w	r2, r2, #4
 80086d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69d9      	ldr	r1, [r3, #28]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	61da      	str	r2, [r3, #28]
      break;
 80086ec:	e062      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fb4d 	bl	8008d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	69d9      	ldr	r1, [r3, #28]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	021a      	lsls	r2, r3, #8
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	61da      	str	r2, [r3, #28]
      break;
 800872e:	e041      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fb84 	bl	8008e44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0208 	orr.w	r2, r2, #8
 800874a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0204 	bic.w	r2, r2, #4
 800875a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800876e:	e021      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fbb6 	bl	8008ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800878a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	021a      	lsls	r2, r3, #8
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80087b2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop

080087d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_TIM_ConfigClockSource+0x18>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e0a6      	b.n	8008936 <HAL_TIM_ConfigClockSource+0x166>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4b4f      	ldr	r3, [pc, #316]	; (8008940 <HAL_TIM_ConfigClockSource+0x170>)
 8008804:	4013      	ands	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800880e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d067      	beq.n	80088f0 <HAL_TIM_ConfigClockSource+0x120>
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d80b      	bhi.n	800883c <HAL_TIM_ConfigClockSource+0x6c>
 8008824:	2b10      	cmp	r3, #16
 8008826:	d073      	beq.n	8008910 <HAL_TIM_ConfigClockSource+0x140>
 8008828:	2b10      	cmp	r3, #16
 800882a:	d802      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x62>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06f      	beq.n	8008910 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008830:	e078      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008832:	2b20      	cmp	r3, #32
 8008834:	d06c      	beq.n	8008910 <HAL_TIM_ConfigClockSource+0x140>
 8008836:	2b30      	cmp	r3, #48	; 0x30
 8008838:	d06a      	beq.n	8008910 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800883a:	e073      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800883c:	2b70      	cmp	r3, #112	; 0x70
 800883e:	d00d      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x8c>
 8008840:	2b70      	cmp	r3, #112	; 0x70
 8008842:	d804      	bhi.n	800884e <HAL_TIM_ConfigClockSource+0x7e>
 8008844:	2b50      	cmp	r3, #80	; 0x50
 8008846:	d033      	beq.n	80088b0 <HAL_TIM_ConfigClockSource+0xe0>
 8008848:	2b60      	cmp	r3, #96	; 0x60
 800884a:	d041      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800884c:	e06a      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008852:	d066      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x152>
 8008854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008858:	d017      	beq.n	800888a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800885a:	e063      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6899      	ldr	r1, [r3, #8]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f000 fc0a 	bl	8009084 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800887e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	609a      	str	r2, [r3, #8]
      break;
 8008888:	e04c      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	6899      	ldr	r1, [r3, #8]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f000 fbf3 	bl	8009084 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088ac:	609a      	str	r2, [r3, #8]
      break;
 80088ae:	e039      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6859      	ldr	r1, [r3, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	461a      	mov	r2, r3
 80088be:	f000 fb67 	bl	8008f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2150      	movs	r1, #80	; 0x50
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fbc0 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 80088ce:	e029      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	6859      	ldr	r1, [r3, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	461a      	mov	r2, r3
 80088de:	f000 fb86 	bl	8008fee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2160      	movs	r1, #96	; 0x60
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fbb0 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 80088ee:	e019      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	6859      	ldr	r1, [r3, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	461a      	mov	r2, r3
 80088fe:	f000 fb47 	bl	8008f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2140      	movs	r1, #64	; 0x40
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fba0 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 800890e:	e009      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f000 fb97 	bl	800904e <TIM_ITRx_SetConfig>
      break;
 8008920:	e000      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	fffeff88 	.word	0xfffeff88

08008944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a40      	ldr	r2, [pc, #256]	; (8008aa8 <TIM_Base_SetConfig+0x114>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d013      	beq.n	80089d4 <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b2:	d00f      	beq.n	80089d4 <TIM_Base_SetConfig+0x40>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a3d      	ldr	r2, [pc, #244]	; (8008aac <TIM_Base_SetConfig+0x118>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_Base_SetConfig+0x40>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a3c      	ldr	r2, [pc, #240]	; (8008ab0 <TIM_Base_SetConfig+0x11c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_Base_SetConfig+0x40>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a3b      	ldr	r2, [pc, #236]	; (8008ab4 <TIM_Base_SetConfig+0x120>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x40>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a3a      	ldr	r2, [pc, #232]	; (8008ab8 <TIM_Base_SetConfig+0x124>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d108      	bne.n	80089e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a2f      	ldr	r2, [pc, #188]	; (8008aa8 <TIM_Base_SetConfig+0x114>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d02b      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d027      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <TIM_Base_SetConfig+0x118>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d023      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2b      	ldr	r2, [pc, #172]	; (8008ab0 <TIM_Base_SetConfig+0x11c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d01f      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <TIM_Base_SetConfig+0x120>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d01b      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <TIM_Base_SetConfig+0x124>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d017      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a28      	ldr	r2, [pc, #160]	; (8008abc <TIM_Base_SetConfig+0x128>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d013      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a27      	ldr	r2, [pc, #156]	; (8008ac0 <TIM_Base_SetConfig+0x12c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00f      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a26      	ldr	r2, [pc, #152]	; (8008ac4 <TIM_Base_SetConfig+0x130>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d00b      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a25      	ldr	r2, [pc, #148]	; (8008ac8 <TIM_Base_SetConfig+0x134>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d007      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a24      	ldr	r2, [pc, #144]	; (8008acc <TIM_Base_SetConfig+0x138>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d003      	beq.n	8008a46 <TIM_Base_SetConfig+0xb2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a23      	ldr	r2, [pc, #140]	; (8008ad0 <TIM_Base_SetConfig+0x13c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d108      	bne.n	8008a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a0a      	ldr	r2, [pc, #40]	; (8008aa8 <TIM_Base_SetConfig+0x114>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d003      	beq.n	8008a8c <TIM_Base_SetConfig+0xf8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a0c      	ldr	r2, [pc, #48]	; (8008ab8 <TIM_Base_SetConfig+0x124>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d103      	bne.n	8008a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	615a      	str	r2, [r3, #20]
}
 8008a9a:	bf00      	nop
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800
 8008ac8:	40001800 	.word	0x40001800
 8008acc:	40001c00 	.word	0x40001c00
 8008ad0:	40002000 	.word	0x40002000

08008ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	f023 0201 	bic.w	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4b2b      	ldr	r3, [pc, #172]	; (8008bac <TIM_OC1_SetConfig+0xd8>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f023 0302 	bic.w	r3, r3, #2
 8008b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a21      	ldr	r2, [pc, #132]	; (8008bb0 <TIM_OC1_SetConfig+0xdc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_OC1_SetConfig+0x64>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a20      	ldr	r2, [pc, #128]	; (8008bb4 <TIM_OC1_SetConfig+0xe0>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d10c      	bne.n	8008b52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0308 	bic.w	r3, r3, #8
 8008b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f023 0304 	bic.w	r3, r3, #4
 8008b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a16      	ldr	r2, [pc, #88]	; (8008bb0 <TIM_OC1_SetConfig+0xdc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d003      	beq.n	8008b62 <TIM_OC1_SetConfig+0x8e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <TIM_OC1_SetConfig+0xe0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d111      	bne.n	8008b86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	621a      	str	r2, [r3, #32]
}
 8008ba0:	bf00      	nop
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	fffeff8f 	.word	0xfffeff8f
 8008bb0:	40010000 	.word	0x40010000
 8008bb4:	40010400 	.word	0x40010400

08008bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f023 0210 	bic.w	r2, r3, #16
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4b2e      	ldr	r3, [pc, #184]	; (8008c9c <TIM_OC2_SetConfig+0xe4>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f023 0320 	bic.w	r3, r3, #32
 8008c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a23      	ldr	r2, [pc, #140]	; (8008ca0 <TIM_OC2_SetConfig+0xe8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_OC2_SetConfig+0x68>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a22      	ldr	r2, [pc, #136]	; (8008ca4 <TIM_OC2_SetConfig+0xec>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10d      	bne.n	8008c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <TIM_OC2_SetConfig+0xe8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_OC2_SetConfig+0x94>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a17      	ldr	r2, [pc, #92]	; (8008ca4 <TIM_OC2_SetConfig+0xec>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d113      	bne.n	8008c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	feff8fff 	.word	0xfeff8fff
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40010400 	.word	0x40010400

08008ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4b2d      	ldr	r3, [pc, #180]	; (8008d88 <TIM_OC3_SetConfig+0xe0>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a22      	ldr	r2, [pc, #136]	; (8008d8c <TIM_OC3_SetConfig+0xe4>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_OC3_SetConfig+0x66>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a21      	ldr	r2, [pc, #132]	; (8008d90 <TIM_OC3_SetConfig+0xe8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d10d      	bne.n	8008d2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <TIM_OC3_SetConfig+0xe4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_OC3_SetConfig+0x92>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <TIM_OC3_SetConfig+0xe8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d113      	bne.n	8008d62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	621a      	str	r2, [r3, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	fffeff8f 	.word	0xfffeff8f
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400

08008d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <TIM_OC4_SetConfig+0xa4>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a13      	ldr	r2, [pc, #76]	; (8008e3c <TIM_OC4_SetConfig+0xa8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC4_SetConfig+0x68>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <TIM_OC4_SetConfig+0xac>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d109      	bne.n	8008e10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	019b      	lsls	r3, r3, #6
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	621a      	str	r2, [r3, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	feff8fff 	.word	0xfeff8fff
 8008e3c:	40010000 	.word	0x40010000
 8008e40:	40010400 	.word	0x40010400

08008e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <TIM_OC5_SetConfig+0x98>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <TIM_OC5_SetConfig+0x9c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d003      	beq.n	8008ea2 <TIM_OC5_SetConfig+0x5e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a11      	ldr	r2, [pc, #68]	; (8008ee4 <TIM_OC5_SetConfig+0xa0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d109      	bne.n	8008eb6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	621a      	str	r2, [r3, #32]
}
 8008ed0:	bf00      	nop
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	fffeff8f 	.word	0xfffeff8f
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40010400 	.word	0x40010400

08008ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <TIM_OC6_SetConfig+0x9c>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	051b      	lsls	r3, r3, #20
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <TIM_OC6_SetConfig+0xa0>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_OC6_SetConfig+0x60>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a12      	ldr	r2, [pc, #72]	; (8008f8c <TIM_OC6_SetConfig+0xa4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d109      	bne.n	8008f5c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	029b      	lsls	r3, r3, #10
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	feff8fff 	.word	0xfeff8fff
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40010400 	.word	0x40010400

08008f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f023 030a 	bic.w	r3, r3, #10
 8008fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	621a      	str	r2, [r3, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0210 	bic.w	r2, r3, #16
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	031b      	lsls	r3, r3, #12
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800902a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	f043 0307 	orr.w	r3, r3, #7
 8009070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	609a      	str	r2, [r3, #8]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800909e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	021a      	lsls	r2, r3, #8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	609a      	str	r2, [r3, #8]
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f003 031f 	and.w	r3, r3, #31
 80090d6:	2201      	movs	r2, #1
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1a      	ldr	r2, [r3, #32]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	43db      	mvns	r3, r3
 80090e6:	401a      	ands	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a1a      	ldr	r2, [r3, #32]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	fa01 f303 	lsl.w	r3, r1, r3
 80090fc:	431a      	orrs	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009124:	2302      	movs	r3, #2
 8009126:	e06d      	b.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a30      	ldr	r2, [pc, #192]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d004      	beq.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a2f      	ldr	r2, [pc, #188]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d108      	bne.n	800916e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009162:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009174:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a20      	ldr	r2, [pc, #128]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d022      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919a:	d01d      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1d      	ldr	r2, [pc, #116]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d018      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1c      	ldr	r2, [pc, #112]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d013      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1a      	ldr	r2, [pc, #104]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00e      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a15      	ldr	r2, [pc, #84]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d009      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a16      	ldr	r2, [pc, #88]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d004      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a15      	ldr	r2, [pc, #84]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d10c      	bne.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	40010000 	.word	0x40010000
 8009214:	40010400 	.word	0x40010400
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40000c00 	.word	0x40000c00
 8009224:	40014000 	.word	0x40014000
 8009228:	40001800 	.word	0x40001800

0800922c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e040      	b.n	80092fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7f9 fff0 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0201 	bic.w	r2, r2, #1
 80092a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa70 	bl	800978c <UART_SetConfig>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e022      	b.n	80092fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fd0e 	bl	8009ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fd95 	bl	8009e24 <UART_CheckIdleState>
 80092fa:	4603      	mov	r3, r0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009316:	2b20      	cmp	r3, #32
 8009318:	d144      	bne.n	80093a4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <HAL_UART_Transmit_IT+0x22>
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e03d      	b.n	80093a6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009330:	2b01      	cmp	r3, #1
 8009332:	d101      	bne.n	8009338 <HAL_UART_Transmit_IT+0x34>
 8009334:	2302      	movs	r3, #2
 8009336:	e036      	b.n	80093a6 <HAL_UART_Transmit_IT+0xa2>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	88fa      	ldrh	r2, [r7, #6]
 8009352:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2221      	movs	r2, #33	; 0x21
 8009366:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009370:	d107      	bne.n	8009382 <HAL_UART_Transmit_IT+0x7e>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d103      	bne.n	8009382 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a0d      	ldr	r2, [pc, #52]	; (80093b4 <HAL_UART_Transmit_IT+0xb0>)
 800937e:	665a      	str	r2, [r3, #100]	; 0x64
 8009380:	e002      	b.n	8009388 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a0c      	ldr	r2, [pc, #48]	; (80093b8 <HAL_UART_Transmit_IT+0xb4>)
 8009386:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800939e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e000      	b.n	80093a6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	0800a057 	.word	0x0800a057
 80093b8:	08009fe5 	.word	0x08009fe5

080093bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	f040 808a 	bne.w	80094e8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HAL_UART_Receive_IT+0x24>
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e082      	b.n	80094ea <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Receive_IT+0x36>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e07b      	b.n	80094ea <HAL_UART_Receive_IT+0x12e>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	88fa      	ldrh	r2, [r7, #6]
 8009404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	88fa      	ldrh	r2, [r7, #6]
 800940c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941e:	d10e      	bne.n	800943e <HAL_UART_Receive_IT+0x82>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d105      	bne.n	8009434 <HAL_UART_Receive_IT+0x78>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800942e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009432:	e02d      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800943c:	e028      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10d      	bne.n	8009462 <HAL_UART_Receive_IT+0xa6>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d104      	bne.n	8009458 <HAL_UART_Receive_IT+0x9c>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	22ff      	movs	r2, #255	; 0xff
 8009452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009456:	e01b      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	227f      	movs	r2, #127	; 0x7f
 800945c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009460:	e016      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800946a:	d10d      	bne.n	8009488 <HAL_UART_Receive_IT+0xcc>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <HAL_UART_Receive_IT+0xc2>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	227f      	movs	r2, #127	; 0x7f
 8009478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800947c:	e008      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	223f      	movs	r2, #63	; 0x3f
 8009482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009486:	e003      	b.n	8009490 <HAL_UART_Receive_IT+0xd4>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2222      	movs	r2, #34	; 0x22
 800949a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0201 	orr.w	r2, r2, #1
 80094aa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b4:	d107      	bne.n	80094c6 <HAL_UART_Receive_IT+0x10a>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a0d      	ldr	r2, [pc, #52]	; (80094f8 <HAL_UART_Receive_IT+0x13c>)
 80094c2:	661a      	str	r2, [r3, #96]	; 0x60
 80094c4:	e002      	b.n	80094cc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a0c      	ldr	r2, [pc, #48]	; (80094fc <HAL_UART_Receive_IT+0x140>)
 80094ca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80094e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e000      	b.n	80094ea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80094e8:	2302      	movs	r3, #2
  }
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	0800a1ab 	.word	0x0800a1ab
 80094fc:	0800a105 	.word	0x0800a105

08009500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	f640 030f 	movw	r3, #2063	; 0x80f
 8009526:	4013      	ands	r3, r2
 8009528:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d113      	bne.n	8009558 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8100 	beq.w	800974e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	4798      	blx	r3
      }
      return;
 8009556:	e0fa      	b.n	800974e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80d5 	beq.w	800970a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80ca 	beq.w	800970a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00e      	beq.n	800959e <HAL_UART_IRQHandler+0x9e>
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2201      	movs	r2, #1
 8009590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00e      	beq.n	80095c6 <HAL_UART_IRQHandler+0xc6>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2202      	movs	r2, #2
 80095b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	f043 0204 	orr.w	r2, r3, #4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00e      	beq.n	80095ee <HAL_UART_IRQHandler+0xee>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2204      	movs	r2, #4
 80095e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d013      	beq.n	8009620 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d104      	bne.n	800960c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2208      	movs	r2, #8
 8009612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009618:	f043 0208 	orr.w	r2, r3, #8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00f      	beq.n	800964a <HAL_UART_IRQHandler+0x14a>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800963c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	f043 0220 	orr.w	r2, r3, #32
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d07f      	beq.n	8009752 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00c      	beq.n	8009676 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009686:	2b40      	cmp	r3, #64	; 0x40
 8009688:	d004      	beq.n	8009694 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009690:	2b00      	cmp	r3, #0
 8009692:	d031      	beq.n	80096f8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc6f 	bl	8009f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b40      	cmp	r3, #64	; 0x40
 80096a6:	d123      	bne.n	80096f0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d013      	beq.n	80096e8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	4a26      	ldr	r2, [pc, #152]	; (8009760 <HAL_UART_IRQHandler+0x260>)
 80096c6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fa ff05 	bl	80044dc <HAL_DMA_Abort_IT>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d016      	beq.n	8009706 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80096e2:	4610      	mov	r0, r2
 80096e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e6:	e00e      	b.n	8009706 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f845 	bl	8009778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ee:	e00a      	b.n	8009706 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f841 	bl	8009778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f6:	e006      	b.n	8009706 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f83d 	bl	8009778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009704:	e025      	b.n	8009752 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009706:	bf00      	nop
    return;
 8009708:	e023      	b.n	8009752 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009722:	2b00      	cmp	r3, #0
 8009724:	d017      	beq.n	8009756 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
    }
    return;
 800972e:	e012      	b.n	8009756 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00e      	beq.n	8009758 <HAL_UART_IRQHandler+0x258>
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fcc4 	bl	800a0d2 <UART_EndTransmit_IT>
    return;
 800974a:	bf00      	nop
 800974c:	e004      	b.n	8009758 <HAL_UART_IRQHandler+0x258>
      return;
 800974e:	bf00      	nop
 8009750:	e002      	b.n	8009758 <HAL_UART_IRQHandler+0x258>
    return;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <HAL_UART_IRQHandler+0x258>
    return;
 8009756:	bf00      	nop
  }

}
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	08009fb9 	.word	0x08009fb9

08009764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009794:	2300      	movs	r3, #0
 8009796:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4bb1      	ldr	r3, [pc, #708]	; (8009a80 <UART_SetConfig+0x2f4>)
 80097bc:	4013      	ands	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	6939      	ldr	r1, [r7, #16]
 80097c4:	430b      	orrs	r3, r1
 80097c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	430a      	orrs	r2, r1
 8009800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a9f      	ldr	r2, [pc, #636]	; (8009a84 <UART_SetConfig+0x2f8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d121      	bne.n	8009850 <UART_SetConfig+0xc4>
 800980c:	4b9e      	ldr	r3, [pc, #632]	; (8009a88 <UART_SetConfig+0x2fc>)
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d816      	bhi.n	8009848 <UART_SetConfig+0xbc>
 800981a:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x94>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009831 	.word	0x08009831
 8009824:	0800983d 	.word	0x0800983d
 8009828:	08009837 	.word	0x08009837
 800982c:	08009843 	.word	0x08009843
 8009830:	2301      	movs	r3, #1
 8009832:	77fb      	strb	r3, [r7, #31]
 8009834:	e151      	b.n	8009ada <UART_SetConfig+0x34e>
 8009836:	2302      	movs	r3, #2
 8009838:	77fb      	strb	r3, [r7, #31]
 800983a:	e14e      	b.n	8009ada <UART_SetConfig+0x34e>
 800983c:	2304      	movs	r3, #4
 800983e:	77fb      	strb	r3, [r7, #31]
 8009840:	e14b      	b.n	8009ada <UART_SetConfig+0x34e>
 8009842:	2308      	movs	r3, #8
 8009844:	77fb      	strb	r3, [r7, #31]
 8009846:	e148      	b.n	8009ada <UART_SetConfig+0x34e>
 8009848:	2310      	movs	r3, #16
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	bf00      	nop
 800984e:	e144      	b.n	8009ada <UART_SetConfig+0x34e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a8d      	ldr	r2, [pc, #564]	; (8009a8c <UART_SetConfig+0x300>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d134      	bne.n	80098c4 <UART_SetConfig+0x138>
 800985a:	4b8b      	ldr	r3, [pc, #556]	; (8009a88 <UART_SetConfig+0x2fc>)
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009860:	f003 030c 	and.w	r3, r3, #12
 8009864:	2b0c      	cmp	r3, #12
 8009866:	d829      	bhi.n	80098bc <UART_SetConfig+0x130>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <UART_SetConfig+0xe4>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080098bd 	.word	0x080098bd
 8009878:	080098bd 	.word	0x080098bd
 800987c:	080098bd 	.word	0x080098bd
 8009880:	080098b1 	.word	0x080098b1
 8009884:	080098bd 	.word	0x080098bd
 8009888:	080098bd 	.word	0x080098bd
 800988c:	080098bd 	.word	0x080098bd
 8009890:	080098ab 	.word	0x080098ab
 8009894:	080098bd 	.word	0x080098bd
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098bd 	.word	0x080098bd
 80098a0:	080098b7 	.word	0x080098b7
 80098a4:	2300      	movs	r3, #0
 80098a6:	77fb      	strb	r3, [r7, #31]
 80098a8:	e117      	b.n	8009ada <UART_SetConfig+0x34e>
 80098aa:	2302      	movs	r3, #2
 80098ac:	77fb      	strb	r3, [r7, #31]
 80098ae:	e114      	b.n	8009ada <UART_SetConfig+0x34e>
 80098b0:	2304      	movs	r3, #4
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e111      	b.n	8009ada <UART_SetConfig+0x34e>
 80098b6:	2308      	movs	r3, #8
 80098b8:	77fb      	strb	r3, [r7, #31]
 80098ba:	e10e      	b.n	8009ada <UART_SetConfig+0x34e>
 80098bc:	2310      	movs	r3, #16
 80098be:	77fb      	strb	r3, [r7, #31]
 80098c0:	bf00      	nop
 80098c2:	e10a      	b.n	8009ada <UART_SetConfig+0x34e>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a71      	ldr	r2, [pc, #452]	; (8009a90 <UART_SetConfig+0x304>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d120      	bne.n	8009910 <UART_SetConfig+0x184>
 80098ce:	4b6e      	ldr	r3, [pc, #440]	; (8009a88 <UART_SetConfig+0x2fc>)
 80098d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d00f      	beq.n	80098fc <UART_SetConfig+0x170>
 80098dc:	2b10      	cmp	r3, #16
 80098de:	d802      	bhi.n	80098e6 <UART_SetConfig+0x15a>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <UART_SetConfig+0x164>
 80098e4:	e010      	b.n	8009908 <UART_SetConfig+0x17c>
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d005      	beq.n	80098f6 <UART_SetConfig+0x16a>
 80098ea:	2b30      	cmp	r3, #48	; 0x30
 80098ec:	d009      	beq.n	8009902 <UART_SetConfig+0x176>
 80098ee:	e00b      	b.n	8009908 <UART_SetConfig+0x17c>
 80098f0:	2300      	movs	r3, #0
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e0f1      	b.n	8009ada <UART_SetConfig+0x34e>
 80098f6:	2302      	movs	r3, #2
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e0ee      	b.n	8009ada <UART_SetConfig+0x34e>
 80098fc:	2304      	movs	r3, #4
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e0eb      	b.n	8009ada <UART_SetConfig+0x34e>
 8009902:	2308      	movs	r3, #8
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e0e8      	b.n	8009ada <UART_SetConfig+0x34e>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	bf00      	nop
 800990e:	e0e4      	b.n	8009ada <UART_SetConfig+0x34e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a5f      	ldr	r2, [pc, #380]	; (8009a94 <UART_SetConfig+0x308>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d120      	bne.n	800995c <UART_SetConfig+0x1d0>
 800991a:	4b5b      	ldr	r3, [pc, #364]	; (8009a88 <UART_SetConfig+0x2fc>)
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009924:	2b40      	cmp	r3, #64	; 0x40
 8009926:	d00f      	beq.n	8009948 <UART_SetConfig+0x1bc>
 8009928:	2b40      	cmp	r3, #64	; 0x40
 800992a:	d802      	bhi.n	8009932 <UART_SetConfig+0x1a6>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <UART_SetConfig+0x1b0>
 8009930:	e010      	b.n	8009954 <UART_SetConfig+0x1c8>
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	d005      	beq.n	8009942 <UART_SetConfig+0x1b6>
 8009936:	2bc0      	cmp	r3, #192	; 0xc0
 8009938:	d009      	beq.n	800994e <UART_SetConfig+0x1c2>
 800993a:	e00b      	b.n	8009954 <UART_SetConfig+0x1c8>
 800993c:	2300      	movs	r3, #0
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e0cb      	b.n	8009ada <UART_SetConfig+0x34e>
 8009942:	2302      	movs	r3, #2
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e0c8      	b.n	8009ada <UART_SetConfig+0x34e>
 8009948:	2304      	movs	r3, #4
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e0c5      	b.n	8009ada <UART_SetConfig+0x34e>
 800994e:	2308      	movs	r3, #8
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e0c2      	b.n	8009ada <UART_SetConfig+0x34e>
 8009954:	2310      	movs	r3, #16
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	bf00      	nop
 800995a:	e0be      	b.n	8009ada <UART_SetConfig+0x34e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a4d      	ldr	r2, [pc, #308]	; (8009a98 <UART_SetConfig+0x30c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d124      	bne.n	80099b0 <UART_SetConfig+0x224>
 8009966:	4b48      	ldr	r3, [pc, #288]	; (8009a88 <UART_SetConfig+0x2fc>)
 8009968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009974:	d012      	beq.n	800999c <UART_SetConfig+0x210>
 8009976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997a:	d802      	bhi.n	8009982 <UART_SetConfig+0x1f6>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d007      	beq.n	8009990 <UART_SetConfig+0x204>
 8009980:	e012      	b.n	80099a8 <UART_SetConfig+0x21c>
 8009982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009986:	d006      	beq.n	8009996 <UART_SetConfig+0x20a>
 8009988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800998c:	d009      	beq.n	80099a2 <UART_SetConfig+0x216>
 800998e:	e00b      	b.n	80099a8 <UART_SetConfig+0x21c>
 8009990:	2300      	movs	r3, #0
 8009992:	77fb      	strb	r3, [r7, #31]
 8009994:	e0a1      	b.n	8009ada <UART_SetConfig+0x34e>
 8009996:	2302      	movs	r3, #2
 8009998:	77fb      	strb	r3, [r7, #31]
 800999a:	e09e      	b.n	8009ada <UART_SetConfig+0x34e>
 800999c:	2304      	movs	r3, #4
 800999e:	77fb      	strb	r3, [r7, #31]
 80099a0:	e09b      	b.n	8009ada <UART_SetConfig+0x34e>
 80099a2:	2308      	movs	r3, #8
 80099a4:	77fb      	strb	r3, [r7, #31]
 80099a6:	e098      	b.n	8009ada <UART_SetConfig+0x34e>
 80099a8:	2310      	movs	r3, #16
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	bf00      	nop
 80099ae:	e094      	b.n	8009ada <UART_SetConfig+0x34e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a39      	ldr	r2, [pc, #228]	; (8009a9c <UART_SetConfig+0x310>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d124      	bne.n	8009a04 <UART_SetConfig+0x278>
 80099ba:	4b33      	ldr	r3, [pc, #204]	; (8009a88 <UART_SetConfig+0x2fc>)
 80099bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c8:	d012      	beq.n	80099f0 <UART_SetConfig+0x264>
 80099ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ce:	d802      	bhi.n	80099d6 <UART_SetConfig+0x24a>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <UART_SetConfig+0x258>
 80099d4:	e012      	b.n	80099fc <UART_SetConfig+0x270>
 80099d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099da:	d006      	beq.n	80099ea <UART_SetConfig+0x25e>
 80099dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099e0:	d009      	beq.n	80099f6 <UART_SetConfig+0x26a>
 80099e2:	e00b      	b.n	80099fc <UART_SetConfig+0x270>
 80099e4:	2301      	movs	r3, #1
 80099e6:	77fb      	strb	r3, [r7, #31]
 80099e8:	e077      	b.n	8009ada <UART_SetConfig+0x34e>
 80099ea:	2302      	movs	r3, #2
 80099ec:	77fb      	strb	r3, [r7, #31]
 80099ee:	e074      	b.n	8009ada <UART_SetConfig+0x34e>
 80099f0:	2304      	movs	r3, #4
 80099f2:	77fb      	strb	r3, [r7, #31]
 80099f4:	e071      	b.n	8009ada <UART_SetConfig+0x34e>
 80099f6:	2308      	movs	r3, #8
 80099f8:	77fb      	strb	r3, [r7, #31]
 80099fa:	e06e      	b.n	8009ada <UART_SetConfig+0x34e>
 80099fc:	2310      	movs	r3, #16
 80099fe:	77fb      	strb	r3, [r7, #31]
 8009a00:	bf00      	nop
 8009a02:	e06a      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a25      	ldr	r2, [pc, #148]	; (8009aa0 <UART_SetConfig+0x314>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d124      	bne.n	8009a58 <UART_SetConfig+0x2cc>
 8009a0e:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <UART_SetConfig+0x2fc>)
 8009a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a1c:	d012      	beq.n	8009a44 <UART_SetConfig+0x2b8>
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a22:	d802      	bhi.n	8009a2a <UART_SetConfig+0x29e>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <UART_SetConfig+0x2ac>
 8009a28:	e012      	b.n	8009a50 <UART_SetConfig+0x2c4>
 8009a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2e:	d006      	beq.n	8009a3e <UART_SetConfig+0x2b2>
 8009a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a34:	d009      	beq.n	8009a4a <UART_SetConfig+0x2be>
 8009a36:	e00b      	b.n	8009a50 <UART_SetConfig+0x2c4>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e04d      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e04a      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a44:	2304      	movs	r3, #4
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e047      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e044      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a50:	2310      	movs	r3, #16
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	bf00      	nop
 8009a56:	e040      	b.n	8009ada <UART_SetConfig+0x34e>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a11      	ldr	r2, [pc, #68]	; (8009aa4 <UART_SetConfig+0x318>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d139      	bne.n	8009ad6 <UART_SetConfig+0x34a>
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <UART_SetConfig+0x2fc>)
 8009a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a70:	d027      	beq.n	8009ac2 <UART_SetConfig+0x336>
 8009a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a76:	d817      	bhi.n	8009aa8 <UART_SetConfig+0x31c>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01c      	beq.n	8009ab6 <UART_SetConfig+0x32a>
 8009a7c:	e027      	b.n	8009ace <UART_SetConfig+0x342>
 8009a7e:	bf00      	nop
 8009a80:	efff69f3 	.word	0xefff69f3
 8009a84:	40011000 	.word	0x40011000
 8009a88:	40023800 	.word	0x40023800
 8009a8c:	40004400 	.word	0x40004400
 8009a90:	40004800 	.word	0x40004800
 8009a94:	40004c00 	.word	0x40004c00
 8009a98:	40005000 	.word	0x40005000
 8009a9c:	40011400 	.word	0x40011400
 8009aa0:	40007800 	.word	0x40007800
 8009aa4:	40007c00 	.word	0x40007c00
 8009aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aac:	d006      	beq.n	8009abc <UART_SetConfig+0x330>
 8009aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ab2:	d009      	beq.n	8009ac8 <UART_SetConfig+0x33c>
 8009ab4:	e00b      	b.n	8009ace <UART_SetConfig+0x342>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	77fb      	strb	r3, [r7, #31]
 8009aba:	e00e      	b.n	8009ada <UART_SetConfig+0x34e>
 8009abc:	2302      	movs	r3, #2
 8009abe:	77fb      	strb	r3, [r7, #31]
 8009ac0:	e00b      	b.n	8009ada <UART_SetConfig+0x34e>
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e008      	b.n	8009ada <UART_SetConfig+0x34e>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	77fb      	strb	r3, [r7, #31]
 8009acc:	e005      	b.n	8009ada <UART_SetConfig+0x34e>
 8009ace:	2310      	movs	r3, #16
 8009ad0:	77fb      	strb	r3, [r7, #31]
 8009ad2:	bf00      	nop
 8009ad4:	e001      	b.n	8009ada <UART_SetConfig+0x34e>
 8009ad6:	2310      	movs	r3, #16
 8009ad8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ae2:	d17f      	bne.n	8009be4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009ae4:	7ffb      	ldrb	r3, [r7, #31]
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d85c      	bhi.n	8009ba4 <UART_SetConfig+0x418>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x364>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b35 	.word	0x08009b35
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009ba5 	.word	0x08009ba5
 8009b00:	08009b6d 	.word	0x08009b6d
 8009b04:	08009ba5 	.word	0x08009ba5
 8009b08:	08009ba5 	.word	0x08009ba5
 8009b0c:	08009ba5 	.word	0x08009ba5
 8009b10:	08009b8d 	.word	0x08009b8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b14:	f7fd f8f6 	bl	8006d04 <HAL_RCC_GetPCLK1Freq>
 8009b18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	005a      	lsls	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	61bb      	str	r3, [r7, #24]
        break;
 8009b32:	e03a      	b.n	8009baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b34:	f7fd f8fa 	bl	8006d2c <HAL_RCC_GetPCLK2Freq>
 8009b38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	005a      	lsls	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	085b      	lsrs	r3, r3, #1
 8009b44:	441a      	add	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	61bb      	str	r3, [r7, #24]
        break;
 8009b52:	e02a      	b.n	8009baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	085a      	lsrs	r2, r3, #1
 8009b5a:	4b5f      	ldr	r3, [pc, #380]	; (8009cd8 <UART_SetConfig+0x54c>)
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	6852      	ldr	r2, [r2, #4]
 8009b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	61bb      	str	r3, [r7, #24]
        break;
 8009b6a:	e01e      	b.n	8009baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6c:	f7fc ffe6 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8009b70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	005a      	lsls	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	441a      	add	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	61bb      	str	r3, [r7, #24]
        break;
 8009b8a:	e00e      	b.n	8009baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	085b      	lsrs	r3, r3, #1
 8009b92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	61bb      	str	r3, [r7, #24]
        break;
 8009ba2:	e002      	b.n	8009baa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	75fb      	strb	r3, [r7, #23]
        break;
 8009ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b0f      	cmp	r3, #15
 8009bae:	d916      	bls.n	8009bde <UART_SetConfig+0x452>
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d212      	bcs.n	8009bde <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	f023 030f 	bic.w	r3, r3, #15
 8009bc0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	897a      	ldrh	r2, [r7, #10]
 8009bda:	60da      	str	r2, [r3, #12]
 8009bdc:	e070      	b.n	8009cc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	e06d      	b.n	8009cc0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009be4:	7ffb      	ldrb	r3, [r7, #31]
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d859      	bhi.n	8009c9e <UART_SetConfig+0x512>
 8009bea:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <UART_SetConfig+0x464>)
 8009bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c33 	.word	0x08009c33
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c9f 	.word	0x08009c9f
 8009c00:	08009c69 	.word	0x08009c69
 8009c04:	08009c9f 	.word	0x08009c9f
 8009c08:	08009c9f 	.word	0x08009c9f
 8009c0c:	08009c9f 	.word	0x08009c9f
 8009c10:	08009c87 	.word	0x08009c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c14:	f7fd f876 	bl	8006d04 <HAL_RCC_GetPCLK1Freq>
 8009c18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	085a      	lsrs	r2, r3, #1
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	441a      	add	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	61bb      	str	r3, [r7, #24]
        break;
 8009c30:	e038      	b.n	8009ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c32:	f7fd f87b 	bl	8006d2c <HAL_RCC_GetPCLK2Freq>
 8009c36:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	085a      	lsrs	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	441a      	add	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	61bb      	str	r3, [r7, #24]
        break;
 8009c4e:	e029      	b.n	8009ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	085a      	lsrs	r2, r3, #1
 8009c56:	4b21      	ldr	r3, [pc, #132]	; (8009cdc <UART_SetConfig+0x550>)
 8009c58:	4413      	add	r3, r2
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6852      	ldr	r2, [r2, #4]
 8009c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	61bb      	str	r3, [r7, #24]
        break;
 8009c66:	e01d      	b.n	8009ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c68:	f7fc ff68 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8009c6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	085a      	lsrs	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	441a      	add	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	61bb      	str	r3, [r7, #24]
        break;
 8009c84:	e00e      	b.n	8009ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	61bb      	str	r3, [r7, #24]
        break;
 8009c9c:	e002      	b.n	8009ca4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	75fb      	strb	r3, [r7, #23]
        break;
 8009ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d908      	bls.n	8009cbc <UART_SetConfig+0x530>
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb0:	d204      	bcs.n	8009cbc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	e001      	b.n	8009cc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	01e84800 	.word	0x01e84800
 8009cdc:	00f42400 	.word	0x00f42400

08009ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01a      	beq.n	8009df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dde:	d10a      	bne.n	8009df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	605a      	str	r2, [r3, #4]
  }
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af02      	add	r7, sp, #8
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e32:	f7f9 fba3 	bl	800357c <HAL_GetTick>
 8009e36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0308 	and.w	r3, r3, #8
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d10e      	bne.n	8009e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f814 	bl	8009e82 <UART_WaitOnFlagUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e00a      	b.n	8009e7a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	603b      	str	r3, [r7, #0]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e92:	e05d      	b.n	8009f50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d059      	beq.n	8009f50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9c:	f7f9 fb6e 	bl	800357c <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d302      	bcc.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d11b      	bne.n	8009eea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 0201 	bic.w	r2, r2, #1
 8009ed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e042      	b.n	8009f70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d02b      	beq.n	8009f50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f06:	d123      	bne.n	8009f50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0201 	bic.w	r2, r2, #1
 8009f30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2220      	movs	r2, #32
 8009f42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e00f      	b.n	8009f70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	69da      	ldr	r2, [r3, #28]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d092      	beq.n	8009e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 0201 	bic.w	r2, r2, #1
 8009f9e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fbce 	bl	8009778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff0:	2b21      	cmp	r3, #33	; 0x21
 8009ff2:	d12a      	bne.n	800a04a <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d110      	bne.n	800a022 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a00e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a01e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a020:	e013      	b.n	800a04a <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3b01      	subs	r3, #1
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a056:	b480      	push	{r7}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a062:	2b21      	cmp	r3, #33	; 0x21
 800a064:	d12f      	bne.n	800a0c6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d110      	bne.n	800a094 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a080:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a090:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a092:	e018      	b.n	800a0c6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a098:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0a8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ae:	1c9a      	adds	r2, r3, #2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fb34 	bl	8009764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a112:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a118:	2b22      	cmp	r3, #34	; 0x22
 800a11a:	d13a      	bne.n	800a192 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a124:	89bb      	ldrh	r3, [r7, #12]
 800a126:	b2d9      	uxtb	r1, r3
 800a128:	89fb      	ldrh	r3, [r7, #14]
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a130:	400a      	ands	r2, r1
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d121      	bne.n	800a1a2 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a16c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0201 	bic.w	r2, r2, #1
 800a17c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2220      	movs	r2, #32
 800a182:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7f8 fce4 	bl	8002b58 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a190:	e007      	b.n	800a1a2 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f042 0208 	orr.w	r2, r2, #8
 800a1a0:	619a      	str	r2, [r3, #24]
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1b8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1be:	2b22      	cmp	r3, #34	; 0x22
 800a1c0:	d13a      	bne.n	800a238 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ce:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a1d0:	89ba      	ldrh	r2, [r7, #12]
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e0:	1c9a      	adds	r2, r3, #2
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d121      	bne.n	800a248 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a212:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0201 	bic.w	r2, r2, #1
 800a222:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7f8 fc91 	bl	8002b58 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a236:	e007      	b.n	800a248 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	699a      	ldr	r2, [r3, #24]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0208 	orr.w	r2, r2, #8
 800a246:	619a      	str	r2, [r3, #24]
}
 800a248:	bf00      	nop
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a250:	b084      	sub	sp, #16
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	f107 001c 	add.w	r0, r7, #28
 800a25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2b01      	cmp	r3, #1
 800a266:	d120      	bne.n	800a2aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	4b20      	ldr	r3, [pc, #128]	; (800a2fc <USB_CoreInit+0xac>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d105      	bne.n	800a29e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa52 	bl	800a748 <USB_CoreReset>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
 800a2a8:	e010      	b.n	800a2cc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa46 	bl	800a748 <USB_CoreReset>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d10b      	bne.n	800a2ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f043 0206 	orr.w	r2, r3, #6
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2f6:	b004      	add	sp, #16
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	ffbdffbf 	.word	0xffbdffbf

0800a300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f023 0201 	bic.w	r2, r3, #1
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d106      	bne.n	800a34e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]
 800a34c:	e00b      	b.n	800a366 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60da      	str	r2, [r3, #12]
 800a360:	e001      	b.n	800a366 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e003      	b.n	800a36e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a366:	2032      	movs	r0, #50	; 0x32
 800a368:	f7f9 f914 	bl	8003594 <HAL_Delay>

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a378:	b084      	sub	sp, #16
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]
 800a396:	e009      	b.n	800a3ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3340      	adds	r3, #64	; 0x40
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b0e      	cmp	r3, #14
 800a3b0:	d9f2      	bls.n	800a398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d11c      	bne.n	800a3f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3c6:	f043 0302 	orr.w	r3, r3, #2
 800a3ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e005      	b.n	800a3fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a404:	461a      	mov	r2, r3
 800a406:	2300      	movs	r3, #0
 800a408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a410:	4619      	mov	r1, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a418:	461a      	mov	r2, r3
 800a41a:	680b      	ldr	r3, [r1, #0]
 800a41c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	2b01      	cmp	r3, #1
 800a422:	d10c      	bne.n	800a43e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d104      	bne.n	800a434 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a42a:	2100      	movs	r1, #0
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f959 	bl	800a6e4 <USB_SetDevSpeed>
 800a432:	e018      	b.n	800a466 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a434:	2101      	movs	r1, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f954 	bl	800a6e4 <USB_SetDevSpeed>
 800a43c:	e013      	b.n	800a466 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2b03      	cmp	r3, #3
 800a442:	d10c      	bne.n	800a45e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d104      	bne.n	800a454 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a44a:	2100      	movs	r1, #0
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f949 	bl	800a6e4 <USB_SetDevSpeed>
 800a452:	e008      	b.n	800a466 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a454:	2101      	movs	r1, #1
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f944 	bl	800a6e4 <USB_SetDevSpeed>
 800a45c:	e003      	b.n	800a466 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a45e:	2103      	movs	r1, #3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f93f 	bl	800a6e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a466:	2110      	movs	r1, #16
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f8f3 	bl	800a654 <USB_FlushTxFifo>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f911 	bl	800a6a0 <USB_FlushRxFifo>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48e:	461a      	mov	r2, r3
 800a490:	2300      	movs	r3, #0
 800a492:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49a:	461a      	mov	r2, r3
 800a49c:	2300      	movs	r3, #0
 800a49e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	e043      	b.n	800a53a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4c8:	d118      	bne.n	800a4fc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4dc:	461a      	mov	r2, r3
 800a4de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	e013      	b.n	800a50e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	e008      	b.n	800a50e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a508:	461a      	mov	r2, r3
 800a50a:	2300      	movs	r3, #0
 800a50c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51a:	461a      	mov	r2, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52c:	461a      	mov	r2, r3
 800a52e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3301      	adds	r3, #1
 800a538:	613b      	str	r3, [r7, #16]
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d3b7      	bcc.n	800a4b2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a542:	2300      	movs	r3, #0
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	e043      	b.n	800a5d0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a55a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a55e:	d118      	bne.n	800a592 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a572:	461a      	mov	r2, r3
 800a574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	e013      	b.n	800a5a4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a588:	461a      	mov	r2, r3
 800a58a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e008      	b.n	800a5a4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d3b7      	bcc.n	800a548 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a5f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d105      	bne.n	800a60c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f043 0210 	orr.w	r2, r3, #16
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699a      	ldr	r2, [r3, #24]
 800a610:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <USB_DevInit+0x2d4>)
 800a612:	4313      	orrs	r3, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d005      	beq.n	800a62a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	f043 0208 	orr.w	r2, r3, #8
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d105      	bne.n	800a63c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	4b06      	ldr	r3, [pc, #24]	; (800a650 <USB_DevInit+0x2d8>)
 800a636:	4313      	orrs	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a648:	b004      	add	sp, #16
 800a64a:	4770      	bx	lr
 800a64c:	803c3800 	.word	0x803c3800
 800a650:	40000004 	.word	0x40000004

0800a654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	019b      	lsls	r3, r3, #6
 800a666:	f043 0220 	orr.w	r2, r3, #32
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a09      	ldr	r2, [pc, #36]	; (800a69c <USB_FlushTxFifo+0x48>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d901      	bls.n	800a680 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e006      	b.n	800a68e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0320 	and.w	r3, r3, #32
 800a688:	2b20      	cmp	r3, #32
 800a68a:	d0f0      	beq.n	800a66e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	00030d40 	.word	0x00030d40

0800a6a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2210      	movs	r2, #16
 800a6b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <USB_FlushRxFifo+0x40>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d901      	bls.n	800a6c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e006      	b.n	800a6d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b10      	cmp	r3, #16
 800a6ce:	d0f0      	beq.n	800a6b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	00030d40 	.word	0x00030d40

0800a6e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a704:	4313      	orrs	r3, r2
 800a706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a730:	f043 0302 	orr.w	r3, r3, #2
 800a734:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a736:	2003      	movs	r0, #3
 800a738:	f7f8 ff2c 	bl	8003594 <HAL_Delay>

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3301      	adds	r3, #1
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <USB_CoreReset+0x64>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d901      	bls.n	800a766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e01b      	b.n	800a79e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	daf2      	bge.n	800a754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f043 0201 	orr.w	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4a09      	ldr	r2, [pc, #36]	; (800a7ac <USB_CoreReset+0x64>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d901      	bls.n	800a790 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e006      	b.n	800a79e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d0f0      	beq.n	800a77e <USB_CoreReset+0x36>

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	00030d40 	.word	0x00030d40

0800a7b0 <atoi>:
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	f000 bd2a 	b.w	800b20c <strtol>

0800a7b8 <__errno>:
 800a7b8:	4b01      	ldr	r3, [pc, #4]	; (800a7c0 <__errno+0x8>)
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	20000020 	.word	0x20000020

0800a7c4 <__libc_init_array>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	4e0d      	ldr	r6, [pc, #52]	; (800a7fc <__libc_init_array+0x38>)
 800a7c8:	4c0d      	ldr	r4, [pc, #52]	; (800a800 <__libc_init_array+0x3c>)
 800a7ca:	1ba4      	subs	r4, r4, r6
 800a7cc:	10a4      	asrs	r4, r4, #2
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	d109      	bne.n	800a7e8 <__libc_init_array+0x24>
 800a7d4:	4e0b      	ldr	r6, [pc, #44]	; (800a804 <__libc_init_array+0x40>)
 800a7d6:	4c0c      	ldr	r4, [pc, #48]	; (800a808 <__libc_init_array+0x44>)
 800a7d8:	f002 f8f2 	bl	800c9c0 <_init>
 800a7dc:	1ba4      	subs	r4, r4, r6
 800a7de:	10a4      	asrs	r4, r4, #2
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	42a5      	cmp	r5, r4
 800a7e4:	d105      	bne.n	800a7f2 <__libc_init_array+0x2e>
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7ec:	4798      	blx	r3
 800a7ee:	3501      	adds	r5, #1
 800a7f0:	e7ee      	b.n	800a7d0 <__libc_init_array+0xc>
 800a7f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7f6:	4798      	blx	r3
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	e7f2      	b.n	800a7e2 <__libc_init_array+0x1e>
 800a7fc:	0800ccd0 	.word	0x0800ccd0
 800a800:	0800ccd0 	.word	0x0800ccd0
 800a804:	0800ccd0 	.word	0x0800ccd0
 800a808:	0800ccd4 	.word	0x0800ccd4

0800a80c <memset>:
 800a80c:	4402      	add	r2, r0
 800a80e:	4603      	mov	r3, r0
 800a810:	4293      	cmp	r3, r2
 800a812:	d100      	bne.n	800a816 <memset+0xa>
 800a814:	4770      	bx	lr
 800a816:	f803 1b01 	strb.w	r1, [r3], #1
 800a81a:	e7f9      	b.n	800a810 <memset+0x4>

0800a81c <__cvt>:
 800a81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	ec55 4b10 	vmov	r4, r5, d0
 800a824:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a826:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	460e      	mov	r6, r1
 800a82e:	4691      	mov	r9, r2
 800a830:	4619      	mov	r1, r3
 800a832:	bfb8      	it	lt
 800a834:	4622      	movlt	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	f027 0720 	bic.w	r7, r7, #32
 800a83c:	bfbb      	ittet	lt
 800a83e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a842:	461d      	movlt	r5, r3
 800a844:	2300      	movge	r3, #0
 800a846:	232d      	movlt	r3, #45	; 0x2d
 800a848:	bfb8      	it	lt
 800a84a:	4614      	movlt	r4, r2
 800a84c:	2f46      	cmp	r7, #70	; 0x46
 800a84e:	700b      	strb	r3, [r1, #0]
 800a850:	d004      	beq.n	800a85c <__cvt+0x40>
 800a852:	2f45      	cmp	r7, #69	; 0x45
 800a854:	d100      	bne.n	800a858 <__cvt+0x3c>
 800a856:	3601      	adds	r6, #1
 800a858:	2102      	movs	r1, #2
 800a85a:	e000      	b.n	800a85e <__cvt+0x42>
 800a85c:	2103      	movs	r1, #3
 800a85e:	ab03      	add	r3, sp, #12
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	ab02      	add	r3, sp, #8
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4632      	mov	r2, r6
 800a868:	4653      	mov	r3, sl
 800a86a:	ec45 4b10 	vmov	d0, r4, r5
 800a86e:	f000 fd6f 	bl	800b350 <_dtoa_r>
 800a872:	2f47      	cmp	r7, #71	; 0x47
 800a874:	4680      	mov	r8, r0
 800a876:	d102      	bne.n	800a87e <__cvt+0x62>
 800a878:	f019 0f01 	tst.w	r9, #1
 800a87c:	d026      	beq.n	800a8cc <__cvt+0xb0>
 800a87e:	2f46      	cmp	r7, #70	; 0x46
 800a880:	eb08 0906 	add.w	r9, r8, r6
 800a884:	d111      	bne.n	800a8aa <__cvt+0x8e>
 800a886:	f898 3000 	ldrb.w	r3, [r8]
 800a88a:	2b30      	cmp	r3, #48	; 0x30
 800a88c:	d10a      	bne.n	800a8a4 <__cvt+0x88>
 800a88e:	2200      	movs	r2, #0
 800a890:	2300      	movs	r3, #0
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f7f6 f937 	bl	8000b08 <__aeabi_dcmpeq>
 800a89a:	b918      	cbnz	r0, 800a8a4 <__cvt+0x88>
 800a89c:	f1c6 0601 	rsb	r6, r6, #1
 800a8a0:	f8ca 6000 	str.w	r6, [sl]
 800a8a4:	f8da 3000 	ldr.w	r3, [sl]
 800a8a8:	4499      	add	r9, r3
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f6 f929 	bl	8000b08 <__aeabi_dcmpeq>
 800a8b6:	b938      	cbnz	r0, 800a8c8 <__cvt+0xac>
 800a8b8:	2230      	movs	r2, #48	; 0x30
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	454b      	cmp	r3, r9
 800a8be:	d205      	bcs.n	800a8cc <__cvt+0xb0>
 800a8c0:	1c59      	adds	r1, r3, #1
 800a8c2:	9103      	str	r1, [sp, #12]
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	e7f8      	b.n	800a8ba <__cvt+0x9e>
 800a8c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8d0:	eba3 0308 	sub.w	r3, r3, r8
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	b004      	add	sp, #16
 800a8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a8de <__exponent>:
 800a8de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	bfba      	itte	lt
 800a8e6:	4249      	neglt	r1, r1
 800a8e8:	232d      	movlt	r3, #45	; 0x2d
 800a8ea:	232b      	movge	r3, #43	; 0x2b
 800a8ec:	2909      	cmp	r1, #9
 800a8ee:	f804 2b02 	strb.w	r2, [r4], #2
 800a8f2:	7043      	strb	r3, [r0, #1]
 800a8f4:	dd20      	ble.n	800a938 <__exponent+0x5a>
 800a8f6:	f10d 0307 	add.w	r3, sp, #7
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	260a      	movs	r6, #10
 800a8fe:	fb91 f5f6 	sdiv	r5, r1, r6
 800a902:	fb06 1115 	mls	r1, r6, r5, r1
 800a906:	3130      	adds	r1, #48	; 0x30
 800a908:	2d09      	cmp	r5, #9
 800a90a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a90e:	f103 32ff 	add.w	r2, r3, #4294967295
 800a912:	4629      	mov	r1, r5
 800a914:	dc09      	bgt.n	800a92a <__exponent+0x4c>
 800a916:	3130      	adds	r1, #48	; 0x30
 800a918:	3b02      	subs	r3, #2
 800a91a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a91e:	42bb      	cmp	r3, r7
 800a920:	4622      	mov	r2, r4
 800a922:	d304      	bcc.n	800a92e <__exponent+0x50>
 800a924:	1a10      	subs	r0, r2, r0
 800a926:	b003      	add	sp, #12
 800a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92a:	4613      	mov	r3, r2
 800a92c:	e7e7      	b.n	800a8fe <__exponent+0x20>
 800a92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a932:	f804 2b01 	strb.w	r2, [r4], #1
 800a936:	e7f2      	b.n	800a91e <__exponent+0x40>
 800a938:	2330      	movs	r3, #48	; 0x30
 800a93a:	4419      	add	r1, r3
 800a93c:	7083      	strb	r3, [r0, #2]
 800a93e:	1d02      	adds	r2, r0, #4
 800a940:	70c1      	strb	r1, [r0, #3]
 800a942:	e7ef      	b.n	800a924 <__exponent+0x46>

0800a944 <_printf_float>:
 800a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	b08d      	sub	sp, #52	; 0x34
 800a94a:	460c      	mov	r4, r1
 800a94c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a950:	4616      	mov	r6, r2
 800a952:	461f      	mov	r7, r3
 800a954:	4605      	mov	r5, r0
 800a956:	f001 fab7 	bl	800bec8 <_localeconv_r>
 800a95a:	6803      	ldr	r3, [r0, #0]
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f5 fc56 	bl	8000210 <strlen>
 800a964:	2300      	movs	r3, #0
 800a966:	930a      	str	r3, [sp, #40]	; 0x28
 800a968:	f8d8 3000 	ldr.w	r3, [r8]
 800a96c:	9005      	str	r0, [sp, #20]
 800a96e:	3307      	adds	r3, #7
 800a970:	f023 0307 	bic.w	r3, r3, #7
 800a974:	f103 0208 	add.w	r2, r3, #8
 800a978:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a97c:	f8d4 b000 	ldr.w	fp, [r4]
 800a980:	f8c8 2000 	str.w	r2, [r8]
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a98c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a990:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a994:	9307      	str	r3, [sp, #28]
 800a996:	f8cd 8018 	str.w	r8, [sp, #24]
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	4ba7      	ldr	r3, [pc, #668]	; (800ac3c <_printf_float+0x2f8>)
 800a9a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9a4:	f7f6 f8e2 	bl	8000b6c <__aeabi_dcmpun>
 800a9a8:	bb70      	cbnz	r0, 800aa08 <_printf_float+0xc4>
 800a9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ae:	4ba3      	ldr	r3, [pc, #652]	; (800ac3c <_printf_float+0x2f8>)
 800a9b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9b4:	f7f6 f8bc 	bl	8000b30 <__aeabi_dcmple>
 800a9b8:	bb30      	cbnz	r0, 800aa08 <_printf_float+0xc4>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f6 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 800a9c6:	b110      	cbz	r0, 800a9ce <_printf_float+0x8a>
 800a9c8:	232d      	movs	r3, #45	; 0x2d
 800a9ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ce:	4a9c      	ldr	r2, [pc, #624]	; (800ac40 <_printf_float+0x2fc>)
 800a9d0:	4b9c      	ldr	r3, [pc, #624]	; (800ac44 <_printf_float+0x300>)
 800a9d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a9d6:	bf8c      	ite	hi
 800a9d8:	4690      	movhi	r8, r2
 800a9da:	4698      	movls	r8, r3
 800a9dc:	2303      	movs	r3, #3
 800a9de:	f02b 0204 	bic.w	r2, fp, #4
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	6022      	str	r2, [r4, #0]
 800a9e6:	f04f 0900 	mov.w	r9, #0
 800a9ea:	9700      	str	r7, [sp, #0]
 800a9ec:	4633      	mov	r3, r6
 800a9ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 f9e6 	bl	800adc4 <_printf_common>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f040 808d 	bne.w	800ab18 <_printf_float+0x1d4>
 800a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800aa02:	b00d      	add	sp, #52	; 0x34
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa08:	4642      	mov	r2, r8
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f6 f8ac 	bl	8000b6c <__aeabi_dcmpun>
 800aa14:	b110      	cbz	r0, 800aa1c <_printf_float+0xd8>
 800aa16:	4a8c      	ldr	r2, [pc, #560]	; (800ac48 <_printf_float+0x304>)
 800aa18:	4b8c      	ldr	r3, [pc, #560]	; (800ac4c <_printf_float+0x308>)
 800aa1a:	e7da      	b.n	800a9d2 <_printf_float+0x8e>
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	1c4b      	adds	r3, r1, #1
 800aa20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800aa24:	a80a      	add	r0, sp, #40	; 0x28
 800aa26:	d13e      	bne.n	800aaa6 <_printf_float+0x162>
 800aa28:	2306      	movs	r3, #6
 800aa2a:	6063      	str	r3, [r4, #4]
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aa32:	ab09      	add	r3, sp, #36	; 0x24
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	ec49 8b10 	vmov	d0, r8, r9
 800aa3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa3e:	6022      	str	r2, [r4, #0]
 800aa40:	f8cd a004 	str.w	sl, [sp, #4]
 800aa44:	6861      	ldr	r1, [r4, #4]
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7ff fee8 	bl	800a81c <__cvt>
 800aa4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aa50:	2b47      	cmp	r3, #71	; 0x47
 800aa52:	4680      	mov	r8, r0
 800aa54:	d109      	bne.n	800aa6a <_printf_float+0x126>
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	1cd8      	adds	r0, r3, #3
 800aa5a:	db02      	blt.n	800aa62 <_printf_float+0x11e>
 800aa5c:	6862      	ldr	r2, [r4, #4]
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	dd47      	ble.n	800aaf2 <_printf_float+0x1ae>
 800aa62:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa66:	fa5f fa8a 	uxtb.w	sl, sl
 800aa6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aa6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa70:	d824      	bhi.n	800aabc <_printf_float+0x178>
 800aa72:	3901      	subs	r1, #1
 800aa74:	4652      	mov	r2, sl
 800aa76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa7a:	9109      	str	r1, [sp, #36]	; 0x24
 800aa7c:	f7ff ff2f 	bl	800a8de <__exponent>
 800aa80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa82:	1813      	adds	r3, r2, r0
 800aa84:	2a01      	cmp	r2, #1
 800aa86:	4681      	mov	r9, r0
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	dc02      	bgt.n	800aa92 <_printf_float+0x14e>
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	07d1      	lsls	r1, r2, #31
 800aa90:	d501      	bpl.n	800aa96 <_printf_float+0x152>
 800aa92:	3301      	adds	r3, #1
 800aa94:	6123      	str	r3, [r4, #16]
 800aa96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0a5      	beq.n	800a9ea <_printf_float+0xa6>
 800aa9e:	232d      	movs	r3, #45	; 0x2d
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa4:	e7a1      	b.n	800a9ea <_printf_float+0xa6>
 800aaa6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800aaaa:	f000 8177 	beq.w	800ad9c <_printf_float+0x458>
 800aaae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aab2:	d1bb      	bne.n	800aa2c <_printf_float+0xe8>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	d1b9      	bne.n	800aa2c <_printf_float+0xe8>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e7b6      	b.n	800aa2a <_printf_float+0xe6>
 800aabc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800aac0:	d119      	bne.n	800aaf6 <_printf_float+0x1b2>
 800aac2:	2900      	cmp	r1, #0
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	dd0c      	ble.n	800aae2 <_printf_float+0x19e>
 800aac8:	6121      	str	r1, [r4, #16]
 800aaca:	b913      	cbnz	r3, 800aad2 <_printf_float+0x18e>
 800aacc:	6822      	ldr	r2, [r4, #0]
 800aace:	07d2      	lsls	r2, r2, #31
 800aad0:	d502      	bpl.n	800aad8 <_printf_float+0x194>
 800aad2:	3301      	adds	r3, #1
 800aad4:	440b      	add	r3, r1
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aada:	65a3      	str	r3, [r4, #88]	; 0x58
 800aadc:	f04f 0900 	mov.w	r9, #0
 800aae0:	e7d9      	b.n	800aa96 <_printf_float+0x152>
 800aae2:	b913      	cbnz	r3, 800aaea <_printf_float+0x1a6>
 800aae4:	6822      	ldr	r2, [r4, #0]
 800aae6:	07d0      	lsls	r0, r2, #31
 800aae8:	d501      	bpl.n	800aaee <_printf_float+0x1aa>
 800aaea:	3302      	adds	r3, #2
 800aaec:	e7f3      	b.n	800aad6 <_printf_float+0x192>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7f1      	b.n	800aad6 <_printf_float+0x192>
 800aaf2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800aaf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aafa:	4293      	cmp	r3, r2
 800aafc:	db05      	blt.n	800ab0a <_printf_float+0x1c6>
 800aafe:	6822      	ldr	r2, [r4, #0]
 800ab00:	6123      	str	r3, [r4, #16]
 800ab02:	07d1      	lsls	r1, r2, #31
 800ab04:	d5e8      	bpl.n	800aad8 <_printf_float+0x194>
 800ab06:	3301      	adds	r3, #1
 800ab08:	e7e5      	b.n	800aad6 <_printf_float+0x192>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfd4      	ite	le
 800ab0e:	f1c3 0302 	rsble	r3, r3, #2
 800ab12:	2301      	movgt	r3, #1
 800ab14:	4413      	add	r3, r2
 800ab16:	e7de      	b.n	800aad6 <_printf_float+0x192>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	055a      	lsls	r2, r3, #21
 800ab1c:	d407      	bmi.n	800ab2e <_printf_float+0x1ea>
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	4642      	mov	r2, r8
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d12b      	bne.n	800ab84 <_printf_float+0x240>
 800ab2c:	e767      	b.n	800a9fe <_printf_float+0xba>
 800ab2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ab32:	f240 80dc 	bls.w	800acee <_printf_float+0x3aa>
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab3e:	f7f5 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d033      	beq.n	800abae <_printf_float+0x26a>
 800ab46:	2301      	movs	r3, #1
 800ab48:	4a41      	ldr	r2, [pc, #260]	; (800ac50 <_printf_float+0x30c>)
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f af54 	beq.w	800a9fe <_printf_float+0xba>
 800ab56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	db02      	blt.n	800ab64 <_printf_float+0x220>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	07d8      	lsls	r0, r3, #31
 800ab62:	d50f      	bpl.n	800ab84 <_printf_float+0x240>
 800ab64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f43f af45 	beq.w	800a9fe <_printf_float+0xba>
 800ab74:	f04f 0800 	mov.w	r8, #0
 800ab78:	f104 091a 	add.w	r9, r4, #26
 800ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	4543      	cmp	r3, r8
 800ab82:	dc09      	bgt.n	800ab98 <_printf_float+0x254>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	079b      	lsls	r3, r3, #30
 800ab88:	f100 8103 	bmi.w	800ad92 <_printf_float+0x44e>
 800ab8c:	68e0      	ldr	r0, [r4, #12]
 800ab8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab90:	4298      	cmp	r0, r3
 800ab92:	bfb8      	it	lt
 800ab94:	4618      	movlt	r0, r3
 800ab96:	e734      	b.n	800aa02 <_printf_float+0xbe>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	464a      	mov	r2, r9
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f af2b 	beq.w	800a9fe <_printf_float+0xba>
 800aba8:	f108 0801 	add.w	r8, r8, #1
 800abac:	e7e6      	b.n	800ab7c <_printf_float+0x238>
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	dc2b      	bgt.n	800ac0c <_printf_float+0x2c8>
 800abb4:	2301      	movs	r3, #1
 800abb6:	4a26      	ldr	r2, [pc, #152]	; (800ac50 <_printf_float+0x30c>)
 800abb8:	4631      	mov	r1, r6
 800abba:	4628      	mov	r0, r5
 800abbc:	47b8      	blx	r7
 800abbe:	3001      	adds	r0, #1
 800abc0:	f43f af1d 	beq.w	800a9fe <_printf_float+0xba>
 800abc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc6:	b923      	cbnz	r3, 800abd2 <_printf_float+0x28e>
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	b913      	cbnz	r3, 800abd2 <_printf_float+0x28e>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	07d9      	lsls	r1, r3, #31
 800abd0:	d5d8      	bpl.n	800ab84 <_printf_float+0x240>
 800abd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f af0e 	beq.w	800a9fe <_printf_float+0xba>
 800abe2:	f04f 0900 	mov.w	r9, #0
 800abe6:	f104 0a1a 	add.w	sl, r4, #26
 800abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abec:	425b      	negs	r3, r3
 800abee:	454b      	cmp	r3, r9
 800abf0:	dc01      	bgt.n	800abf6 <_printf_float+0x2b2>
 800abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf4:	e794      	b.n	800ab20 <_printf_float+0x1dc>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4652      	mov	r2, sl
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	f43f aefc 	beq.w	800a9fe <_printf_float+0xba>
 800ac06:	f109 0901 	add.w	r9, r9, #1
 800ac0a:	e7ee      	b.n	800abea <_printf_float+0x2a6>
 800ac0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac10:	429a      	cmp	r2, r3
 800ac12:	bfa8      	it	ge
 800ac14:	461a      	movge	r2, r3
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	4691      	mov	r9, r2
 800ac1a:	dd07      	ble.n	800ac2c <_printf_float+0x2e8>
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4642      	mov	r2, r8
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f aee9 	beq.w	800a9fe <_printf_float+0xba>
 800ac2c:	f104 031a 	add.w	r3, r4, #26
 800ac30:	f04f 0b00 	mov.w	fp, #0
 800ac34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac38:	9306      	str	r3, [sp, #24]
 800ac3a:	e015      	b.n	800ac68 <_printf_float+0x324>
 800ac3c:	7fefffff 	.word	0x7fefffff
 800ac40:	0800ca70 	.word	0x0800ca70
 800ac44:	0800ca6c 	.word	0x0800ca6c
 800ac48:	0800ca78 	.word	0x0800ca78
 800ac4c:	0800ca74 	.word	0x0800ca74
 800ac50:	0800ca7c 	.word	0x0800ca7c
 800ac54:	2301      	movs	r3, #1
 800ac56:	9a06      	ldr	r2, [sp, #24]
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f aecd 	beq.w	800a9fe <_printf_float+0xba>
 800ac64:	f10b 0b01 	add.w	fp, fp, #1
 800ac68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ac6c:	ebaa 0309 	sub.w	r3, sl, r9
 800ac70:	455b      	cmp	r3, fp
 800ac72:	dcef      	bgt.n	800ac54 <_printf_float+0x310>
 800ac74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	44d0      	add	r8, sl
 800ac7c:	db15      	blt.n	800acaa <_printf_float+0x366>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	07da      	lsls	r2, r3, #31
 800ac82:	d412      	bmi.n	800acaa <_printf_float+0x366>
 800ac84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac88:	eba3 020a 	sub.w	r2, r3, sl
 800ac8c:	eba3 0a01 	sub.w	sl, r3, r1
 800ac90:	4592      	cmp	sl, r2
 800ac92:	bfa8      	it	ge
 800ac94:	4692      	movge	sl, r2
 800ac96:	f1ba 0f00 	cmp.w	sl, #0
 800ac9a:	dc0e      	bgt.n	800acba <_printf_float+0x376>
 800ac9c:	f04f 0800 	mov.w	r8, #0
 800aca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aca4:	f104 091a 	add.w	r9, r4, #26
 800aca8:	e019      	b.n	800acde <_printf_float+0x39a>
 800acaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acae:	4631      	mov	r1, r6
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b8      	blx	r7
 800acb4:	3001      	adds	r0, #1
 800acb6:	d1e5      	bne.n	800ac84 <_printf_float+0x340>
 800acb8:	e6a1      	b.n	800a9fe <_printf_float+0xba>
 800acba:	4653      	mov	r3, sl
 800acbc:	4642      	mov	r2, r8
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	d1e9      	bne.n	800ac9c <_printf_float+0x358>
 800acc8:	e699      	b.n	800a9fe <_printf_float+0xba>
 800acca:	2301      	movs	r3, #1
 800accc:	464a      	mov	r2, r9
 800acce:	4631      	mov	r1, r6
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b8      	blx	r7
 800acd4:	3001      	adds	r0, #1
 800acd6:	f43f ae92 	beq.w	800a9fe <_printf_float+0xba>
 800acda:	f108 0801 	add.w	r8, r8, #1
 800acde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	eba3 030a 	sub.w	r3, r3, sl
 800ace8:	4543      	cmp	r3, r8
 800acea:	dcee      	bgt.n	800acca <_printf_float+0x386>
 800acec:	e74a      	b.n	800ab84 <_printf_float+0x240>
 800acee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acf0:	2a01      	cmp	r2, #1
 800acf2:	dc01      	bgt.n	800acf8 <_printf_float+0x3b4>
 800acf4:	07db      	lsls	r3, r3, #31
 800acf6:	d53a      	bpl.n	800ad6e <_printf_float+0x42a>
 800acf8:	2301      	movs	r3, #1
 800acfa:	4642      	mov	r2, r8
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	f43f ae7b 	beq.w	800a9fe <_printf_float+0xba>
 800ad08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4628      	mov	r0, r5
 800ad10:	47b8      	blx	r7
 800ad12:	3001      	adds	r0, #1
 800ad14:	f108 0801 	add.w	r8, r8, #1
 800ad18:	f43f ae71 	beq.w	800a9fe <_printf_float+0xba>
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f103 3aff 	add.w	sl, r3, #4294967295
 800ad24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f7f5 feed 	bl	8000b08 <__aeabi_dcmpeq>
 800ad2e:	b9c8      	cbnz	r0, 800ad64 <_printf_float+0x420>
 800ad30:	4653      	mov	r3, sl
 800ad32:	4642      	mov	r2, r8
 800ad34:	4631      	mov	r1, r6
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d10e      	bne.n	800ad5c <_printf_float+0x418>
 800ad3e:	e65e      	b.n	800a9fe <_printf_float+0xba>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4652      	mov	r2, sl
 800ad44:	4631      	mov	r1, r6
 800ad46:	4628      	mov	r0, r5
 800ad48:	47b8      	blx	r7
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	f43f ae57 	beq.w	800a9fe <_printf_float+0xba>
 800ad50:	f108 0801 	add.w	r8, r8, #1
 800ad54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4543      	cmp	r3, r8
 800ad5a:	dcf1      	bgt.n	800ad40 <_printf_float+0x3fc>
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad62:	e6de      	b.n	800ab22 <_printf_float+0x1de>
 800ad64:	f04f 0800 	mov.w	r8, #0
 800ad68:	f104 0a1a 	add.w	sl, r4, #26
 800ad6c:	e7f2      	b.n	800ad54 <_printf_float+0x410>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e7df      	b.n	800ad32 <_printf_float+0x3ee>
 800ad72:	2301      	movs	r3, #1
 800ad74:	464a      	mov	r2, r9
 800ad76:	4631      	mov	r1, r6
 800ad78:	4628      	mov	r0, r5
 800ad7a:	47b8      	blx	r7
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	f43f ae3e 	beq.w	800a9fe <_printf_float+0xba>
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	68e3      	ldr	r3, [r4, #12]
 800ad88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	4543      	cmp	r3, r8
 800ad8e:	dcf0      	bgt.n	800ad72 <_printf_float+0x42e>
 800ad90:	e6fc      	b.n	800ab8c <_printf_float+0x248>
 800ad92:	f04f 0800 	mov.w	r8, #0
 800ad96:	f104 0919 	add.w	r9, r4, #25
 800ad9a:	e7f4      	b.n	800ad86 <_printf_float+0x442>
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	f43f ae8b 	beq.w	800aab8 <_printf_float+0x174>
 800ada2:	2300      	movs	r3, #0
 800ada4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ada8:	ab09      	add	r3, sp, #36	; 0x24
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	ec49 8b10 	vmov	d0, r8, r9
 800adb0:	6022      	str	r2, [r4, #0]
 800adb2:	f8cd a004 	str.w	sl, [sp, #4]
 800adb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adba:	4628      	mov	r0, r5
 800adbc:	f7ff fd2e 	bl	800a81c <__cvt>
 800adc0:	4680      	mov	r8, r0
 800adc2:	e648      	b.n	800aa56 <_printf_float+0x112>

0800adc4 <_printf_common>:
 800adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc8:	4691      	mov	r9, r2
 800adca:	461f      	mov	r7, r3
 800adcc:	688a      	ldr	r2, [r1, #8]
 800adce:	690b      	ldr	r3, [r1, #16]
 800add0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800add4:	4293      	cmp	r3, r2
 800add6:	bfb8      	it	lt
 800add8:	4613      	movlt	r3, r2
 800adda:	f8c9 3000 	str.w	r3, [r9]
 800adde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ade2:	4606      	mov	r6, r0
 800ade4:	460c      	mov	r4, r1
 800ade6:	b112      	cbz	r2, 800adee <_printf_common+0x2a>
 800ade8:	3301      	adds	r3, #1
 800adea:	f8c9 3000 	str.w	r3, [r9]
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	0699      	lsls	r1, r3, #26
 800adf2:	bf42      	ittt	mi
 800adf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800adf8:	3302      	addmi	r3, #2
 800adfa:	f8c9 3000 	strmi.w	r3, [r9]
 800adfe:	6825      	ldr	r5, [r4, #0]
 800ae00:	f015 0506 	ands.w	r5, r5, #6
 800ae04:	d107      	bne.n	800ae16 <_printf_common+0x52>
 800ae06:	f104 0a19 	add.w	sl, r4, #25
 800ae0a:	68e3      	ldr	r3, [r4, #12]
 800ae0c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae10:	1a9b      	subs	r3, r3, r2
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	dc28      	bgt.n	800ae68 <_printf_common+0xa4>
 800ae16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	3300      	adds	r3, #0
 800ae1e:	bf18      	it	ne
 800ae20:	2301      	movne	r3, #1
 800ae22:	0692      	lsls	r2, r2, #26
 800ae24:	d42d      	bmi.n	800ae82 <_printf_common+0xbe>
 800ae26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	47c0      	blx	r8
 800ae30:	3001      	adds	r0, #1
 800ae32:	d020      	beq.n	800ae76 <_printf_common+0xb2>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	68e5      	ldr	r5, [r4, #12]
 800ae38:	f8d9 2000 	ldr.w	r2, [r9]
 800ae3c:	f003 0306 	and.w	r3, r3, #6
 800ae40:	2b04      	cmp	r3, #4
 800ae42:	bf08      	it	eq
 800ae44:	1aad      	subeq	r5, r5, r2
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	bf0c      	ite	eq
 800ae4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae50:	2500      	movne	r5, #0
 800ae52:	4293      	cmp	r3, r2
 800ae54:	bfc4      	itt	gt
 800ae56:	1a9b      	subgt	r3, r3, r2
 800ae58:	18ed      	addgt	r5, r5, r3
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	341a      	adds	r4, #26
 800ae60:	454d      	cmp	r5, r9
 800ae62:	d11a      	bne.n	800ae9a <_printf_common+0xd6>
 800ae64:	2000      	movs	r0, #0
 800ae66:	e008      	b.n	800ae7a <_printf_common+0xb6>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4652      	mov	r2, sl
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4630      	mov	r0, r6
 800ae70:	47c0      	blx	r8
 800ae72:	3001      	adds	r0, #1
 800ae74:	d103      	bne.n	800ae7e <_printf_common+0xba>
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7e:	3501      	adds	r5, #1
 800ae80:	e7c3      	b.n	800ae0a <_printf_common+0x46>
 800ae82:	18e1      	adds	r1, r4, r3
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	2030      	movs	r0, #48	; 0x30
 800ae88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae8c:	4422      	add	r2, r4
 800ae8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae96:	3302      	adds	r3, #2
 800ae98:	e7c5      	b.n	800ae26 <_printf_common+0x62>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4639      	mov	r1, r7
 800aea0:	4630      	mov	r0, r6
 800aea2:	47c0      	blx	r8
 800aea4:	3001      	adds	r0, #1
 800aea6:	d0e6      	beq.n	800ae76 <_printf_common+0xb2>
 800aea8:	f109 0901 	add.w	r9, r9, #1
 800aeac:	e7d8      	b.n	800ae60 <_printf_common+0x9c>
	...

0800aeb0 <_printf_i>:
 800aeb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aeb8:	460c      	mov	r4, r1
 800aeba:	7e09      	ldrb	r1, [r1, #24]
 800aebc:	b085      	sub	sp, #20
 800aebe:	296e      	cmp	r1, #110	; 0x6e
 800aec0:	4617      	mov	r7, r2
 800aec2:	4606      	mov	r6, r0
 800aec4:	4698      	mov	r8, r3
 800aec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aec8:	f000 80b3 	beq.w	800b032 <_printf_i+0x182>
 800aecc:	d822      	bhi.n	800af14 <_printf_i+0x64>
 800aece:	2963      	cmp	r1, #99	; 0x63
 800aed0:	d036      	beq.n	800af40 <_printf_i+0x90>
 800aed2:	d80a      	bhi.n	800aeea <_printf_i+0x3a>
 800aed4:	2900      	cmp	r1, #0
 800aed6:	f000 80b9 	beq.w	800b04c <_printf_i+0x19c>
 800aeda:	2958      	cmp	r1, #88	; 0x58
 800aedc:	f000 8083 	beq.w	800afe6 <_printf_i+0x136>
 800aee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aee4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800aee8:	e032      	b.n	800af50 <_printf_i+0xa0>
 800aeea:	2964      	cmp	r1, #100	; 0x64
 800aeec:	d001      	beq.n	800aef2 <_printf_i+0x42>
 800aeee:	2969      	cmp	r1, #105	; 0x69
 800aef0:	d1f6      	bne.n	800aee0 <_printf_i+0x30>
 800aef2:	6820      	ldr	r0, [r4, #0]
 800aef4:	6813      	ldr	r3, [r2, #0]
 800aef6:	0605      	lsls	r5, r0, #24
 800aef8:	f103 0104 	add.w	r1, r3, #4
 800aefc:	d52a      	bpl.n	800af54 <_printf_i+0xa4>
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6011      	str	r1, [r2, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	da03      	bge.n	800af0e <_printf_i+0x5e>
 800af06:	222d      	movs	r2, #45	; 0x2d
 800af08:	425b      	negs	r3, r3
 800af0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800af0e:	486f      	ldr	r0, [pc, #444]	; (800b0cc <_printf_i+0x21c>)
 800af10:	220a      	movs	r2, #10
 800af12:	e039      	b.n	800af88 <_printf_i+0xd8>
 800af14:	2973      	cmp	r1, #115	; 0x73
 800af16:	f000 809d 	beq.w	800b054 <_printf_i+0x1a4>
 800af1a:	d808      	bhi.n	800af2e <_printf_i+0x7e>
 800af1c:	296f      	cmp	r1, #111	; 0x6f
 800af1e:	d020      	beq.n	800af62 <_printf_i+0xb2>
 800af20:	2970      	cmp	r1, #112	; 0x70
 800af22:	d1dd      	bne.n	800aee0 <_printf_i+0x30>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	f043 0320 	orr.w	r3, r3, #32
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	e003      	b.n	800af36 <_printf_i+0x86>
 800af2e:	2975      	cmp	r1, #117	; 0x75
 800af30:	d017      	beq.n	800af62 <_printf_i+0xb2>
 800af32:	2978      	cmp	r1, #120	; 0x78
 800af34:	d1d4      	bne.n	800aee0 <_printf_i+0x30>
 800af36:	2378      	movs	r3, #120	; 0x78
 800af38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af3c:	4864      	ldr	r0, [pc, #400]	; (800b0d0 <_printf_i+0x220>)
 800af3e:	e055      	b.n	800afec <_printf_i+0x13c>
 800af40:	6813      	ldr	r3, [r2, #0]
 800af42:	1d19      	adds	r1, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6011      	str	r1, [r2, #0]
 800af48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af50:	2301      	movs	r3, #1
 800af52:	e08c      	b.n	800b06e <_printf_i+0x1be>
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6011      	str	r1, [r2, #0]
 800af58:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af5c:	bf18      	it	ne
 800af5e:	b21b      	sxthne	r3, r3
 800af60:	e7cf      	b.n	800af02 <_printf_i+0x52>
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	6825      	ldr	r5, [r4, #0]
 800af66:	1d18      	adds	r0, r3, #4
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	0628      	lsls	r0, r5, #24
 800af6c:	d501      	bpl.n	800af72 <_printf_i+0xc2>
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	e002      	b.n	800af78 <_printf_i+0xc8>
 800af72:	0668      	lsls	r0, r5, #25
 800af74:	d5fb      	bpl.n	800af6e <_printf_i+0xbe>
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	4854      	ldr	r0, [pc, #336]	; (800b0cc <_printf_i+0x21c>)
 800af7a:	296f      	cmp	r1, #111	; 0x6f
 800af7c:	bf14      	ite	ne
 800af7e:	220a      	movne	r2, #10
 800af80:	2208      	moveq	r2, #8
 800af82:	2100      	movs	r1, #0
 800af84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af88:	6865      	ldr	r5, [r4, #4]
 800af8a:	60a5      	str	r5, [r4, #8]
 800af8c:	2d00      	cmp	r5, #0
 800af8e:	f2c0 8095 	blt.w	800b0bc <_printf_i+0x20c>
 800af92:	6821      	ldr	r1, [r4, #0]
 800af94:	f021 0104 	bic.w	r1, r1, #4
 800af98:	6021      	str	r1, [r4, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d13d      	bne.n	800b01a <_printf_i+0x16a>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	f040 808e 	bne.w	800b0c0 <_printf_i+0x210>
 800afa4:	4665      	mov	r5, ip
 800afa6:	2a08      	cmp	r2, #8
 800afa8:	d10b      	bne.n	800afc2 <_printf_i+0x112>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	07db      	lsls	r3, r3, #31
 800afae:	d508      	bpl.n	800afc2 <_printf_i+0x112>
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	6862      	ldr	r2, [r4, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	bfde      	ittt	le
 800afb8:	2330      	movle	r3, #48	; 0x30
 800afba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afc2:	ebac 0305 	sub.w	r3, ip, r5
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	f8cd 8000 	str.w	r8, [sp]
 800afcc:	463b      	mov	r3, r7
 800afce:	aa03      	add	r2, sp, #12
 800afd0:	4621      	mov	r1, r4
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff fef6 	bl	800adc4 <_printf_common>
 800afd8:	3001      	adds	r0, #1
 800afda:	d14d      	bne.n	800b078 <_printf_i+0x1c8>
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	b005      	add	sp, #20
 800afe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afe6:	4839      	ldr	r0, [pc, #228]	; (800b0cc <_printf_i+0x21c>)
 800afe8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800afec:	6813      	ldr	r3, [r2, #0]
 800afee:	6821      	ldr	r1, [r4, #0]
 800aff0:	1d1d      	adds	r5, r3, #4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6015      	str	r5, [r2, #0]
 800aff6:	060a      	lsls	r2, r1, #24
 800aff8:	d50b      	bpl.n	800b012 <_printf_i+0x162>
 800affa:	07ca      	lsls	r2, r1, #31
 800affc:	bf44      	itt	mi
 800affe:	f041 0120 	orrmi.w	r1, r1, #32
 800b002:	6021      	strmi	r1, [r4, #0]
 800b004:	b91b      	cbnz	r3, 800b00e <_printf_i+0x15e>
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	f022 0220 	bic.w	r2, r2, #32
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	2210      	movs	r2, #16
 800b010:	e7b7      	b.n	800af82 <_printf_i+0xd2>
 800b012:	064d      	lsls	r5, r1, #25
 800b014:	bf48      	it	mi
 800b016:	b29b      	uxthmi	r3, r3
 800b018:	e7ef      	b.n	800affa <_printf_i+0x14a>
 800b01a:	4665      	mov	r5, ip
 800b01c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b020:	fb02 3311 	mls	r3, r2, r1, r3
 800b024:	5cc3      	ldrb	r3, [r0, r3]
 800b026:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b02a:	460b      	mov	r3, r1
 800b02c:	2900      	cmp	r1, #0
 800b02e:	d1f5      	bne.n	800b01c <_printf_i+0x16c>
 800b030:	e7b9      	b.n	800afa6 <_printf_i+0xf6>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	6825      	ldr	r5, [r4, #0]
 800b036:	6961      	ldr	r1, [r4, #20]
 800b038:	1d18      	adds	r0, r3, #4
 800b03a:	6010      	str	r0, [r2, #0]
 800b03c:	0628      	lsls	r0, r5, #24
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	d501      	bpl.n	800b046 <_printf_i+0x196>
 800b042:	6019      	str	r1, [r3, #0]
 800b044:	e002      	b.n	800b04c <_printf_i+0x19c>
 800b046:	066a      	lsls	r2, r5, #25
 800b048:	d5fb      	bpl.n	800b042 <_printf_i+0x192>
 800b04a:	8019      	strh	r1, [r3, #0]
 800b04c:	2300      	movs	r3, #0
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	4665      	mov	r5, ip
 800b052:	e7b9      	b.n	800afc8 <_printf_i+0x118>
 800b054:	6813      	ldr	r3, [r2, #0]
 800b056:	1d19      	adds	r1, r3, #4
 800b058:	6011      	str	r1, [r2, #0]
 800b05a:	681d      	ldr	r5, [r3, #0]
 800b05c:	6862      	ldr	r2, [r4, #4]
 800b05e:	2100      	movs	r1, #0
 800b060:	4628      	mov	r0, r5
 800b062:	f7f5 f8dd 	bl	8000220 <memchr>
 800b066:	b108      	cbz	r0, 800b06c <_printf_i+0x1bc>
 800b068:	1b40      	subs	r0, r0, r5
 800b06a:	6060      	str	r0, [r4, #4]
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	2300      	movs	r3, #0
 800b072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b076:	e7a7      	b.n	800afc8 <_printf_i+0x118>
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	462a      	mov	r2, r5
 800b07c:	4639      	mov	r1, r7
 800b07e:	4630      	mov	r0, r6
 800b080:	47c0      	blx	r8
 800b082:	3001      	adds	r0, #1
 800b084:	d0aa      	beq.n	800afdc <_printf_i+0x12c>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	079b      	lsls	r3, r3, #30
 800b08a:	d413      	bmi.n	800b0b4 <_printf_i+0x204>
 800b08c:	68e0      	ldr	r0, [r4, #12]
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	4298      	cmp	r0, r3
 800b092:	bfb8      	it	lt
 800b094:	4618      	movlt	r0, r3
 800b096:	e7a3      	b.n	800afe0 <_printf_i+0x130>
 800b098:	2301      	movs	r3, #1
 800b09a:	464a      	mov	r2, r9
 800b09c:	4639      	mov	r1, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	47c0      	blx	r8
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d09a      	beq.n	800afdc <_printf_i+0x12c>
 800b0a6:	3501      	adds	r5, #1
 800b0a8:	68e3      	ldr	r3, [r4, #12]
 800b0aa:	9a03      	ldr	r2, [sp, #12]
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	42ab      	cmp	r3, r5
 800b0b0:	dcf2      	bgt.n	800b098 <_printf_i+0x1e8>
 800b0b2:	e7eb      	b.n	800b08c <_printf_i+0x1dc>
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	f104 0919 	add.w	r9, r4, #25
 800b0ba:	e7f5      	b.n	800b0a8 <_printf_i+0x1f8>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1ac      	bne.n	800b01a <_printf_i+0x16a>
 800b0c0:	7803      	ldrb	r3, [r0, #0]
 800b0c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ca:	e76c      	b.n	800afa6 <_printf_i+0xf6>
 800b0cc:	0800ca7e 	.word	0x0800ca7e
 800b0d0:	0800ca8f 	.word	0x0800ca8f

0800b0d4 <siprintf>:
 800b0d4:	b40e      	push	{r1, r2, r3}
 800b0d6:	b500      	push	{lr}
 800b0d8:	b09c      	sub	sp, #112	; 0x70
 800b0da:	ab1d      	add	r3, sp, #116	; 0x74
 800b0dc:	9002      	str	r0, [sp, #8]
 800b0de:	9006      	str	r0, [sp, #24]
 800b0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0e4:	4809      	ldr	r0, [pc, #36]	; (800b10c <siprintf+0x38>)
 800b0e6:	9107      	str	r1, [sp, #28]
 800b0e8:	9104      	str	r1, [sp, #16]
 800b0ea:	4909      	ldr	r1, [pc, #36]	; (800b110 <siprintf+0x3c>)
 800b0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	6800      	ldr	r0, [r0, #0]
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	a902      	add	r1, sp, #8
 800b0f8:	f001 fb04 	bl	800c704 <_svfiprintf_r>
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	b01c      	add	sp, #112	; 0x70
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000020 	.word	0x20000020
 800b110:	ffff0208 	.word	0xffff0208

0800b114 <_strtol_l.isra.0>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	4680      	mov	r8, r0
 800b11a:	4689      	mov	r9, r1
 800b11c:	4692      	mov	sl, r2
 800b11e:	461e      	mov	r6, r3
 800b120:	460f      	mov	r7, r1
 800b122:	463d      	mov	r5, r7
 800b124:	9808      	ldr	r0, [sp, #32]
 800b126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b12a:	f000 fec9 	bl	800bec0 <__locale_ctype_ptr_l>
 800b12e:	4420      	add	r0, r4
 800b130:	7843      	ldrb	r3, [r0, #1]
 800b132:	f013 0308 	ands.w	r3, r3, #8
 800b136:	d132      	bne.n	800b19e <_strtol_l.isra.0+0x8a>
 800b138:	2c2d      	cmp	r4, #45	; 0x2d
 800b13a:	d132      	bne.n	800b1a2 <_strtol_l.isra.0+0x8e>
 800b13c:	787c      	ldrb	r4, [r7, #1]
 800b13e:	1cbd      	adds	r5, r7, #2
 800b140:	2201      	movs	r2, #1
 800b142:	2e00      	cmp	r6, #0
 800b144:	d05d      	beq.n	800b202 <_strtol_l.isra.0+0xee>
 800b146:	2e10      	cmp	r6, #16
 800b148:	d109      	bne.n	800b15e <_strtol_l.isra.0+0x4a>
 800b14a:	2c30      	cmp	r4, #48	; 0x30
 800b14c:	d107      	bne.n	800b15e <_strtol_l.isra.0+0x4a>
 800b14e:	782b      	ldrb	r3, [r5, #0]
 800b150:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b154:	2b58      	cmp	r3, #88	; 0x58
 800b156:	d14f      	bne.n	800b1f8 <_strtol_l.isra.0+0xe4>
 800b158:	786c      	ldrb	r4, [r5, #1]
 800b15a:	2610      	movs	r6, #16
 800b15c:	3502      	adds	r5, #2
 800b15e:	2a00      	cmp	r2, #0
 800b160:	bf14      	ite	ne
 800b162:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b166:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b16a:	2700      	movs	r7, #0
 800b16c:	fbb1 fcf6 	udiv	ip, r1, r6
 800b170:	4638      	mov	r0, r7
 800b172:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b176:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	d817      	bhi.n	800b1ae <_strtol_l.isra.0+0x9a>
 800b17e:	461c      	mov	r4, r3
 800b180:	42a6      	cmp	r6, r4
 800b182:	dd23      	ble.n	800b1cc <_strtol_l.isra.0+0xb8>
 800b184:	1c7b      	adds	r3, r7, #1
 800b186:	d007      	beq.n	800b198 <_strtol_l.isra.0+0x84>
 800b188:	4584      	cmp	ip, r0
 800b18a:	d31c      	bcc.n	800b1c6 <_strtol_l.isra.0+0xb2>
 800b18c:	d101      	bne.n	800b192 <_strtol_l.isra.0+0x7e>
 800b18e:	45a6      	cmp	lr, r4
 800b190:	db19      	blt.n	800b1c6 <_strtol_l.isra.0+0xb2>
 800b192:	fb00 4006 	mla	r0, r0, r6, r4
 800b196:	2701      	movs	r7, #1
 800b198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b19c:	e7eb      	b.n	800b176 <_strtol_l.isra.0+0x62>
 800b19e:	462f      	mov	r7, r5
 800b1a0:	e7bf      	b.n	800b122 <_strtol_l.isra.0+0xe>
 800b1a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a4:	bf04      	itt	eq
 800b1a6:	1cbd      	addeq	r5, r7, #2
 800b1a8:	787c      	ldrbeq	r4, [r7, #1]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	e7c9      	b.n	800b142 <_strtol_l.isra.0+0x2e>
 800b1ae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b1b2:	2b19      	cmp	r3, #25
 800b1b4:	d801      	bhi.n	800b1ba <_strtol_l.isra.0+0xa6>
 800b1b6:	3c37      	subs	r4, #55	; 0x37
 800b1b8:	e7e2      	b.n	800b180 <_strtol_l.isra.0+0x6c>
 800b1ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b1be:	2b19      	cmp	r3, #25
 800b1c0:	d804      	bhi.n	800b1cc <_strtol_l.isra.0+0xb8>
 800b1c2:	3c57      	subs	r4, #87	; 0x57
 800b1c4:	e7dc      	b.n	800b180 <_strtol_l.isra.0+0x6c>
 800b1c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b1ca:	e7e5      	b.n	800b198 <_strtol_l.isra.0+0x84>
 800b1cc:	1c7b      	adds	r3, r7, #1
 800b1ce:	d108      	bne.n	800b1e2 <_strtol_l.isra.0+0xce>
 800b1d0:	2322      	movs	r3, #34	; 0x22
 800b1d2:	f8c8 3000 	str.w	r3, [r8]
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	f1ba 0f00 	cmp.w	sl, #0
 800b1dc:	d107      	bne.n	800b1ee <_strtol_l.isra.0+0xda>
 800b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e2:	b102      	cbz	r2, 800b1e6 <_strtol_l.isra.0+0xd2>
 800b1e4:	4240      	negs	r0, r0
 800b1e6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ea:	d0f8      	beq.n	800b1de <_strtol_l.isra.0+0xca>
 800b1ec:	b10f      	cbz	r7, 800b1f2 <_strtol_l.isra.0+0xde>
 800b1ee:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1f2:	f8ca 9000 	str.w	r9, [sl]
 800b1f6:	e7f2      	b.n	800b1de <_strtol_l.isra.0+0xca>
 800b1f8:	2430      	movs	r4, #48	; 0x30
 800b1fa:	2e00      	cmp	r6, #0
 800b1fc:	d1af      	bne.n	800b15e <_strtol_l.isra.0+0x4a>
 800b1fe:	2608      	movs	r6, #8
 800b200:	e7ad      	b.n	800b15e <_strtol_l.isra.0+0x4a>
 800b202:	2c30      	cmp	r4, #48	; 0x30
 800b204:	d0a3      	beq.n	800b14e <_strtol_l.isra.0+0x3a>
 800b206:	260a      	movs	r6, #10
 800b208:	e7a9      	b.n	800b15e <_strtol_l.isra.0+0x4a>
	...

0800b20c <strtol>:
 800b20c:	4b08      	ldr	r3, [pc, #32]	; (800b230 <strtol+0x24>)
 800b20e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	4d08      	ldr	r5, [pc, #32]	; (800b234 <strtol+0x28>)
 800b214:	6a23      	ldr	r3, [r4, #32]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf08      	it	eq
 800b21a:	462b      	moveq	r3, r5
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4613      	mov	r3, r2
 800b220:	460a      	mov	r2, r1
 800b222:	4601      	mov	r1, r0
 800b224:	4620      	mov	r0, r4
 800b226:	f7ff ff75 	bl	800b114 <_strtol_l.isra.0>
 800b22a:	b003      	add	sp, #12
 800b22c:	bd30      	pop	{r4, r5, pc}
 800b22e:	bf00      	nop
 800b230:	20000020 	.word	0x20000020
 800b234:	20000084 	.word	0x20000084

0800b238 <quorem>:
 800b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	6903      	ldr	r3, [r0, #16]
 800b23e:	690c      	ldr	r4, [r1, #16]
 800b240:	42a3      	cmp	r3, r4
 800b242:	4680      	mov	r8, r0
 800b244:	f2c0 8082 	blt.w	800b34c <quorem+0x114>
 800b248:	3c01      	subs	r4, #1
 800b24a:	f101 0714 	add.w	r7, r1, #20
 800b24e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b252:	f100 0614 	add.w	r6, r0, #20
 800b256:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b25a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b25e:	eb06 030c 	add.w	r3, r6, ip
 800b262:	3501      	adds	r5, #1
 800b264:	eb07 090c 	add.w	r9, r7, ip
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b26e:	b395      	cbz	r5, 800b2d6 <quorem+0x9e>
 800b270:	f04f 0a00 	mov.w	sl, #0
 800b274:	4638      	mov	r0, r7
 800b276:	46b6      	mov	lr, r6
 800b278:	46d3      	mov	fp, sl
 800b27a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b27e:	b293      	uxth	r3, r2
 800b280:	fb05 a303 	mla	r3, r5, r3, sl
 800b284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b288:	b29b      	uxth	r3, r3
 800b28a:	ebab 0303 	sub.w	r3, fp, r3
 800b28e:	0c12      	lsrs	r2, r2, #16
 800b290:	f8de b000 	ldr.w	fp, [lr]
 800b294:	fb05 a202 	mla	r2, r5, r2, sl
 800b298:	fa13 f38b 	uxtah	r3, r3, fp
 800b29c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b2a0:	fa1f fb82 	uxth.w	fp, r2
 800b2a4:	f8de 2000 	ldr.w	r2, [lr]
 800b2a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2b6:	4581      	cmp	r9, r0
 800b2b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b2bc:	f84e 3b04 	str.w	r3, [lr], #4
 800b2c0:	d2db      	bcs.n	800b27a <quorem+0x42>
 800b2c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800b2c6:	b933      	cbnz	r3, 800b2d6 <quorem+0x9e>
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	3b04      	subs	r3, #4
 800b2cc:	429e      	cmp	r6, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	d330      	bcc.n	800b334 <quorem+0xfc>
 800b2d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f001 f83e 	bl	800c358 <__mcmp>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	db25      	blt.n	800b32c <quorem+0xf4>
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f04f 0c00 	mov.w	ip, #0
 800b2e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b2ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b2f0:	b293      	uxth	r3, r2
 800b2f2:	ebac 0303 	sub.w	r3, ip, r3
 800b2f6:	0c12      	lsrs	r2, r2, #16
 800b2f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b2fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b30a:	45b9      	cmp	r9, r7
 800b30c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b310:	f840 3b04 	str.w	r3, [r0], #4
 800b314:	d2e8      	bcs.n	800b2e8 <quorem+0xb0>
 800b316:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b31a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b31e:	b92a      	cbnz	r2, 800b32c <quorem+0xf4>
 800b320:	3b04      	subs	r3, #4
 800b322:	429e      	cmp	r6, r3
 800b324:	461a      	mov	r2, r3
 800b326:	d30b      	bcc.n	800b340 <quorem+0x108>
 800b328:	f8c8 4010 	str.w	r4, [r8, #16]
 800b32c:	4628      	mov	r0, r5
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	6812      	ldr	r2, [r2, #0]
 800b336:	3b04      	subs	r3, #4
 800b338:	2a00      	cmp	r2, #0
 800b33a:	d1ca      	bne.n	800b2d2 <quorem+0x9a>
 800b33c:	3c01      	subs	r4, #1
 800b33e:	e7c5      	b.n	800b2cc <quorem+0x94>
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	3b04      	subs	r3, #4
 800b344:	2a00      	cmp	r2, #0
 800b346:	d1ef      	bne.n	800b328 <quorem+0xf0>
 800b348:	3c01      	subs	r4, #1
 800b34a:	e7ea      	b.n	800b322 <quorem+0xea>
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7ee      	b.n	800b32e <quorem+0xf6>

0800b350 <_dtoa_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ec57 6b10 	vmov	r6, r7, d0
 800b358:	b097      	sub	sp, #92	; 0x5c
 800b35a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b35c:	9106      	str	r1, [sp, #24]
 800b35e:	4604      	mov	r4, r0
 800b360:	920b      	str	r2, [sp, #44]	; 0x2c
 800b362:	9312      	str	r3, [sp, #72]	; 0x48
 800b364:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b368:	e9cd 6700 	strd	r6, r7, [sp]
 800b36c:	b93d      	cbnz	r5, 800b37e <_dtoa_r+0x2e>
 800b36e:	2010      	movs	r0, #16
 800b370:	f000 fdb8 	bl	800bee4 <malloc>
 800b374:	6260      	str	r0, [r4, #36]	; 0x24
 800b376:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b37a:	6005      	str	r5, [r0, #0]
 800b37c:	60c5      	str	r5, [r0, #12]
 800b37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	b151      	cbz	r1, 800b39a <_dtoa_r+0x4a>
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	604a      	str	r2, [r1, #4]
 800b388:	2301      	movs	r3, #1
 800b38a:	4093      	lsls	r3, r2
 800b38c:	608b      	str	r3, [r1, #8]
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fe01 	bl	800bf96 <_Bfree>
 800b394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	1e3b      	subs	r3, r7, #0
 800b39c:	bfbb      	ittet	lt
 800b39e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3a2:	9301      	strlt	r3, [sp, #4]
 800b3a4:	2300      	movge	r3, #0
 800b3a6:	2201      	movlt	r2, #1
 800b3a8:	bfac      	ite	ge
 800b3aa:	f8c8 3000 	strge.w	r3, [r8]
 800b3ae:	f8c8 2000 	strlt.w	r2, [r8]
 800b3b2:	4baf      	ldr	r3, [pc, #700]	; (800b670 <_dtoa_r+0x320>)
 800b3b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3b8:	ea33 0308 	bics.w	r3, r3, r8
 800b3bc:	d114      	bne.n	800b3e8 <_dtoa_r+0x98>
 800b3be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	9b00      	ldr	r3, [sp, #0]
 800b3c8:	b923      	cbnz	r3, 800b3d4 <_dtoa_r+0x84>
 800b3ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f000 8542 	beq.w	800be58 <_dtoa_r+0xb08>
 800b3d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b684 <_dtoa_r+0x334>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8544 	beq.w	800be68 <_dtoa_r+0xb18>
 800b3e0:	f10b 0303 	add.w	r3, fp, #3
 800b3e4:	f000 bd3e 	b.w	800be64 <_dtoa_r+0xb14>
 800b3e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f5 fb88 	bl	8000b08 <__aeabi_dcmpeq>
 800b3f8:	4681      	mov	r9, r0
 800b3fa:	b168      	cbz	r0, 800b418 <_dtoa_r+0xc8>
 800b3fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3fe:	2301      	movs	r3, #1
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8524 	beq.w	800be52 <_dtoa_r+0xb02>
 800b40a:	4b9a      	ldr	r3, [pc, #616]	; (800b674 <_dtoa_r+0x324>)
 800b40c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b40e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	f000 bd28 	b.w	800be68 <_dtoa_r+0xb18>
 800b418:	aa14      	add	r2, sp, #80	; 0x50
 800b41a:	a915      	add	r1, sp, #84	; 0x54
 800b41c:	ec47 6b10 	vmov	d0, r6, r7
 800b420:	4620      	mov	r0, r4
 800b422:	f001 f810 	bl	800c446 <__d2b>
 800b426:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b42a:	9004      	str	r0, [sp, #16]
 800b42c:	2d00      	cmp	r5, #0
 800b42e:	d07c      	beq.n	800b52a <_dtoa_r+0x1da>
 800b430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b434:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b438:	46b2      	mov	sl, r6
 800b43a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b43e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b442:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b446:	2200      	movs	r2, #0
 800b448:	4b8b      	ldr	r3, [pc, #556]	; (800b678 <_dtoa_r+0x328>)
 800b44a:	4650      	mov	r0, sl
 800b44c:	4659      	mov	r1, fp
 800b44e:	f7f4 ff3b 	bl	80002c8 <__aeabi_dsub>
 800b452:	a381      	add	r3, pc, #516	; (adr r3, 800b658 <_dtoa_r+0x308>)
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f7f5 f8ee 	bl	8000638 <__aeabi_dmul>
 800b45c:	a380      	add	r3, pc, #512	; (adr r3, 800b660 <_dtoa_r+0x310>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	f7f4 ff33 	bl	80002cc <__adddf3>
 800b466:	4606      	mov	r6, r0
 800b468:	4628      	mov	r0, r5
 800b46a:	460f      	mov	r7, r1
 800b46c:	f7f5 f87a 	bl	8000564 <__aeabi_i2d>
 800b470:	a37d      	add	r3, pc, #500	; (adr r3, 800b668 <_dtoa_r+0x318>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f5 f8df 	bl	8000638 <__aeabi_dmul>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f4 ff23 	bl	80002cc <__adddf3>
 800b486:	4606      	mov	r6, r0
 800b488:	460f      	mov	r7, r1
 800b48a:	f7f5 fb85 	bl	8000b98 <__aeabi_d2iz>
 800b48e:	2200      	movs	r2, #0
 800b490:	4682      	mov	sl, r0
 800b492:	2300      	movs	r3, #0
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 fb40 	bl	8000b1c <__aeabi_dcmplt>
 800b49c:	b148      	cbz	r0, 800b4b2 <_dtoa_r+0x162>
 800b49e:	4650      	mov	r0, sl
 800b4a0:	f7f5 f860 	bl	8000564 <__aeabi_i2d>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f5 fb2e 	bl	8000b08 <__aeabi_dcmpeq>
 800b4ac:	b908      	cbnz	r0, 800b4b2 <_dtoa_r+0x162>
 800b4ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4b2:	f1ba 0f16 	cmp.w	sl, #22
 800b4b6:	d859      	bhi.n	800b56c <_dtoa_r+0x21c>
 800b4b8:	4970      	ldr	r1, [pc, #448]	; (800b67c <_dtoa_r+0x32c>)
 800b4ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b4be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c6:	f7f5 fb47 	bl	8000b58 <__aeabi_dcmpgt>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d050      	beq.n	800b570 <_dtoa_r+0x220>
 800b4ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4d8:	1b5d      	subs	r5, r3, r5
 800b4da:	f1b5 0801 	subs.w	r8, r5, #1
 800b4de:	bf49      	itett	mi
 800b4e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4e4:	2300      	movpl	r3, #0
 800b4e6:	9305      	strmi	r3, [sp, #20]
 800b4e8:	f04f 0800 	movmi.w	r8, #0
 800b4ec:	bf58      	it	pl
 800b4ee:	9305      	strpl	r3, [sp, #20]
 800b4f0:	f1ba 0f00 	cmp.w	sl, #0
 800b4f4:	db3e      	blt.n	800b574 <_dtoa_r+0x224>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	44d0      	add	r8, sl
 800b4fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	9b06      	ldr	r3, [sp, #24]
 800b502:	2b09      	cmp	r3, #9
 800b504:	f200 8090 	bhi.w	800b628 <_dtoa_r+0x2d8>
 800b508:	2b05      	cmp	r3, #5
 800b50a:	bfc4      	itt	gt
 800b50c:	3b04      	subgt	r3, #4
 800b50e:	9306      	strgt	r3, [sp, #24]
 800b510:	9b06      	ldr	r3, [sp, #24]
 800b512:	f1a3 0302 	sub.w	r3, r3, #2
 800b516:	bfcc      	ite	gt
 800b518:	2500      	movgt	r5, #0
 800b51a:	2501      	movle	r5, #1
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	f200 808f 	bhi.w	800b640 <_dtoa_r+0x2f0>
 800b522:	e8df f003 	tbb	[pc, r3]
 800b526:	7f7d      	.short	0x7f7d
 800b528:	7131      	.short	0x7131
 800b52a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b52e:	441d      	add	r5, r3
 800b530:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b534:	2820      	cmp	r0, #32
 800b536:	dd13      	ble.n	800b560 <_dtoa_r+0x210>
 800b538:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b53c:	9b00      	ldr	r3, [sp, #0]
 800b53e:	fa08 f800 	lsl.w	r8, r8, r0
 800b542:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b546:	fa23 f000 	lsr.w	r0, r3, r0
 800b54a:	ea48 0000 	orr.w	r0, r8, r0
 800b54e:	f7f4 fff9 	bl	8000544 <__aeabi_ui2d>
 800b552:	2301      	movs	r3, #1
 800b554:	4682      	mov	sl, r0
 800b556:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b55a:	3d01      	subs	r5, #1
 800b55c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b55e:	e772      	b.n	800b446 <_dtoa_r+0xf6>
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	f1c0 0020 	rsb	r0, r0, #32
 800b566:	fa03 f000 	lsl.w	r0, r3, r0
 800b56a:	e7f0      	b.n	800b54e <_dtoa_r+0x1fe>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e7b1      	b.n	800b4d4 <_dtoa_r+0x184>
 800b570:	900f      	str	r0, [sp, #60]	; 0x3c
 800b572:	e7b0      	b.n	800b4d6 <_dtoa_r+0x186>
 800b574:	9b05      	ldr	r3, [sp, #20]
 800b576:	eba3 030a 	sub.w	r3, r3, sl
 800b57a:	9305      	str	r3, [sp, #20]
 800b57c:	f1ca 0300 	rsb	r3, sl, #0
 800b580:	9307      	str	r3, [sp, #28]
 800b582:	2300      	movs	r3, #0
 800b584:	930e      	str	r3, [sp, #56]	; 0x38
 800b586:	e7bb      	b.n	800b500 <_dtoa_r+0x1b0>
 800b588:	2301      	movs	r3, #1
 800b58a:	930a      	str	r3, [sp, #40]	; 0x28
 800b58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dd59      	ble.n	800b646 <_dtoa_r+0x2f6>
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	4699      	mov	r9, r3
 800b596:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b598:	2200      	movs	r2, #0
 800b59a:	6072      	str	r2, [r6, #4]
 800b59c:	2204      	movs	r2, #4
 800b59e:	f102 0014 	add.w	r0, r2, #20
 800b5a2:	4298      	cmp	r0, r3
 800b5a4:	6871      	ldr	r1, [r6, #4]
 800b5a6:	d953      	bls.n	800b650 <_dtoa_r+0x300>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fcc0 	bl	800bf2e <_Balloc>
 800b5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	f1b9 0f0e 	cmp.w	r9, #14
 800b5b6:	f8d3 b000 	ldr.w	fp, [r3]
 800b5ba:	f200 80e6 	bhi.w	800b78a <_dtoa_r+0x43a>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	f000 80e3 	beq.w	800b78a <_dtoa_r+0x43a>
 800b5c4:	ed9d 7b00 	vldr	d7, [sp]
 800b5c8:	f1ba 0f00 	cmp.w	sl, #0
 800b5cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b5d0:	dd74      	ble.n	800b6bc <_dtoa_r+0x36c>
 800b5d2:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <_dtoa_r+0x32c>)
 800b5d4:	f00a 030f 	and.w	r3, sl, #15
 800b5d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5dc:	ed93 7b00 	vldr	d7, [r3]
 800b5e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b5e4:	06f0      	lsls	r0, r6, #27
 800b5e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b5ea:	d565      	bpl.n	800b6b8 <_dtoa_r+0x368>
 800b5ec:	4b24      	ldr	r3, [pc, #144]	; (800b680 <_dtoa_r+0x330>)
 800b5ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5f6:	f7f5 f949 	bl	800088c <__aeabi_ddiv>
 800b5fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b5fe:	f006 060f 	and.w	r6, r6, #15
 800b602:	2503      	movs	r5, #3
 800b604:	4f1e      	ldr	r7, [pc, #120]	; (800b680 <_dtoa_r+0x330>)
 800b606:	e04c      	b.n	800b6a2 <_dtoa_r+0x352>
 800b608:	2301      	movs	r3, #1
 800b60a:	930a      	str	r3, [sp, #40]	; 0x28
 800b60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b60e:	4453      	add	r3, sl
 800b610:	f103 0901 	add.w	r9, r3, #1
 800b614:	9302      	str	r3, [sp, #8]
 800b616:	464b      	mov	r3, r9
 800b618:	2b01      	cmp	r3, #1
 800b61a:	bfb8      	it	lt
 800b61c:	2301      	movlt	r3, #1
 800b61e:	e7ba      	b.n	800b596 <_dtoa_r+0x246>
 800b620:	2300      	movs	r3, #0
 800b622:	e7b2      	b.n	800b58a <_dtoa_r+0x23a>
 800b624:	2300      	movs	r3, #0
 800b626:	e7f0      	b.n	800b60a <_dtoa_r+0x2ba>
 800b628:	2501      	movs	r5, #1
 800b62a:	2300      	movs	r3, #0
 800b62c:	9306      	str	r3, [sp, #24]
 800b62e:	950a      	str	r5, [sp, #40]	; 0x28
 800b630:	f04f 33ff 	mov.w	r3, #4294967295
 800b634:	9302      	str	r3, [sp, #8]
 800b636:	4699      	mov	r9, r3
 800b638:	2200      	movs	r2, #0
 800b63a:	2312      	movs	r3, #18
 800b63c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b63e:	e7aa      	b.n	800b596 <_dtoa_r+0x246>
 800b640:	2301      	movs	r3, #1
 800b642:	930a      	str	r3, [sp, #40]	; 0x28
 800b644:	e7f4      	b.n	800b630 <_dtoa_r+0x2e0>
 800b646:	2301      	movs	r3, #1
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	4699      	mov	r9, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	e7f5      	b.n	800b63c <_dtoa_r+0x2ec>
 800b650:	3101      	adds	r1, #1
 800b652:	6071      	str	r1, [r6, #4]
 800b654:	0052      	lsls	r2, r2, #1
 800b656:	e7a2      	b.n	800b59e <_dtoa_r+0x24e>
 800b658:	636f4361 	.word	0x636f4361
 800b65c:	3fd287a7 	.word	0x3fd287a7
 800b660:	8b60c8b3 	.word	0x8b60c8b3
 800b664:	3fc68a28 	.word	0x3fc68a28
 800b668:	509f79fb 	.word	0x509f79fb
 800b66c:	3fd34413 	.word	0x3fd34413
 800b670:	7ff00000 	.word	0x7ff00000
 800b674:	0800ca7d 	.word	0x0800ca7d
 800b678:	3ff80000 	.word	0x3ff80000
 800b67c:	0800cae0 	.word	0x0800cae0
 800b680:	0800cab8 	.word	0x0800cab8
 800b684:	0800caa9 	.word	0x0800caa9
 800b688:	07f1      	lsls	r1, r6, #31
 800b68a:	d508      	bpl.n	800b69e <_dtoa_r+0x34e>
 800b68c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b694:	f7f4 ffd0 	bl	8000638 <__aeabi_dmul>
 800b698:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b69c:	3501      	adds	r5, #1
 800b69e:	1076      	asrs	r6, r6, #1
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	2e00      	cmp	r6, #0
 800b6a4:	d1f0      	bne.n	800b688 <_dtoa_r+0x338>
 800b6a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ae:	f7f5 f8ed 	bl	800088c <__aeabi_ddiv>
 800b6b2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6b6:	e01a      	b.n	800b6ee <_dtoa_r+0x39e>
 800b6b8:	2502      	movs	r5, #2
 800b6ba:	e7a3      	b.n	800b604 <_dtoa_r+0x2b4>
 800b6bc:	f000 80a0 	beq.w	800b800 <_dtoa_r+0x4b0>
 800b6c0:	f1ca 0600 	rsb	r6, sl, #0
 800b6c4:	4b9f      	ldr	r3, [pc, #636]	; (800b944 <_dtoa_r+0x5f4>)
 800b6c6:	4fa0      	ldr	r7, [pc, #640]	; (800b948 <_dtoa_r+0x5f8>)
 800b6c8:	f006 020f 	and.w	r2, r6, #15
 800b6cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6d8:	f7f4 ffae 	bl	8000638 <__aeabi_dmul>
 800b6dc:	e9cd 0100 	strd	r0, r1, [sp]
 800b6e0:	1136      	asrs	r6, r6, #4
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2502      	movs	r5, #2
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	d17f      	bne.n	800b7ea <_dtoa_r+0x49a>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e1      	bne.n	800b6b2 <_dtoa_r+0x362>
 800b6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 8087 	beq.w	800b804 <_dtoa_r+0x4b4>
 800b6f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4b93      	ldr	r3, [pc, #588]	; (800b94c <_dtoa_r+0x5fc>)
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f5 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d07c      	beq.n	800b804 <_dtoa_r+0x4b4>
 800b70a:	f1b9 0f00 	cmp.w	r9, #0
 800b70e:	d079      	beq.n	800b804 <_dtoa_r+0x4b4>
 800b710:	9b02      	ldr	r3, [sp, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	dd35      	ble.n	800b782 <_dtoa_r+0x432>
 800b716:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b71a:	9308      	str	r3, [sp, #32]
 800b71c:	4639      	mov	r1, r7
 800b71e:	2200      	movs	r2, #0
 800b720:	4b8b      	ldr	r3, [pc, #556]	; (800b950 <_dtoa_r+0x600>)
 800b722:	4630      	mov	r0, r6
 800b724:	f7f4 ff88 	bl	8000638 <__aeabi_dmul>
 800b728:	e9cd 0100 	strd	r0, r1, [sp]
 800b72c:	9f02      	ldr	r7, [sp, #8]
 800b72e:	3501      	adds	r5, #1
 800b730:	4628      	mov	r0, r5
 800b732:	f7f4 ff17 	bl	8000564 <__aeabi_i2d>
 800b736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b73a:	f7f4 ff7d 	bl	8000638 <__aeabi_dmul>
 800b73e:	2200      	movs	r2, #0
 800b740:	4b84      	ldr	r3, [pc, #528]	; (800b954 <_dtoa_r+0x604>)
 800b742:	f7f4 fdc3 	bl	80002cc <__adddf3>
 800b746:	4605      	mov	r5, r0
 800b748:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b74c:	2f00      	cmp	r7, #0
 800b74e:	d15d      	bne.n	800b80c <_dtoa_r+0x4bc>
 800b750:	2200      	movs	r2, #0
 800b752:	4b81      	ldr	r3, [pc, #516]	; (800b958 <_dtoa_r+0x608>)
 800b754:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b758:	f7f4 fdb6 	bl	80002c8 <__aeabi_dsub>
 800b75c:	462a      	mov	r2, r5
 800b75e:	4633      	mov	r3, r6
 800b760:	e9cd 0100 	strd	r0, r1, [sp]
 800b764:	f7f5 f9f8 	bl	8000b58 <__aeabi_dcmpgt>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f040 8288 	bne.w	800bc7e <_dtoa_r+0x92e>
 800b76e:	462a      	mov	r2, r5
 800b770:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b778:	f7f5 f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f040 827c 	bne.w	800bc7a <_dtoa_r+0x92a>
 800b782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b786:	e9cd 2300 	strd	r2, r3, [sp]
 800b78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f2c0 8150 	blt.w	800ba32 <_dtoa_r+0x6e2>
 800b792:	f1ba 0f0e 	cmp.w	sl, #14
 800b796:	f300 814c 	bgt.w	800ba32 <_dtoa_r+0x6e2>
 800b79a:	4b6a      	ldr	r3, [pc, #424]	; (800b944 <_dtoa_r+0x5f4>)
 800b79c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7a0:	ed93 7b00 	vldr	d7, [r3]
 800b7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7ac:	f280 80d8 	bge.w	800b960 <_dtoa_r+0x610>
 800b7b0:	f1b9 0f00 	cmp.w	r9, #0
 800b7b4:	f300 80d4 	bgt.w	800b960 <_dtoa_r+0x610>
 800b7b8:	f040 825e 	bne.w	800bc78 <_dtoa_r+0x928>
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4b66      	ldr	r3, [pc, #408]	; (800b958 <_dtoa_r+0x608>)
 800b7c0:	ec51 0b17 	vmov	r0, r1, d7
 800b7c4:	f7f4 ff38 	bl	8000638 <__aeabi_dmul>
 800b7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7cc:	f7f5 f9ba 	bl	8000b44 <__aeabi_dcmpge>
 800b7d0:	464f      	mov	r7, r9
 800b7d2:	464e      	mov	r6, r9
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	f040 8234 	bne.w	800bc42 <_dtoa_r+0x8f2>
 800b7da:	2331      	movs	r3, #49	; 0x31
 800b7dc:	f10b 0501 	add.w	r5, fp, #1
 800b7e0:	f88b 3000 	strb.w	r3, [fp]
 800b7e4:	f10a 0a01 	add.w	sl, sl, #1
 800b7e8:	e22f      	b.n	800bc4a <_dtoa_r+0x8fa>
 800b7ea:	07f2      	lsls	r2, r6, #31
 800b7ec:	d505      	bpl.n	800b7fa <_dtoa_r+0x4aa>
 800b7ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7f2:	f7f4 ff21 	bl	8000638 <__aeabi_dmul>
 800b7f6:	3501      	adds	r5, #1
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	1076      	asrs	r6, r6, #1
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	e772      	b.n	800b6e6 <_dtoa_r+0x396>
 800b800:	2502      	movs	r5, #2
 800b802:	e774      	b.n	800b6ee <_dtoa_r+0x39e>
 800b804:	f8cd a020 	str.w	sl, [sp, #32]
 800b808:	464f      	mov	r7, r9
 800b80a:	e791      	b.n	800b730 <_dtoa_r+0x3e0>
 800b80c:	4b4d      	ldr	r3, [pc, #308]	; (800b944 <_dtoa_r+0x5f4>)
 800b80e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b812:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d047      	beq.n	800b8ac <_dtoa_r+0x55c>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	2000      	movs	r0, #0
 800b822:	494e      	ldr	r1, [pc, #312]	; (800b95c <_dtoa_r+0x60c>)
 800b824:	f7f5 f832 	bl	800088c <__aeabi_ddiv>
 800b828:	462a      	mov	r2, r5
 800b82a:	4633      	mov	r3, r6
 800b82c:	f7f4 fd4c 	bl	80002c8 <__aeabi_dsub>
 800b830:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b834:	465d      	mov	r5, fp
 800b836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b83a:	f7f5 f9ad 	bl	8000b98 <__aeabi_d2iz>
 800b83e:	4606      	mov	r6, r0
 800b840:	f7f4 fe90 	bl	8000564 <__aeabi_i2d>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b84c:	f7f4 fd3c 	bl	80002c8 <__aeabi_dsub>
 800b850:	3630      	adds	r6, #48	; 0x30
 800b852:	f805 6b01 	strb.w	r6, [r5], #1
 800b856:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b85a:	e9cd 0100 	strd	r0, r1, [sp]
 800b85e:	f7f5 f95d 	bl	8000b1c <__aeabi_dcmplt>
 800b862:	2800      	cmp	r0, #0
 800b864:	d163      	bne.n	800b92e <_dtoa_r+0x5de>
 800b866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b86a:	2000      	movs	r0, #0
 800b86c:	4937      	ldr	r1, [pc, #220]	; (800b94c <_dtoa_r+0x5fc>)
 800b86e:	f7f4 fd2b 	bl	80002c8 <__aeabi_dsub>
 800b872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b876:	f7f5 f951 	bl	8000b1c <__aeabi_dcmplt>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f040 80b7 	bne.w	800b9ee <_dtoa_r+0x69e>
 800b880:	eba5 030b 	sub.w	r3, r5, fp
 800b884:	429f      	cmp	r7, r3
 800b886:	f77f af7c 	ble.w	800b782 <_dtoa_r+0x432>
 800b88a:	2200      	movs	r2, #0
 800b88c:	4b30      	ldr	r3, [pc, #192]	; (800b950 <_dtoa_r+0x600>)
 800b88e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b892:	f7f4 fed1 	bl	8000638 <__aeabi_dmul>
 800b896:	2200      	movs	r2, #0
 800b898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b89c:	4b2c      	ldr	r3, [pc, #176]	; (800b950 <_dtoa_r+0x600>)
 800b89e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8a2:	f7f4 fec9 	bl	8000638 <__aeabi_dmul>
 800b8a6:	e9cd 0100 	strd	r0, r1, [sp]
 800b8aa:	e7c4      	b.n	800b836 <_dtoa_r+0x4e6>
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	4633      	mov	r3, r6
 800b8b0:	f7f4 fec2 	bl	8000638 <__aeabi_dmul>
 800b8b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b8b8:	eb0b 0507 	add.w	r5, fp, r7
 800b8bc:	465e      	mov	r6, fp
 800b8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c2:	f7f5 f969 	bl	8000b98 <__aeabi_d2iz>
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	f7f4 fe4c 	bl	8000564 <__aeabi_i2d>
 800b8cc:	3730      	adds	r7, #48	; 0x30
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8d6:	f7f4 fcf7 	bl	80002c8 <__aeabi_dsub>
 800b8da:	f806 7b01 	strb.w	r7, [r6], #1
 800b8de:	42ae      	cmp	r6, r5
 800b8e0:	e9cd 0100 	strd	r0, r1, [sp]
 800b8e4:	f04f 0200 	mov.w	r2, #0
 800b8e8:	d126      	bne.n	800b938 <_dtoa_r+0x5e8>
 800b8ea:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <_dtoa_r+0x60c>)
 800b8ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8f0:	f7f4 fcec 	bl	80002cc <__adddf3>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8fc:	f7f5 f92c 	bl	8000b58 <__aeabi_dcmpgt>
 800b900:	2800      	cmp	r0, #0
 800b902:	d174      	bne.n	800b9ee <_dtoa_r+0x69e>
 800b904:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b908:	2000      	movs	r0, #0
 800b90a:	4914      	ldr	r1, [pc, #80]	; (800b95c <_dtoa_r+0x60c>)
 800b90c:	f7f4 fcdc 	bl	80002c8 <__aeabi_dsub>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b918:	f7f5 f900 	bl	8000b1c <__aeabi_dcmplt>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f43f af30 	beq.w	800b782 <_dtoa_r+0x432>
 800b922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b926:	2b30      	cmp	r3, #48	; 0x30
 800b928:	f105 32ff 	add.w	r2, r5, #4294967295
 800b92c:	d002      	beq.n	800b934 <_dtoa_r+0x5e4>
 800b92e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b932:	e04a      	b.n	800b9ca <_dtoa_r+0x67a>
 800b934:	4615      	mov	r5, r2
 800b936:	e7f4      	b.n	800b922 <_dtoa_r+0x5d2>
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <_dtoa_r+0x600>)
 800b93a:	f7f4 fe7d 	bl	8000638 <__aeabi_dmul>
 800b93e:	e9cd 0100 	strd	r0, r1, [sp]
 800b942:	e7bc      	b.n	800b8be <_dtoa_r+0x56e>
 800b944:	0800cae0 	.word	0x0800cae0
 800b948:	0800cab8 	.word	0x0800cab8
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	40240000 	.word	0x40240000
 800b954:	401c0000 	.word	0x401c0000
 800b958:	40140000 	.word	0x40140000
 800b95c:	3fe00000 	.word	0x3fe00000
 800b960:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b964:	465d      	mov	r5, fp
 800b966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f4 ff8d 	bl	800088c <__aeabi_ddiv>
 800b972:	f7f5 f911 	bl	8000b98 <__aeabi_d2iz>
 800b976:	4680      	mov	r8, r0
 800b978:	f7f4 fdf4 	bl	8000564 <__aeabi_i2d>
 800b97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b980:	f7f4 fe5a 	bl	8000638 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b990:	f7f4 fc9a 	bl	80002c8 <__aeabi_dsub>
 800b994:	f805 6b01 	strb.w	r6, [r5], #1
 800b998:	eba5 060b 	sub.w	r6, r5, fp
 800b99c:	45b1      	cmp	r9, r6
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	d139      	bne.n	800ba18 <_dtoa_r+0x6c8>
 800b9a4:	f7f4 fc92 	bl	80002cc <__adddf3>
 800b9a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	460f      	mov	r7, r1
 800b9b0:	f7f5 f8d2 	bl	8000b58 <__aeabi_dcmpgt>
 800b9b4:	b9c8      	cbnz	r0, 800b9ea <_dtoa_r+0x69a>
 800b9b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f5 f8a3 	bl	8000b08 <__aeabi_dcmpeq>
 800b9c2:	b110      	cbz	r0, 800b9ca <_dtoa_r+0x67a>
 800b9c4:	f018 0f01 	tst.w	r8, #1
 800b9c8:	d10f      	bne.n	800b9ea <_dtoa_r+0x69a>
 800b9ca:	9904      	ldr	r1, [sp, #16]
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 fae2 	bl	800bf96 <_Bfree>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9d6:	702b      	strb	r3, [r5, #0]
 800b9d8:	f10a 0301 	add.w	r3, sl, #1
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 8241 	beq.w	800be68 <_dtoa_r+0xb18>
 800b9e6:	601d      	str	r5, [r3, #0]
 800b9e8:	e23e      	b.n	800be68 <_dtoa_r+0xb18>
 800b9ea:	f8cd a020 	str.w	sl, [sp, #32]
 800b9ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9f2:	2a39      	cmp	r2, #57	; 0x39
 800b9f4:	f105 33ff 	add.w	r3, r5, #4294967295
 800b9f8:	d108      	bne.n	800ba0c <_dtoa_r+0x6bc>
 800b9fa:	459b      	cmp	fp, r3
 800b9fc:	d10a      	bne.n	800ba14 <_dtoa_r+0x6c4>
 800b9fe:	9b08      	ldr	r3, [sp, #32]
 800ba00:	3301      	adds	r3, #1
 800ba02:	9308      	str	r3, [sp, #32]
 800ba04:	2330      	movs	r3, #48	; 0x30
 800ba06:	f88b 3000 	strb.w	r3, [fp]
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	781a      	ldrb	r2, [r3, #0]
 800ba0e:	3201      	adds	r2, #1
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	e78c      	b.n	800b92e <_dtoa_r+0x5de>
 800ba14:	461d      	mov	r5, r3
 800ba16:	e7ea      	b.n	800b9ee <_dtoa_r+0x69e>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4b9b      	ldr	r3, [pc, #620]	; (800bc88 <_dtoa_r+0x938>)
 800ba1c:	f7f4 fe0c 	bl	8000638 <__aeabi_dmul>
 800ba20:	2200      	movs	r2, #0
 800ba22:	2300      	movs	r3, #0
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	f7f5 f86e 	bl	8000b08 <__aeabi_dcmpeq>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d09a      	beq.n	800b966 <_dtoa_r+0x616>
 800ba30:	e7cb      	b.n	800b9ca <_dtoa_r+0x67a>
 800ba32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	f000 808b 	beq.w	800bb50 <_dtoa_r+0x800>
 800ba3a:	9a06      	ldr	r2, [sp, #24]
 800ba3c:	2a01      	cmp	r2, #1
 800ba3e:	dc6e      	bgt.n	800bb1e <_dtoa_r+0x7ce>
 800ba40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	d067      	beq.n	800bb16 <_dtoa_r+0x7c6>
 800ba46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba4a:	9f07      	ldr	r7, [sp, #28]
 800ba4c:	9d05      	ldr	r5, [sp, #20]
 800ba4e:	9a05      	ldr	r2, [sp, #20]
 800ba50:	2101      	movs	r1, #1
 800ba52:	441a      	add	r2, r3
 800ba54:	4620      	mov	r0, r4
 800ba56:	9205      	str	r2, [sp, #20]
 800ba58:	4498      	add	r8, r3
 800ba5a:	f000 fb3c 	bl	800c0d6 <__i2b>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	2d00      	cmp	r5, #0
 800ba62:	dd0c      	ble.n	800ba7e <_dtoa_r+0x72e>
 800ba64:	f1b8 0f00 	cmp.w	r8, #0
 800ba68:	dd09      	ble.n	800ba7e <_dtoa_r+0x72e>
 800ba6a:	4545      	cmp	r5, r8
 800ba6c:	9a05      	ldr	r2, [sp, #20]
 800ba6e:	462b      	mov	r3, r5
 800ba70:	bfa8      	it	ge
 800ba72:	4643      	movge	r3, r8
 800ba74:	1ad2      	subs	r2, r2, r3
 800ba76:	9205      	str	r2, [sp, #20]
 800ba78:	1aed      	subs	r5, r5, r3
 800ba7a:	eba8 0803 	sub.w	r8, r8, r3
 800ba7e:	9b07      	ldr	r3, [sp, #28]
 800ba80:	b1eb      	cbz	r3, 800babe <_dtoa_r+0x76e>
 800ba82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d067      	beq.n	800bb58 <_dtoa_r+0x808>
 800ba88:	b18f      	cbz	r7, 800baae <_dtoa_r+0x75e>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	463a      	mov	r2, r7
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fbc0 	bl	800c214 <__pow5mult>
 800ba94:	9a04      	ldr	r2, [sp, #16]
 800ba96:	4601      	mov	r1, r0
 800ba98:	4606      	mov	r6, r0
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fb24 	bl	800c0e8 <__multiply>
 800baa0:	9904      	ldr	r1, [sp, #16]
 800baa2:	9008      	str	r0, [sp, #32]
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fa76 	bl	800bf96 <_Bfree>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	1bda      	subs	r2, r3, r7
 800bab2:	d004      	beq.n	800babe <_dtoa_r+0x76e>
 800bab4:	9904      	ldr	r1, [sp, #16]
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 fbac 	bl	800c214 <__pow5mult>
 800babc:	9004      	str	r0, [sp, #16]
 800babe:	2101      	movs	r1, #1
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 fb08 	bl	800c0d6 <__i2b>
 800bac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac8:	4607      	mov	r7, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 81d0 	beq.w	800be70 <_dtoa_r+0xb20>
 800bad0:	461a      	mov	r2, r3
 800bad2:	4601      	mov	r1, r0
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fb9d 	bl	800c214 <__pow5mult>
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b01      	cmp	r3, #1
 800bade:	4607      	mov	r7, r0
 800bae0:	dc40      	bgt.n	800bb64 <_dtoa_r+0x814>
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d139      	bne.n	800bb5c <_dtoa_r+0x80c>
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d136      	bne.n	800bb60 <_dtoa_r+0x810>
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf8:	0d1b      	lsrs	r3, r3, #20
 800bafa:	051b      	lsls	r3, r3, #20
 800bafc:	b12b      	cbz	r3, 800bb0a <_dtoa_r+0x7ba>
 800bafe:	9b05      	ldr	r3, [sp, #20]
 800bb00:	3301      	adds	r3, #1
 800bb02:	9305      	str	r3, [sp, #20]
 800bb04:	f108 0801 	add.w	r8, r8, #1
 800bb08:	2301      	movs	r3, #1
 800bb0a:	9307      	str	r3, [sp, #28]
 800bb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d12a      	bne.n	800bb68 <_dtoa_r+0x818>
 800bb12:	2001      	movs	r0, #1
 800bb14:	e030      	b.n	800bb78 <_dtoa_r+0x828>
 800bb16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb1c:	e795      	b.n	800ba4a <_dtoa_r+0x6fa>
 800bb1e:	9b07      	ldr	r3, [sp, #28]
 800bb20:	f109 37ff 	add.w	r7, r9, #4294967295
 800bb24:	42bb      	cmp	r3, r7
 800bb26:	bfbf      	itttt	lt
 800bb28:	9b07      	ldrlt	r3, [sp, #28]
 800bb2a:	9707      	strlt	r7, [sp, #28]
 800bb2c:	1afa      	sublt	r2, r7, r3
 800bb2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bb30:	bfbb      	ittet	lt
 800bb32:	189b      	addlt	r3, r3, r2
 800bb34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bb36:	1bdf      	subge	r7, r3, r7
 800bb38:	2700      	movlt	r7, #0
 800bb3a:	f1b9 0f00 	cmp.w	r9, #0
 800bb3e:	bfb5      	itete	lt
 800bb40:	9b05      	ldrlt	r3, [sp, #20]
 800bb42:	9d05      	ldrge	r5, [sp, #20]
 800bb44:	eba3 0509 	sublt.w	r5, r3, r9
 800bb48:	464b      	movge	r3, r9
 800bb4a:	bfb8      	it	lt
 800bb4c:	2300      	movlt	r3, #0
 800bb4e:	e77e      	b.n	800ba4e <_dtoa_r+0x6fe>
 800bb50:	9f07      	ldr	r7, [sp, #28]
 800bb52:	9d05      	ldr	r5, [sp, #20]
 800bb54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bb56:	e783      	b.n	800ba60 <_dtoa_r+0x710>
 800bb58:	9a07      	ldr	r2, [sp, #28]
 800bb5a:	e7ab      	b.n	800bab4 <_dtoa_r+0x764>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e7d4      	b.n	800bb0a <_dtoa_r+0x7ba>
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	e7d2      	b.n	800bb0a <_dtoa_r+0x7ba>
 800bb64:	2300      	movs	r3, #0
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bb6e:	6918      	ldr	r0, [r3, #16]
 800bb70:	f000 fa63 	bl	800c03a <__hi0bits>
 800bb74:	f1c0 0020 	rsb	r0, r0, #32
 800bb78:	4440      	add	r0, r8
 800bb7a:	f010 001f 	ands.w	r0, r0, #31
 800bb7e:	d047      	beq.n	800bc10 <_dtoa_r+0x8c0>
 800bb80:	f1c0 0320 	rsb	r3, r0, #32
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	dd3b      	ble.n	800bc00 <_dtoa_r+0x8b0>
 800bb88:	9b05      	ldr	r3, [sp, #20]
 800bb8a:	f1c0 001c 	rsb	r0, r0, #28
 800bb8e:	4403      	add	r3, r0
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	4405      	add	r5, r0
 800bb94:	4480      	add	r8, r0
 800bb96:	9b05      	ldr	r3, [sp, #20]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	dd05      	ble.n	800bba8 <_dtoa_r+0x858>
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	9904      	ldr	r1, [sp, #16]
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fb85 	bl	800c2b0 <__lshift>
 800bba6:	9004      	str	r0, [sp, #16]
 800bba8:	f1b8 0f00 	cmp.w	r8, #0
 800bbac:	dd05      	ble.n	800bbba <_dtoa_r+0x86a>
 800bbae:	4639      	mov	r1, r7
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fb7c 	bl	800c2b0 <__lshift>
 800bbb8:	4607      	mov	r7, r0
 800bbba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbbc:	b353      	cbz	r3, 800bc14 <_dtoa_r+0x8c4>
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	9804      	ldr	r0, [sp, #16]
 800bbc2:	f000 fbc9 	bl	800c358 <__mcmp>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	da24      	bge.n	800bc14 <_dtoa_r+0x8c4>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	220a      	movs	r2, #10
 800bbce:	9904      	ldr	r1, [sp, #16]
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 f9f7 	bl	800bfc4 <__multadd>
 800bbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd8:	9004      	str	r0, [sp, #16]
 800bbda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 814d 	beq.w	800be7e <_dtoa_r+0xb2e>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	220a      	movs	r2, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f9ea 	bl	800bfc4 <__multadd>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	dc4f      	bgt.n	800bc98 <_dtoa_r+0x948>
 800bbf8:	9b06      	ldr	r3, [sp, #24]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	dd4c      	ble.n	800bc98 <_dtoa_r+0x948>
 800bbfe:	e011      	b.n	800bc24 <_dtoa_r+0x8d4>
 800bc00:	d0c9      	beq.n	800bb96 <_dtoa_r+0x846>
 800bc02:	9a05      	ldr	r2, [sp, #20]
 800bc04:	331c      	adds	r3, #28
 800bc06:	441a      	add	r2, r3
 800bc08:	9205      	str	r2, [sp, #20]
 800bc0a:	441d      	add	r5, r3
 800bc0c:	4498      	add	r8, r3
 800bc0e:	e7c2      	b.n	800bb96 <_dtoa_r+0x846>
 800bc10:	4603      	mov	r3, r0
 800bc12:	e7f6      	b.n	800bc02 <_dtoa_r+0x8b2>
 800bc14:	f1b9 0f00 	cmp.w	r9, #0
 800bc18:	dc38      	bgt.n	800bc8c <_dtoa_r+0x93c>
 800bc1a:	9b06      	ldr	r3, [sp, #24]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	dd35      	ble.n	800bc8c <_dtoa_r+0x93c>
 800bc20:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc24:	9b02      	ldr	r3, [sp, #8]
 800bc26:	b963      	cbnz	r3, 800bc42 <_dtoa_r+0x8f2>
 800bc28:	4639      	mov	r1, r7
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f9c9 	bl	800bfc4 <__multadd>
 800bc32:	4601      	mov	r1, r0
 800bc34:	4607      	mov	r7, r0
 800bc36:	9804      	ldr	r0, [sp, #16]
 800bc38:	f000 fb8e 	bl	800c358 <__mcmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f73f adcc 	bgt.w	800b7da <_dtoa_r+0x48a>
 800bc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc44:	465d      	mov	r5, fp
 800bc46:	ea6f 0a03 	mvn.w	sl, r3
 800bc4a:	f04f 0900 	mov.w	r9, #0
 800bc4e:	4639      	mov	r1, r7
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 f9a0 	bl	800bf96 <_Bfree>
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	f43f aeb7 	beq.w	800b9ca <_dtoa_r+0x67a>
 800bc5c:	f1b9 0f00 	cmp.w	r9, #0
 800bc60:	d005      	beq.n	800bc6e <_dtoa_r+0x91e>
 800bc62:	45b1      	cmp	r9, r6
 800bc64:	d003      	beq.n	800bc6e <_dtoa_r+0x91e>
 800bc66:	4649      	mov	r1, r9
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 f994 	bl	800bf96 <_Bfree>
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 f990 	bl	800bf96 <_Bfree>
 800bc76:	e6a8      	b.n	800b9ca <_dtoa_r+0x67a>
 800bc78:	2700      	movs	r7, #0
 800bc7a:	463e      	mov	r6, r7
 800bc7c:	e7e1      	b.n	800bc42 <_dtoa_r+0x8f2>
 800bc7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc82:	463e      	mov	r6, r7
 800bc84:	e5a9      	b.n	800b7da <_dtoa_r+0x48a>
 800bc86:	bf00      	nop
 800bc88:	40240000 	.word	0x40240000
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 80fa 	beq.w	800be8c <_dtoa_r+0xb3c>
 800bc98:	2d00      	cmp	r5, #0
 800bc9a:	dd05      	ble.n	800bca8 <_dtoa_r+0x958>
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	462a      	mov	r2, r5
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fb05 	bl	800c2b0 <__lshift>
 800bca6:	4606      	mov	r6, r0
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d04c      	beq.n	800bd48 <_dtoa_r+0x9f8>
 800bcae:	6871      	ldr	r1, [r6, #4]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 f93c 	bl	800bf2e <_Balloc>
 800bcb6:	6932      	ldr	r2, [r6, #16]
 800bcb8:	3202      	adds	r2, #2
 800bcba:	4605      	mov	r5, r0
 800bcbc:	0092      	lsls	r2, r2, #2
 800bcbe:	f106 010c 	add.w	r1, r6, #12
 800bcc2:	300c      	adds	r0, #12
 800bcc4:	f000 f928 	bl	800bf18 <memcpy>
 800bcc8:	2201      	movs	r2, #1
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f000 faef 	bl	800c2b0 <__lshift>
 800bcd2:	9b00      	ldr	r3, [sp, #0]
 800bcd4:	f8cd b014 	str.w	fp, [sp, #20]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	46b1      	mov	r9, r6
 800bcde:	9307      	str	r3, [sp, #28]
 800bce0:	4606      	mov	r6, r0
 800bce2:	4639      	mov	r1, r7
 800bce4:	9804      	ldr	r0, [sp, #16]
 800bce6:	f7ff faa7 	bl	800b238 <quorem>
 800bcea:	4649      	mov	r1, r9
 800bcec:	4605      	mov	r5, r0
 800bcee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bcf2:	9804      	ldr	r0, [sp, #16]
 800bcf4:	f000 fb30 	bl	800c358 <__mcmp>
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	9000      	str	r0, [sp, #0]
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 fb44 	bl	800c38c <__mdiff>
 800bd04:	68c3      	ldr	r3, [r0, #12]
 800bd06:	4602      	mov	r2, r0
 800bd08:	bb03      	cbnz	r3, 800bd4c <_dtoa_r+0x9fc>
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	9008      	str	r0, [sp, #32]
 800bd0e:	9804      	ldr	r0, [sp, #16]
 800bd10:	f000 fb22 	bl	800c358 <__mcmp>
 800bd14:	9a08      	ldr	r2, [sp, #32]
 800bd16:	4603      	mov	r3, r0
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	9308      	str	r3, [sp, #32]
 800bd1e:	f000 f93a 	bl	800bf96 <_Bfree>
 800bd22:	9b08      	ldr	r3, [sp, #32]
 800bd24:	b9a3      	cbnz	r3, 800bd50 <_dtoa_r+0xa00>
 800bd26:	9a06      	ldr	r2, [sp, #24]
 800bd28:	b992      	cbnz	r2, 800bd50 <_dtoa_r+0xa00>
 800bd2a:	9a07      	ldr	r2, [sp, #28]
 800bd2c:	b982      	cbnz	r2, 800bd50 <_dtoa_r+0xa00>
 800bd2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd32:	d029      	beq.n	800bd88 <_dtoa_r+0xa38>
 800bd34:	9b00      	ldr	r3, [sp, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	dd01      	ble.n	800bd3e <_dtoa_r+0x9ee>
 800bd3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bd3e:	9b05      	ldr	r3, [sp, #20]
 800bd40:	1c5d      	adds	r5, r3, #1
 800bd42:	f883 8000 	strb.w	r8, [r3]
 800bd46:	e782      	b.n	800bc4e <_dtoa_r+0x8fe>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	e7c2      	b.n	800bcd2 <_dtoa_r+0x982>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e7e3      	b.n	800bd18 <_dtoa_r+0x9c8>
 800bd50:	9a00      	ldr	r2, [sp, #0]
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	db04      	blt.n	800bd60 <_dtoa_r+0xa10>
 800bd56:	d125      	bne.n	800bda4 <_dtoa_r+0xa54>
 800bd58:	9a06      	ldr	r2, [sp, #24]
 800bd5a:	bb1a      	cbnz	r2, 800bda4 <_dtoa_r+0xa54>
 800bd5c:	9a07      	ldr	r2, [sp, #28]
 800bd5e:	bb0a      	cbnz	r2, 800bda4 <_dtoa_r+0xa54>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	ddec      	ble.n	800bd3e <_dtoa_r+0x9ee>
 800bd64:	2201      	movs	r2, #1
 800bd66:	9904      	ldr	r1, [sp, #16]
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 faa1 	bl	800c2b0 <__lshift>
 800bd6e:	4639      	mov	r1, r7
 800bd70:	9004      	str	r0, [sp, #16]
 800bd72:	f000 faf1 	bl	800c358 <__mcmp>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	dc03      	bgt.n	800bd82 <_dtoa_r+0xa32>
 800bd7a:	d1e0      	bne.n	800bd3e <_dtoa_r+0x9ee>
 800bd7c:	f018 0f01 	tst.w	r8, #1
 800bd80:	d0dd      	beq.n	800bd3e <_dtoa_r+0x9ee>
 800bd82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd86:	d1d8      	bne.n	800bd3a <_dtoa_r+0x9ea>
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	9a05      	ldr	r2, [sp, #20]
 800bd8c:	1c5d      	adds	r5, r3, #1
 800bd8e:	2339      	movs	r3, #57	; 0x39
 800bd90:	7013      	strb	r3, [r2, #0]
 800bd92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd96:	2b39      	cmp	r3, #57	; 0x39
 800bd98:	f105 32ff 	add.w	r2, r5, #4294967295
 800bd9c:	d04f      	beq.n	800be3e <_dtoa_r+0xaee>
 800bd9e:	3301      	adds	r3, #1
 800bda0:	7013      	strb	r3, [r2, #0]
 800bda2:	e754      	b.n	800bc4e <_dtoa_r+0x8fe>
 800bda4:	9a05      	ldr	r2, [sp, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f102 0501 	add.w	r5, r2, #1
 800bdac:	dd06      	ble.n	800bdbc <_dtoa_r+0xa6c>
 800bdae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bdb2:	d0e9      	beq.n	800bd88 <_dtoa_r+0xa38>
 800bdb4:	f108 0801 	add.w	r8, r8, #1
 800bdb8:	9b05      	ldr	r3, [sp, #20]
 800bdba:	e7c2      	b.n	800bd42 <_dtoa_r+0x9f2>
 800bdbc:	9a02      	ldr	r2, [sp, #8]
 800bdbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bdc2:	eba5 030b 	sub.w	r3, r5, fp
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d021      	beq.n	800be0e <_dtoa_r+0xabe>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	220a      	movs	r2, #10
 800bdce:	9904      	ldr	r1, [sp, #16]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 f8f7 	bl	800bfc4 <__multadd>
 800bdd6:	45b1      	cmp	r9, r6
 800bdd8:	9004      	str	r0, [sp, #16]
 800bdda:	f04f 0300 	mov.w	r3, #0
 800bdde:	f04f 020a 	mov.w	r2, #10
 800bde2:	4649      	mov	r1, r9
 800bde4:	4620      	mov	r0, r4
 800bde6:	d105      	bne.n	800bdf4 <_dtoa_r+0xaa4>
 800bde8:	f000 f8ec 	bl	800bfc4 <__multadd>
 800bdec:	4681      	mov	r9, r0
 800bdee:	4606      	mov	r6, r0
 800bdf0:	9505      	str	r5, [sp, #20]
 800bdf2:	e776      	b.n	800bce2 <_dtoa_r+0x992>
 800bdf4:	f000 f8e6 	bl	800bfc4 <__multadd>
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4681      	mov	r9, r0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	220a      	movs	r2, #10
 800be00:	4620      	mov	r0, r4
 800be02:	f000 f8df 	bl	800bfc4 <__multadd>
 800be06:	4606      	mov	r6, r0
 800be08:	e7f2      	b.n	800bdf0 <_dtoa_r+0xaa0>
 800be0a:	f04f 0900 	mov.w	r9, #0
 800be0e:	2201      	movs	r2, #1
 800be10:	9904      	ldr	r1, [sp, #16]
 800be12:	4620      	mov	r0, r4
 800be14:	f000 fa4c 	bl	800c2b0 <__lshift>
 800be18:	4639      	mov	r1, r7
 800be1a:	9004      	str	r0, [sp, #16]
 800be1c:	f000 fa9c 	bl	800c358 <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	dcb6      	bgt.n	800bd92 <_dtoa_r+0xa42>
 800be24:	d102      	bne.n	800be2c <_dtoa_r+0xadc>
 800be26:	f018 0f01 	tst.w	r8, #1
 800be2a:	d1b2      	bne.n	800bd92 <_dtoa_r+0xa42>
 800be2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be30:	2b30      	cmp	r3, #48	; 0x30
 800be32:	f105 32ff 	add.w	r2, r5, #4294967295
 800be36:	f47f af0a 	bne.w	800bc4e <_dtoa_r+0x8fe>
 800be3a:	4615      	mov	r5, r2
 800be3c:	e7f6      	b.n	800be2c <_dtoa_r+0xadc>
 800be3e:	4593      	cmp	fp, r2
 800be40:	d105      	bne.n	800be4e <_dtoa_r+0xafe>
 800be42:	2331      	movs	r3, #49	; 0x31
 800be44:	f10a 0a01 	add.w	sl, sl, #1
 800be48:	f88b 3000 	strb.w	r3, [fp]
 800be4c:	e6ff      	b.n	800bc4e <_dtoa_r+0x8fe>
 800be4e:	4615      	mov	r5, r2
 800be50:	e79f      	b.n	800bd92 <_dtoa_r+0xa42>
 800be52:	f8df b064 	ldr.w	fp, [pc, #100]	; 800beb8 <_dtoa_r+0xb68>
 800be56:	e007      	b.n	800be68 <_dtoa_r+0xb18>
 800be58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bebc <_dtoa_r+0xb6c>
 800be5e:	b11b      	cbz	r3, 800be68 <_dtoa_r+0xb18>
 800be60:	f10b 0308 	add.w	r3, fp, #8
 800be64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	4658      	mov	r0, fp
 800be6a:	b017      	add	sp, #92	; 0x5c
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be70:	9b06      	ldr	r3, [sp, #24]
 800be72:	2b01      	cmp	r3, #1
 800be74:	f77f ae35 	ble.w	800bae2 <_dtoa_r+0x792>
 800be78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be7a:	9307      	str	r3, [sp, #28]
 800be7c:	e649      	b.n	800bb12 <_dtoa_r+0x7c2>
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dc03      	bgt.n	800be8c <_dtoa_r+0xb3c>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b02      	cmp	r3, #2
 800be88:	f73f aecc 	bgt.w	800bc24 <_dtoa_r+0x8d4>
 800be8c:	465d      	mov	r5, fp
 800be8e:	4639      	mov	r1, r7
 800be90:	9804      	ldr	r0, [sp, #16]
 800be92:	f7ff f9d1 	bl	800b238 <quorem>
 800be96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be9a:	f805 8b01 	strb.w	r8, [r5], #1
 800be9e:	9a02      	ldr	r2, [sp, #8]
 800bea0:	eba5 030b 	sub.w	r3, r5, fp
 800bea4:	429a      	cmp	r2, r3
 800bea6:	ddb0      	ble.n	800be0a <_dtoa_r+0xaba>
 800bea8:	2300      	movs	r3, #0
 800beaa:	220a      	movs	r2, #10
 800beac:	9904      	ldr	r1, [sp, #16]
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 f888 	bl	800bfc4 <__multadd>
 800beb4:	9004      	str	r0, [sp, #16]
 800beb6:	e7ea      	b.n	800be8e <_dtoa_r+0xb3e>
 800beb8:	0800ca7c 	.word	0x0800ca7c
 800bebc:	0800caa0 	.word	0x0800caa0

0800bec0 <__locale_ctype_ptr_l>:
 800bec0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bec4:	4770      	bx	lr
	...

0800bec8 <_localeconv_r>:
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <_localeconv_r+0x14>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6a18      	ldr	r0, [r3, #32]
 800bece:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <_localeconv_r+0x18>)
 800bed0:	2800      	cmp	r0, #0
 800bed2:	bf08      	it	eq
 800bed4:	4618      	moveq	r0, r3
 800bed6:	30f0      	adds	r0, #240	; 0xf0
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	20000020 	.word	0x20000020
 800bee0:	20000084 	.word	0x20000084

0800bee4 <malloc>:
 800bee4:	4b02      	ldr	r3, [pc, #8]	; (800bef0 <malloc+0xc>)
 800bee6:	4601      	mov	r1, r0
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	f000 bb57 	b.w	800c59c <_malloc_r>
 800beee:	bf00      	nop
 800bef0:	20000020 	.word	0x20000020

0800bef4 <__ascii_mbtowc>:
 800bef4:	b082      	sub	sp, #8
 800bef6:	b901      	cbnz	r1, 800befa <__ascii_mbtowc+0x6>
 800bef8:	a901      	add	r1, sp, #4
 800befa:	b142      	cbz	r2, 800bf0e <__ascii_mbtowc+0x1a>
 800befc:	b14b      	cbz	r3, 800bf12 <__ascii_mbtowc+0x1e>
 800befe:	7813      	ldrb	r3, [r2, #0]
 800bf00:	600b      	str	r3, [r1, #0]
 800bf02:	7812      	ldrb	r2, [r2, #0]
 800bf04:	1c10      	adds	r0, r2, #0
 800bf06:	bf18      	it	ne
 800bf08:	2001      	movne	r0, #1
 800bf0a:	b002      	add	sp, #8
 800bf0c:	4770      	bx	lr
 800bf0e:	4610      	mov	r0, r2
 800bf10:	e7fb      	b.n	800bf0a <__ascii_mbtowc+0x16>
 800bf12:	f06f 0001 	mvn.w	r0, #1
 800bf16:	e7f8      	b.n	800bf0a <__ascii_mbtowc+0x16>

0800bf18 <memcpy>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	1e43      	subs	r3, r0, #1
 800bf1c:	440a      	add	r2, r1
 800bf1e:	4291      	cmp	r1, r2
 800bf20:	d100      	bne.n	800bf24 <memcpy+0xc>
 800bf22:	bd10      	pop	{r4, pc}
 800bf24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2c:	e7f7      	b.n	800bf1e <memcpy+0x6>

0800bf2e <_Balloc>:
 800bf2e:	b570      	push	{r4, r5, r6, lr}
 800bf30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf32:	4604      	mov	r4, r0
 800bf34:	460e      	mov	r6, r1
 800bf36:	b93d      	cbnz	r5, 800bf48 <_Balloc+0x1a>
 800bf38:	2010      	movs	r0, #16
 800bf3a:	f7ff ffd3 	bl	800bee4 <malloc>
 800bf3e:	6260      	str	r0, [r4, #36]	; 0x24
 800bf40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf44:	6005      	str	r5, [r0, #0]
 800bf46:	60c5      	str	r5, [r0, #12]
 800bf48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bf4a:	68eb      	ldr	r3, [r5, #12]
 800bf4c:	b183      	cbz	r3, 800bf70 <_Balloc+0x42>
 800bf4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf56:	b9b8      	cbnz	r0, 800bf88 <_Balloc+0x5a>
 800bf58:	2101      	movs	r1, #1
 800bf5a:	fa01 f506 	lsl.w	r5, r1, r6
 800bf5e:	1d6a      	adds	r2, r5, #5
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 fabe 	bl	800c4e4 <_calloc_r>
 800bf68:	b160      	cbz	r0, 800bf84 <_Balloc+0x56>
 800bf6a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bf6e:	e00e      	b.n	800bf8e <_Balloc+0x60>
 800bf70:	2221      	movs	r2, #33	; 0x21
 800bf72:	2104      	movs	r1, #4
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fab5 	bl	800c4e4 <_calloc_r>
 800bf7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf7c:	60e8      	str	r0, [r5, #12]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e4      	bne.n	800bf4e <_Balloc+0x20>
 800bf84:	2000      	movs	r0, #0
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	6802      	ldr	r2, [r0, #0]
 800bf8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf94:	e7f7      	b.n	800bf86 <_Balloc+0x58>

0800bf96 <_Bfree>:
 800bf96:	b570      	push	{r4, r5, r6, lr}
 800bf98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	b93c      	cbnz	r4, 800bfb0 <_Bfree+0x1a>
 800bfa0:	2010      	movs	r0, #16
 800bfa2:	f7ff ff9f 	bl	800bee4 <malloc>
 800bfa6:	6270      	str	r0, [r6, #36]	; 0x24
 800bfa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfac:	6004      	str	r4, [r0, #0]
 800bfae:	60c4      	str	r4, [r0, #12]
 800bfb0:	b13d      	cbz	r5, 800bfc2 <_Bfree+0x2c>
 800bfb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bfb4:	686a      	ldr	r2, [r5, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfbc:	6029      	str	r1, [r5, #0]
 800bfbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}

0800bfc4 <__multadd>:
 800bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	690d      	ldr	r5, [r1, #16]
 800bfca:	461f      	mov	r7, r3
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	f101 0c14 	add.w	ip, r1, #20
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f8dc 0000 	ldr.w	r0, [ip]
 800bfda:	b281      	uxth	r1, r0
 800bfdc:	fb02 7101 	mla	r1, r2, r1, r7
 800bfe0:	0c0f      	lsrs	r7, r1, #16
 800bfe2:	0c00      	lsrs	r0, r0, #16
 800bfe4:	fb02 7000 	mla	r0, r2, r0, r7
 800bfe8:	b289      	uxth	r1, r1
 800bfea:	3301      	adds	r3, #1
 800bfec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bff0:	429d      	cmp	r5, r3
 800bff2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bff6:	f84c 1b04 	str.w	r1, [ip], #4
 800bffa:	dcec      	bgt.n	800bfd6 <__multadd+0x12>
 800bffc:	b1d7      	cbz	r7, 800c034 <__multadd+0x70>
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	42ab      	cmp	r3, r5
 800c002:	dc12      	bgt.n	800c02a <__multadd+0x66>
 800c004:	6861      	ldr	r1, [r4, #4]
 800c006:	4630      	mov	r0, r6
 800c008:	3101      	adds	r1, #1
 800c00a:	f7ff ff90 	bl	800bf2e <_Balloc>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	4680      	mov	r8, r0
 800c018:	0092      	lsls	r2, r2, #2
 800c01a:	300c      	adds	r0, #12
 800c01c:	f7ff ff7c 	bl	800bf18 <memcpy>
 800c020:	4621      	mov	r1, r4
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ffb7 	bl	800bf96 <_Bfree>
 800c028:	4644      	mov	r4, r8
 800c02a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c02e:	3501      	adds	r5, #1
 800c030:	615f      	str	r7, [r3, #20]
 800c032:	6125      	str	r5, [r4, #16]
 800c034:	4620      	mov	r0, r4
 800c036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c03a <__hi0bits>:
 800c03a:	0c02      	lsrs	r2, r0, #16
 800c03c:	0412      	lsls	r2, r2, #16
 800c03e:	4603      	mov	r3, r0
 800c040:	b9b2      	cbnz	r2, 800c070 <__hi0bits+0x36>
 800c042:	0403      	lsls	r3, r0, #16
 800c044:	2010      	movs	r0, #16
 800c046:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c04a:	bf04      	itt	eq
 800c04c:	021b      	lsleq	r3, r3, #8
 800c04e:	3008      	addeq	r0, #8
 800c050:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c054:	bf04      	itt	eq
 800c056:	011b      	lsleq	r3, r3, #4
 800c058:	3004      	addeq	r0, #4
 800c05a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c05e:	bf04      	itt	eq
 800c060:	009b      	lsleq	r3, r3, #2
 800c062:	3002      	addeq	r0, #2
 800c064:	2b00      	cmp	r3, #0
 800c066:	db06      	blt.n	800c076 <__hi0bits+0x3c>
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	d503      	bpl.n	800c074 <__hi0bits+0x3a>
 800c06c:	3001      	adds	r0, #1
 800c06e:	4770      	bx	lr
 800c070:	2000      	movs	r0, #0
 800c072:	e7e8      	b.n	800c046 <__hi0bits+0xc>
 800c074:	2020      	movs	r0, #32
 800c076:	4770      	bx	lr

0800c078 <__lo0bits>:
 800c078:	6803      	ldr	r3, [r0, #0]
 800c07a:	f013 0207 	ands.w	r2, r3, #7
 800c07e:	4601      	mov	r1, r0
 800c080:	d00b      	beq.n	800c09a <__lo0bits+0x22>
 800c082:	07da      	lsls	r2, r3, #31
 800c084:	d423      	bmi.n	800c0ce <__lo0bits+0x56>
 800c086:	0798      	lsls	r0, r3, #30
 800c088:	bf49      	itett	mi
 800c08a:	085b      	lsrmi	r3, r3, #1
 800c08c:	089b      	lsrpl	r3, r3, #2
 800c08e:	2001      	movmi	r0, #1
 800c090:	600b      	strmi	r3, [r1, #0]
 800c092:	bf5c      	itt	pl
 800c094:	600b      	strpl	r3, [r1, #0]
 800c096:	2002      	movpl	r0, #2
 800c098:	4770      	bx	lr
 800c09a:	b298      	uxth	r0, r3
 800c09c:	b9a8      	cbnz	r0, 800c0ca <__lo0bits+0x52>
 800c09e:	0c1b      	lsrs	r3, r3, #16
 800c0a0:	2010      	movs	r0, #16
 800c0a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c0a6:	bf04      	itt	eq
 800c0a8:	0a1b      	lsreq	r3, r3, #8
 800c0aa:	3008      	addeq	r0, #8
 800c0ac:	071a      	lsls	r2, r3, #28
 800c0ae:	bf04      	itt	eq
 800c0b0:	091b      	lsreq	r3, r3, #4
 800c0b2:	3004      	addeq	r0, #4
 800c0b4:	079a      	lsls	r2, r3, #30
 800c0b6:	bf04      	itt	eq
 800c0b8:	089b      	lsreq	r3, r3, #2
 800c0ba:	3002      	addeq	r0, #2
 800c0bc:	07da      	lsls	r2, r3, #31
 800c0be:	d402      	bmi.n	800c0c6 <__lo0bits+0x4e>
 800c0c0:	085b      	lsrs	r3, r3, #1
 800c0c2:	d006      	beq.n	800c0d2 <__lo0bits+0x5a>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	600b      	str	r3, [r1, #0]
 800c0c8:	4770      	bx	lr
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	e7e9      	b.n	800c0a2 <__lo0bits+0x2a>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	4770      	bx	lr
 800c0d2:	2020      	movs	r0, #32
 800c0d4:	4770      	bx	lr

0800c0d6 <__i2b>:
 800c0d6:	b510      	push	{r4, lr}
 800c0d8:	460c      	mov	r4, r1
 800c0da:	2101      	movs	r1, #1
 800c0dc:	f7ff ff27 	bl	800bf2e <_Balloc>
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	6144      	str	r4, [r0, #20]
 800c0e4:	6102      	str	r2, [r0, #16]
 800c0e6:	bd10      	pop	{r4, pc}

0800c0e8 <__multiply>:
 800c0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	690a      	ldr	r2, [r1, #16]
 800c0f0:	6923      	ldr	r3, [r4, #16]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	bfb8      	it	lt
 800c0f6:	460b      	movlt	r3, r1
 800c0f8:	4688      	mov	r8, r1
 800c0fa:	bfbc      	itt	lt
 800c0fc:	46a0      	movlt	r8, r4
 800c0fe:	461c      	movlt	r4, r3
 800c100:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c104:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c108:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c10c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c110:	eb07 0609 	add.w	r6, r7, r9
 800c114:	42b3      	cmp	r3, r6
 800c116:	bfb8      	it	lt
 800c118:	3101      	addlt	r1, #1
 800c11a:	f7ff ff08 	bl	800bf2e <_Balloc>
 800c11e:	f100 0514 	add.w	r5, r0, #20
 800c122:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c126:	462b      	mov	r3, r5
 800c128:	2200      	movs	r2, #0
 800c12a:	4573      	cmp	r3, lr
 800c12c:	d316      	bcc.n	800c15c <__multiply+0x74>
 800c12e:	f104 0214 	add.w	r2, r4, #20
 800c132:	f108 0114 	add.w	r1, r8, #20
 800c136:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c13a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	9b00      	ldr	r3, [sp, #0]
 800c142:	9201      	str	r2, [sp, #4]
 800c144:	4293      	cmp	r3, r2
 800c146:	d80c      	bhi.n	800c162 <__multiply+0x7a>
 800c148:	2e00      	cmp	r6, #0
 800c14a:	dd03      	ble.n	800c154 <__multiply+0x6c>
 800c14c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c150:	2b00      	cmp	r3, #0
 800c152:	d05d      	beq.n	800c210 <__multiply+0x128>
 800c154:	6106      	str	r6, [r0, #16]
 800c156:	b003      	add	sp, #12
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	f843 2b04 	str.w	r2, [r3], #4
 800c160:	e7e3      	b.n	800c12a <__multiply+0x42>
 800c162:	f8b2 b000 	ldrh.w	fp, [r2]
 800c166:	f1bb 0f00 	cmp.w	fp, #0
 800c16a:	d023      	beq.n	800c1b4 <__multiply+0xcc>
 800c16c:	4689      	mov	r9, r1
 800c16e:	46ac      	mov	ip, r5
 800c170:	f04f 0800 	mov.w	r8, #0
 800c174:	f859 4b04 	ldr.w	r4, [r9], #4
 800c178:	f8dc a000 	ldr.w	sl, [ip]
 800c17c:	b2a3      	uxth	r3, r4
 800c17e:	fa1f fa8a 	uxth.w	sl, sl
 800c182:	fb0b a303 	mla	r3, fp, r3, sl
 800c186:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c18a:	f8dc 4000 	ldr.w	r4, [ip]
 800c18e:	4443      	add	r3, r8
 800c190:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c194:	fb0b 840a 	mla	r4, fp, sl, r8
 800c198:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c19c:	46e2      	mov	sl, ip
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1a4:	454f      	cmp	r7, r9
 800c1a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1aa:	f84a 3b04 	str.w	r3, [sl], #4
 800c1ae:	d82b      	bhi.n	800c208 <__multiply+0x120>
 800c1b0:	f8cc 8004 	str.w	r8, [ip, #4]
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c1ba:	3204      	adds	r2, #4
 800c1bc:	f1ba 0f00 	cmp.w	sl, #0
 800c1c0:	d020      	beq.n	800c204 <__multiply+0x11c>
 800c1c2:	682b      	ldr	r3, [r5, #0]
 800c1c4:	4689      	mov	r9, r1
 800c1c6:	46a8      	mov	r8, r5
 800c1c8:	f04f 0b00 	mov.w	fp, #0
 800c1cc:	f8b9 c000 	ldrh.w	ip, [r9]
 800c1d0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c1d4:	fb0a 440c 	mla	r4, sl, ip, r4
 800c1d8:	445c      	add	r4, fp
 800c1da:	46c4      	mov	ip, r8
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1e2:	f84c 3b04 	str.w	r3, [ip], #4
 800c1e6:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1ea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c1ee:	0c1b      	lsrs	r3, r3, #16
 800c1f0:	fb0a b303 	mla	r3, sl, r3, fp
 800c1f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c1f8:	454f      	cmp	r7, r9
 800c1fa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c1fe:	d805      	bhi.n	800c20c <__multiply+0x124>
 800c200:	f8c8 3004 	str.w	r3, [r8, #4]
 800c204:	3504      	adds	r5, #4
 800c206:	e79b      	b.n	800c140 <__multiply+0x58>
 800c208:	46d4      	mov	ip, sl
 800c20a:	e7b3      	b.n	800c174 <__multiply+0x8c>
 800c20c:	46e0      	mov	r8, ip
 800c20e:	e7dd      	b.n	800c1cc <__multiply+0xe4>
 800c210:	3e01      	subs	r6, #1
 800c212:	e799      	b.n	800c148 <__multiply+0x60>

0800c214 <__pow5mult>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	4615      	mov	r5, r2
 800c21a:	f012 0203 	ands.w	r2, r2, #3
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	d007      	beq.n	800c234 <__pow5mult+0x20>
 800c224:	3a01      	subs	r2, #1
 800c226:	4c21      	ldr	r4, [pc, #132]	; (800c2ac <__pow5mult+0x98>)
 800c228:	2300      	movs	r3, #0
 800c22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c22e:	f7ff fec9 	bl	800bfc4 <__multadd>
 800c232:	4607      	mov	r7, r0
 800c234:	10ad      	asrs	r5, r5, #2
 800c236:	d035      	beq.n	800c2a4 <__pow5mult+0x90>
 800c238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c23a:	b93c      	cbnz	r4, 800c24c <__pow5mult+0x38>
 800c23c:	2010      	movs	r0, #16
 800c23e:	f7ff fe51 	bl	800bee4 <malloc>
 800c242:	6270      	str	r0, [r6, #36]	; 0x24
 800c244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c248:	6004      	str	r4, [r0, #0]
 800c24a:	60c4      	str	r4, [r0, #12]
 800c24c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c254:	b94c      	cbnz	r4, 800c26a <__pow5mult+0x56>
 800c256:	f240 2171 	movw	r1, #625	; 0x271
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7ff ff3b 	bl	800c0d6 <__i2b>
 800c260:	2300      	movs	r3, #0
 800c262:	f8c8 0008 	str.w	r0, [r8, #8]
 800c266:	4604      	mov	r4, r0
 800c268:	6003      	str	r3, [r0, #0]
 800c26a:	f04f 0800 	mov.w	r8, #0
 800c26e:	07eb      	lsls	r3, r5, #31
 800c270:	d50a      	bpl.n	800c288 <__pow5mult+0x74>
 800c272:	4639      	mov	r1, r7
 800c274:	4622      	mov	r2, r4
 800c276:	4630      	mov	r0, r6
 800c278:	f7ff ff36 	bl	800c0e8 <__multiply>
 800c27c:	4639      	mov	r1, r7
 800c27e:	4681      	mov	r9, r0
 800c280:	4630      	mov	r0, r6
 800c282:	f7ff fe88 	bl	800bf96 <_Bfree>
 800c286:	464f      	mov	r7, r9
 800c288:	106d      	asrs	r5, r5, #1
 800c28a:	d00b      	beq.n	800c2a4 <__pow5mult+0x90>
 800c28c:	6820      	ldr	r0, [r4, #0]
 800c28e:	b938      	cbnz	r0, 800c2a0 <__pow5mult+0x8c>
 800c290:	4622      	mov	r2, r4
 800c292:	4621      	mov	r1, r4
 800c294:	4630      	mov	r0, r6
 800c296:	f7ff ff27 	bl	800c0e8 <__multiply>
 800c29a:	6020      	str	r0, [r4, #0]
 800c29c:	f8c0 8000 	str.w	r8, [r0]
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	e7e4      	b.n	800c26e <__pow5mult+0x5a>
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800cba8 	.word	0x0800cba8

0800c2b0 <__lshift>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	6849      	ldr	r1, [r1, #4]
 800c2be:	eb0a 0903 	add.w	r9, sl, r3
 800c2c2:	68a3      	ldr	r3, [r4, #8]
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	4616      	mov	r6, r2
 800c2c8:	f109 0501 	add.w	r5, r9, #1
 800c2cc:	42ab      	cmp	r3, r5
 800c2ce:	db32      	blt.n	800c336 <__lshift+0x86>
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff fe2c 	bl	800bf2e <_Balloc>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	4680      	mov	r8, r0
 800c2da:	f100 0114 	add.w	r1, r0, #20
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4553      	cmp	r3, sl
 800c2e2:	db2b      	blt.n	800c33c <__lshift+0x8c>
 800c2e4:	6920      	ldr	r0, [r4, #16]
 800c2e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2ea:	f104 0314 	add.w	r3, r4, #20
 800c2ee:	f016 021f 	ands.w	r2, r6, #31
 800c2f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2fa:	d025      	beq.n	800c348 <__lshift+0x98>
 800c2fc:	f1c2 0e20 	rsb	lr, r2, #32
 800c300:	2000      	movs	r0, #0
 800c302:	681e      	ldr	r6, [r3, #0]
 800c304:	468a      	mov	sl, r1
 800c306:	4096      	lsls	r6, r2
 800c308:	4330      	orrs	r0, r6
 800c30a:	f84a 0b04 	str.w	r0, [sl], #4
 800c30e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c312:	459c      	cmp	ip, r3
 800c314:	fa20 f00e 	lsr.w	r0, r0, lr
 800c318:	d814      	bhi.n	800c344 <__lshift+0x94>
 800c31a:	6048      	str	r0, [r1, #4]
 800c31c:	b108      	cbz	r0, 800c322 <__lshift+0x72>
 800c31e:	f109 0502 	add.w	r5, r9, #2
 800c322:	3d01      	subs	r5, #1
 800c324:	4638      	mov	r0, r7
 800c326:	f8c8 5010 	str.w	r5, [r8, #16]
 800c32a:	4621      	mov	r1, r4
 800c32c:	f7ff fe33 	bl	800bf96 <_Bfree>
 800c330:	4640      	mov	r0, r8
 800c332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c336:	3101      	adds	r1, #1
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	e7c7      	b.n	800c2cc <__lshift+0x1c>
 800c33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c340:	3301      	adds	r3, #1
 800c342:	e7cd      	b.n	800c2e0 <__lshift+0x30>
 800c344:	4651      	mov	r1, sl
 800c346:	e7dc      	b.n	800c302 <__lshift+0x52>
 800c348:	3904      	subs	r1, #4
 800c34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c34e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c352:	459c      	cmp	ip, r3
 800c354:	d8f9      	bhi.n	800c34a <__lshift+0x9a>
 800c356:	e7e4      	b.n	800c322 <__lshift+0x72>

0800c358 <__mcmp>:
 800c358:	6903      	ldr	r3, [r0, #16]
 800c35a:	690a      	ldr	r2, [r1, #16]
 800c35c:	1a9b      	subs	r3, r3, r2
 800c35e:	b530      	push	{r4, r5, lr}
 800c360:	d10c      	bne.n	800c37c <__mcmp+0x24>
 800c362:	0092      	lsls	r2, r2, #2
 800c364:	3014      	adds	r0, #20
 800c366:	3114      	adds	r1, #20
 800c368:	1884      	adds	r4, r0, r2
 800c36a:	4411      	add	r1, r2
 800c36c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c370:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c374:	4295      	cmp	r5, r2
 800c376:	d003      	beq.n	800c380 <__mcmp+0x28>
 800c378:	d305      	bcc.n	800c386 <__mcmp+0x2e>
 800c37a:	2301      	movs	r3, #1
 800c37c:	4618      	mov	r0, r3
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	42a0      	cmp	r0, r4
 800c382:	d3f3      	bcc.n	800c36c <__mcmp+0x14>
 800c384:	e7fa      	b.n	800c37c <__mcmp+0x24>
 800c386:	f04f 33ff 	mov.w	r3, #4294967295
 800c38a:	e7f7      	b.n	800c37c <__mcmp+0x24>

0800c38c <__mdiff>:
 800c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	460d      	mov	r5, r1
 800c392:	4607      	mov	r7, r0
 800c394:	4611      	mov	r1, r2
 800c396:	4628      	mov	r0, r5
 800c398:	4614      	mov	r4, r2
 800c39a:	f7ff ffdd 	bl	800c358 <__mcmp>
 800c39e:	1e06      	subs	r6, r0, #0
 800c3a0:	d108      	bne.n	800c3b4 <__mdiff+0x28>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f7ff fdc2 	bl	800bf2e <_Balloc>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b4:	bfa4      	itt	ge
 800c3b6:	4623      	movge	r3, r4
 800c3b8:	462c      	movge	r4, r5
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	6861      	ldr	r1, [r4, #4]
 800c3be:	bfa6      	itte	ge
 800c3c0:	461d      	movge	r5, r3
 800c3c2:	2600      	movge	r6, #0
 800c3c4:	2601      	movlt	r6, #1
 800c3c6:	f7ff fdb2 	bl	800bf2e <_Balloc>
 800c3ca:	692b      	ldr	r3, [r5, #16]
 800c3cc:	60c6      	str	r6, [r0, #12]
 800c3ce:	6926      	ldr	r6, [r4, #16]
 800c3d0:	f105 0914 	add.w	r9, r5, #20
 800c3d4:	f104 0214 	add.w	r2, r4, #20
 800c3d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c3dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c3e0:	f100 0514 	add.w	r5, r0, #20
 800c3e4:	f04f 0e00 	mov.w	lr, #0
 800c3e8:	f852 ab04 	ldr.w	sl, [r2], #4
 800c3ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800c3f0:	fa1e f18a 	uxtah	r1, lr, sl
 800c3f4:	b2a3      	uxth	r3, r4
 800c3f6:	1ac9      	subs	r1, r1, r3
 800c3f8:	0c23      	lsrs	r3, r4, #16
 800c3fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c3fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c402:	b289      	uxth	r1, r1
 800c404:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c408:	45c8      	cmp	r8, r9
 800c40a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c40e:	4694      	mov	ip, r2
 800c410:	f845 3b04 	str.w	r3, [r5], #4
 800c414:	d8e8      	bhi.n	800c3e8 <__mdiff+0x5c>
 800c416:	45bc      	cmp	ip, r7
 800c418:	d304      	bcc.n	800c424 <__mdiff+0x98>
 800c41a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c41e:	b183      	cbz	r3, 800c442 <__mdiff+0xb6>
 800c420:	6106      	str	r6, [r0, #16]
 800c422:	e7c5      	b.n	800c3b0 <__mdiff+0x24>
 800c424:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c428:	fa1e f381 	uxtah	r3, lr, r1
 800c42c:	141a      	asrs	r2, r3, #16
 800c42e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c432:	b29b      	uxth	r3, r3
 800c434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c438:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c43c:	f845 3b04 	str.w	r3, [r5], #4
 800c440:	e7e9      	b.n	800c416 <__mdiff+0x8a>
 800c442:	3e01      	subs	r6, #1
 800c444:	e7e9      	b.n	800c41a <__mdiff+0x8e>

0800c446 <__d2b>:
 800c446:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c44a:	460e      	mov	r6, r1
 800c44c:	2101      	movs	r1, #1
 800c44e:	ec59 8b10 	vmov	r8, r9, d0
 800c452:	4615      	mov	r5, r2
 800c454:	f7ff fd6b 	bl	800bf2e <_Balloc>
 800c458:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c45c:	4607      	mov	r7, r0
 800c45e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c462:	bb34      	cbnz	r4, 800c4b2 <__d2b+0x6c>
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	f1b8 0300 	subs.w	r3, r8, #0
 800c46a:	d027      	beq.n	800c4bc <__d2b+0x76>
 800c46c:	a802      	add	r0, sp, #8
 800c46e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c472:	f7ff fe01 	bl	800c078 <__lo0bits>
 800c476:	9900      	ldr	r1, [sp, #0]
 800c478:	b1f0      	cbz	r0, 800c4b8 <__d2b+0x72>
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	f1c0 0320 	rsb	r3, r0, #32
 800c480:	fa02 f303 	lsl.w	r3, r2, r3
 800c484:	430b      	orrs	r3, r1
 800c486:	40c2      	lsrs	r2, r0
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	61bb      	str	r3, [r7, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bf14      	ite	ne
 800c494:	2102      	movne	r1, #2
 800c496:	2101      	moveq	r1, #1
 800c498:	6139      	str	r1, [r7, #16]
 800c49a:	b1c4      	cbz	r4, 800c4ce <__d2b+0x88>
 800c49c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c4a0:	4404      	add	r4, r0
 800c4a2:	6034      	str	r4, [r6, #0]
 800c4a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4a8:	6028      	str	r0, [r5, #0]
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	b003      	add	sp, #12
 800c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4b6:	e7d5      	b.n	800c464 <__d2b+0x1e>
 800c4b8:	6179      	str	r1, [r7, #20]
 800c4ba:	e7e7      	b.n	800c48c <__d2b+0x46>
 800c4bc:	a801      	add	r0, sp, #4
 800c4be:	f7ff fddb 	bl	800c078 <__lo0bits>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	6139      	str	r1, [r7, #16]
 800c4ca:	3020      	adds	r0, #32
 800c4cc:	e7e5      	b.n	800c49a <__d2b+0x54>
 800c4ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c4d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4d6:	6030      	str	r0, [r6, #0]
 800c4d8:	6918      	ldr	r0, [r3, #16]
 800c4da:	f7ff fdae 	bl	800c03a <__hi0bits>
 800c4de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c4e2:	e7e1      	b.n	800c4a8 <__d2b+0x62>

0800c4e4 <_calloc_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	fb02 f401 	mul.w	r4, r2, r1
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	f000 f856 	bl	800c59c <_malloc_r>
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	b118      	cbz	r0, 800c4fc <_calloc_r+0x18>
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	f7fe f988 	bl	800a80c <memset>
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}

0800c500 <_free_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	2900      	cmp	r1, #0
 800c506:	d045      	beq.n	800c594 <_free_r+0x94>
 800c508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50c:	1f0c      	subs	r4, r1, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	18e4      	addlt	r4, r4, r3
 800c514:	f000 fa24 	bl	800c960 <__malloc_lock>
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <_free_r+0x98>)
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	4610      	mov	r0, r2
 800c51e:	b933      	cbnz	r3, 800c52e <_free_r+0x2e>
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	6014      	str	r4, [r2, #0]
 800c524:	4628      	mov	r0, r5
 800c526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c52a:	f000 ba1a 	b.w	800c962 <__malloc_unlock>
 800c52e:	42a3      	cmp	r3, r4
 800c530:	d90c      	bls.n	800c54c <_free_r+0x4c>
 800c532:	6821      	ldr	r1, [r4, #0]
 800c534:	1862      	adds	r2, r4, r1
 800c536:	4293      	cmp	r3, r2
 800c538:	bf04      	itt	eq
 800c53a:	681a      	ldreq	r2, [r3, #0]
 800c53c:	685b      	ldreq	r3, [r3, #4]
 800c53e:	6063      	str	r3, [r4, #4]
 800c540:	bf04      	itt	eq
 800c542:	1852      	addeq	r2, r2, r1
 800c544:	6022      	streq	r2, [r4, #0]
 800c546:	6004      	str	r4, [r0, #0]
 800c548:	e7ec      	b.n	800c524 <_free_r+0x24>
 800c54a:	4613      	mov	r3, r2
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	b10a      	cbz	r2, 800c554 <_free_r+0x54>
 800c550:	42a2      	cmp	r2, r4
 800c552:	d9fa      	bls.n	800c54a <_free_r+0x4a>
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	1858      	adds	r0, r3, r1
 800c558:	42a0      	cmp	r0, r4
 800c55a:	d10b      	bne.n	800c574 <_free_r+0x74>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	4401      	add	r1, r0
 800c560:	1858      	adds	r0, r3, r1
 800c562:	4282      	cmp	r2, r0
 800c564:	6019      	str	r1, [r3, #0]
 800c566:	d1dd      	bne.n	800c524 <_free_r+0x24>
 800c568:	6810      	ldr	r0, [r2, #0]
 800c56a:	6852      	ldr	r2, [r2, #4]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	4401      	add	r1, r0
 800c570:	6019      	str	r1, [r3, #0]
 800c572:	e7d7      	b.n	800c524 <_free_r+0x24>
 800c574:	d902      	bls.n	800c57c <_free_r+0x7c>
 800c576:	230c      	movs	r3, #12
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	e7d3      	b.n	800c524 <_free_r+0x24>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	1821      	adds	r1, r4, r0
 800c580:	428a      	cmp	r2, r1
 800c582:	bf04      	itt	eq
 800c584:	6811      	ldreq	r1, [r2, #0]
 800c586:	6852      	ldreq	r2, [r2, #4]
 800c588:	6062      	str	r2, [r4, #4]
 800c58a:	bf04      	itt	eq
 800c58c:	1809      	addeq	r1, r1, r0
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	605c      	str	r4, [r3, #4]
 800c592:	e7c7      	b.n	800c524 <_free_r+0x24>
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	20000224 	.word	0x20000224

0800c59c <_malloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	1ccd      	adds	r5, r1, #3
 800c5a0:	f025 0503 	bic.w	r5, r5, #3
 800c5a4:	3508      	adds	r5, #8
 800c5a6:	2d0c      	cmp	r5, #12
 800c5a8:	bf38      	it	cc
 800c5aa:	250c      	movcc	r5, #12
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	db01      	blt.n	800c5b6 <_malloc_r+0x1a>
 800c5b2:	42a9      	cmp	r1, r5
 800c5b4:	d903      	bls.n	800c5be <_malloc_r+0x22>
 800c5b6:	230c      	movs	r3, #12
 800c5b8:	6033      	str	r3, [r6, #0]
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	f000 f9cf 	bl	800c960 <__malloc_lock>
 800c5c2:	4a21      	ldr	r2, [pc, #132]	; (800c648 <_malloc_r+0xac>)
 800c5c4:	6814      	ldr	r4, [r2, #0]
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	b991      	cbnz	r1, 800c5f0 <_malloc_r+0x54>
 800c5ca:	4c20      	ldr	r4, [pc, #128]	; (800c64c <_malloc_r+0xb0>)
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	b91b      	cbnz	r3, 800c5d8 <_malloc_r+0x3c>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f98f 	bl	800c8f4 <_sbrk_r>
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f000 f98a 	bl	800c8f4 <_sbrk_r>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d124      	bne.n	800c62e <_malloc_r+0x92>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	6033      	str	r3, [r6, #0]
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f000 f9ba 	bl	800c962 <__malloc_unlock>
 800c5ee:	e7e4      	b.n	800c5ba <_malloc_r+0x1e>
 800c5f0:	680b      	ldr	r3, [r1, #0]
 800c5f2:	1b5b      	subs	r3, r3, r5
 800c5f4:	d418      	bmi.n	800c628 <_malloc_r+0x8c>
 800c5f6:	2b0b      	cmp	r3, #11
 800c5f8:	d90f      	bls.n	800c61a <_malloc_r+0x7e>
 800c5fa:	600b      	str	r3, [r1, #0]
 800c5fc:	50cd      	str	r5, [r1, r3]
 800c5fe:	18cc      	adds	r4, r1, r3
 800c600:	4630      	mov	r0, r6
 800c602:	f000 f9ae 	bl	800c962 <__malloc_unlock>
 800c606:	f104 000b 	add.w	r0, r4, #11
 800c60a:	1d23      	adds	r3, r4, #4
 800c60c:	f020 0007 	bic.w	r0, r0, #7
 800c610:	1ac3      	subs	r3, r0, r3
 800c612:	d0d3      	beq.n	800c5bc <_malloc_r+0x20>
 800c614:	425a      	negs	r2, r3
 800c616:	50e2      	str	r2, [r4, r3]
 800c618:	e7d0      	b.n	800c5bc <_malloc_r+0x20>
 800c61a:	428c      	cmp	r4, r1
 800c61c:	684b      	ldr	r3, [r1, #4]
 800c61e:	bf16      	itet	ne
 800c620:	6063      	strne	r3, [r4, #4]
 800c622:	6013      	streq	r3, [r2, #0]
 800c624:	460c      	movne	r4, r1
 800c626:	e7eb      	b.n	800c600 <_malloc_r+0x64>
 800c628:	460c      	mov	r4, r1
 800c62a:	6849      	ldr	r1, [r1, #4]
 800c62c:	e7cc      	b.n	800c5c8 <_malloc_r+0x2c>
 800c62e:	1cc4      	adds	r4, r0, #3
 800c630:	f024 0403 	bic.w	r4, r4, #3
 800c634:	42a0      	cmp	r0, r4
 800c636:	d005      	beq.n	800c644 <_malloc_r+0xa8>
 800c638:	1a21      	subs	r1, r4, r0
 800c63a:	4630      	mov	r0, r6
 800c63c:	f000 f95a 	bl	800c8f4 <_sbrk_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d0cf      	beq.n	800c5e4 <_malloc_r+0x48>
 800c644:	6025      	str	r5, [r4, #0]
 800c646:	e7db      	b.n	800c600 <_malloc_r+0x64>
 800c648:	20000224 	.word	0x20000224
 800c64c:	20000228 	.word	0x20000228

0800c650 <__ssputs_r>:
 800c650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c654:	688e      	ldr	r6, [r1, #8]
 800c656:	429e      	cmp	r6, r3
 800c658:	4682      	mov	sl, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4690      	mov	r8, r2
 800c65e:	4699      	mov	r9, r3
 800c660:	d837      	bhi.n	800c6d2 <__ssputs_r+0x82>
 800c662:	898a      	ldrh	r2, [r1, #12]
 800c664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c668:	d031      	beq.n	800c6ce <__ssputs_r+0x7e>
 800c66a:	6825      	ldr	r5, [r4, #0]
 800c66c:	6909      	ldr	r1, [r1, #16]
 800c66e:	1a6f      	subs	r7, r5, r1
 800c670:	6965      	ldr	r5, [r4, #20]
 800c672:	2302      	movs	r3, #2
 800c674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c678:	fb95 f5f3 	sdiv	r5, r5, r3
 800c67c:	f109 0301 	add.w	r3, r9, #1
 800c680:	443b      	add	r3, r7
 800c682:	429d      	cmp	r5, r3
 800c684:	bf38      	it	cc
 800c686:	461d      	movcc	r5, r3
 800c688:	0553      	lsls	r3, r2, #21
 800c68a:	d530      	bpl.n	800c6ee <__ssputs_r+0x9e>
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7ff ff85 	bl	800c59c <_malloc_r>
 800c692:	4606      	mov	r6, r0
 800c694:	b950      	cbnz	r0, 800c6ac <__ssputs_r+0x5c>
 800c696:	230c      	movs	r3, #12
 800c698:	f8ca 3000 	str.w	r3, [sl]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ac:	463a      	mov	r2, r7
 800c6ae:	6921      	ldr	r1, [r4, #16]
 800c6b0:	f7ff fc32 	bl	800bf18 <memcpy>
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	6126      	str	r6, [r4, #16]
 800c6c2:	6165      	str	r5, [r4, #20]
 800c6c4:	443e      	add	r6, r7
 800c6c6:	1bed      	subs	r5, r5, r7
 800c6c8:	6026      	str	r6, [r4, #0]
 800c6ca:	60a5      	str	r5, [r4, #8]
 800c6cc:	464e      	mov	r6, r9
 800c6ce:	454e      	cmp	r6, r9
 800c6d0:	d900      	bls.n	800c6d4 <__ssputs_r+0x84>
 800c6d2:	464e      	mov	r6, r9
 800c6d4:	4632      	mov	r2, r6
 800c6d6:	4641      	mov	r1, r8
 800c6d8:	6820      	ldr	r0, [r4, #0]
 800c6da:	f000 f928 	bl	800c92e <memmove>
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	1b9b      	subs	r3, r3, r6
 800c6e2:	60a3      	str	r3, [r4, #8]
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	441e      	add	r6, r3
 800c6e8:	6026      	str	r6, [r4, #0]
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e7dc      	b.n	800c6a8 <__ssputs_r+0x58>
 800c6ee:	462a      	mov	r2, r5
 800c6f0:	f000 f938 	bl	800c964 <_realloc_r>
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d1e2      	bne.n	800c6c0 <__ssputs_r+0x70>
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	f7ff feff 	bl	800c500 <_free_r>
 800c702:	e7c8      	b.n	800c696 <__ssputs_r+0x46>

0800c704 <_svfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	461d      	mov	r5, r3
 800c70a:	898b      	ldrh	r3, [r1, #12]
 800c70c:	061f      	lsls	r7, r3, #24
 800c70e:	b09d      	sub	sp, #116	; 0x74
 800c710:	4680      	mov	r8, r0
 800c712:	460c      	mov	r4, r1
 800c714:	4616      	mov	r6, r2
 800c716:	d50f      	bpl.n	800c738 <_svfiprintf_r+0x34>
 800c718:	690b      	ldr	r3, [r1, #16]
 800c71a:	b96b      	cbnz	r3, 800c738 <_svfiprintf_r+0x34>
 800c71c:	2140      	movs	r1, #64	; 0x40
 800c71e:	f7ff ff3d 	bl	800c59c <_malloc_r>
 800c722:	6020      	str	r0, [r4, #0]
 800c724:	6120      	str	r0, [r4, #16]
 800c726:	b928      	cbnz	r0, 800c734 <_svfiprintf_r+0x30>
 800c728:	230c      	movs	r3, #12
 800c72a:	f8c8 3000 	str.w	r3, [r8]
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	e0c8      	b.n	800c8c6 <_svfiprintf_r+0x1c2>
 800c734:	2340      	movs	r3, #64	; 0x40
 800c736:	6163      	str	r3, [r4, #20]
 800c738:	2300      	movs	r3, #0
 800c73a:	9309      	str	r3, [sp, #36]	; 0x24
 800c73c:	2320      	movs	r3, #32
 800c73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c742:	2330      	movs	r3, #48	; 0x30
 800c744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c748:	9503      	str	r5, [sp, #12]
 800c74a:	f04f 0b01 	mov.w	fp, #1
 800c74e:	4637      	mov	r7, r6
 800c750:	463d      	mov	r5, r7
 800c752:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c756:	b10b      	cbz	r3, 800c75c <_svfiprintf_r+0x58>
 800c758:	2b25      	cmp	r3, #37	; 0x25
 800c75a:	d13e      	bne.n	800c7da <_svfiprintf_r+0xd6>
 800c75c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c760:	d00b      	beq.n	800c77a <_svfiprintf_r+0x76>
 800c762:	4653      	mov	r3, sl
 800c764:	4632      	mov	r2, r6
 800c766:	4621      	mov	r1, r4
 800c768:	4640      	mov	r0, r8
 800c76a:	f7ff ff71 	bl	800c650 <__ssputs_r>
 800c76e:	3001      	adds	r0, #1
 800c770:	f000 80a4 	beq.w	800c8bc <_svfiprintf_r+0x1b8>
 800c774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c776:	4453      	add	r3, sl
 800c778:	9309      	str	r3, [sp, #36]	; 0x24
 800c77a:	783b      	ldrb	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 809d 	beq.w	800c8bc <_svfiprintf_r+0x1b8>
 800c782:	2300      	movs	r3, #0
 800c784:	f04f 32ff 	mov.w	r2, #4294967295
 800c788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	9307      	str	r3, [sp, #28]
 800c790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c794:	931a      	str	r3, [sp, #104]	; 0x68
 800c796:	462f      	mov	r7, r5
 800c798:	2205      	movs	r2, #5
 800c79a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c79e:	4850      	ldr	r0, [pc, #320]	; (800c8e0 <_svfiprintf_r+0x1dc>)
 800c7a0:	f7f3 fd3e 	bl	8000220 <memchr>
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	b9d0      	cbnz	r0, 800c7de <_svfiprintf_r+0xda>
 800c7a8:	06d9      	lsls	r1, r3, #27
 800c7aa:	bf44      	itt	mi
 800c7ac:	2220      	movmi	r2, #32
 800c7ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7b2:	071a      	lsls	r2, r3, #28
 800c7b4:	bf44      	itt	mi
 800c7b6:	222b      	movmi	r2, #43	; 0x2b
 800c7b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7bc:	782a      	ldrb	r2, [r5, #0]
 800c7be:	2a2a      	cmp	r2, #42	; 0x2a
 800c7c0:	d015      	beq.n	800c7ee <_svfiprintf_r+0xea>
 800c7c2:	9a07      	ldr	r2, [sp, #28]
 800c7c4:	462f      	mov	r7, r5
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	250a      	movs	r5, #10
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7d0:	3b30      	subs	r3, #48	; 0x30
 800c7d2:	2b09      	cmp	r3, #9
 800c7d4:	d94d      	bls.n	800c872 <_svfiprintf_r+0x16e>
 800c7d6:	b1b8      	cbz	r0, 800c808 <_svfiprintf_r+0x104>
 800c7d8:	e00f      	b.n	800c7fa <_svfiprintf_r+0xf6>
 800c7da:	462f      	mov	r7, r5
 800c7dc:	e7b8      	b.n	800c750 <_svfiprintf_r+0x4c>
 800c7de:	4a40      	ldr	r2, [pc, #256]	; (800c8e0 <_svfiprintf_r+0x1dc>)
 800c7e0:	1a80      	subs	r0, r0, r2
 800c7e2:	fa0b f000 	lsl.w	r0, fp, r0
 800c7e6:	4318      	orrs	r0, r3
 800c7e8:	9004      	str	r0, [sp, #16]
 800c7ea:	463d      	mov	r5, r7
 800c7ec:	e7d3      	b.n	800c796 <_svfiprintf_r+0x92>
 800c7ee:	9a03      	ldr	r2, [sp, #12]
 800c7f0:	1d11      	adds	r1, r2, #4
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	9103      	str	r1, [sp, #12]
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	db01      	blt.n	800c7fe <_svfiprintf_r+0xfa>
 800c7fa:	9207      	str	r2, [sp, #28]
 800c7fc:	e004      	b.n	800c808 <_svfiprintf_r+0x104>
 800c7fe:	4252      	negs	r2, r2
 800c800:	f043 0302 	orr.w	r3, r3, #2
 800c804:	9207      	str	r2, [sp, #28]
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	783b      	ldrb	r3, [r7, #0]
 800c80a:	2b2e      	cmp	r3, #46	; 0x2e
 800c80c:	d10c      	bne.n	800c828 <_svfiprintf_r+0x124>
 800c80e:	787b      	ldrb	r3, [r7, #1]
 800c810:	2b2a      	cmp	r3, #42	; 0x2a
 800c812:	d133      	bne.n	800c87c <_svfiprintf_r+0x178>
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	1d1a      	adds	r2, r3, #4
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	9203      	str	r2, [sp, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfb8      	it	lt
 800c820:	f04f 33ff 	movlt.w	r3, #4294967295
 800c824:	3702      	adds	r7, #2
 800c826:	9305      	str	r3, [sp, #20]
 800c828:	4d2e      	ldr	r5, [pc, #184]	; (800c8e4 <_svfiprintf_r+0x1e0>)
 800c82a:	7839      	ldrb	r1, [r7, #0]
 800c82c:	2203      	movs	r2, #3
 800c82e:	4628      	mov	r0, r5
 800c830:	f7f3 fcf6 	bl	8000220 <memchr>
 800c834:	b138      	cbz	r0, 800c846 <_svfiprintf_r+0x142>
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	1b40      	subs	r0, r0, r5
 800c83a:	fa03 f000 	lsl.w	r0, r3, r0
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	4303      	orrs	r3, r0
 800c842:	3701      	adds	r7, #1
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	7839      	ldrb	r1, [r7, #0]
 800c848:	4827      	ldr	r0, [pc, #156]	; (800c8e8 <_svfiprintf_r+0x1e4>)
 800c84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c84e:	2206      	movs	r2, #6
 800c850:	1c7e      	adds	r6, r7, #1
 800c852:	f7f3 fce5 	bl	8000220 <memchr>
 800c856:	2800      	cmp	r0, #0
 800c858:	d038      	beq.n	800c8cc <_svfiprintf_r+0x1c8>
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <_svfiprintf_r+0x1e8>)
 800c85c:	bb13      	cbnz	r3, 800c8a4 <_svfiprintf_r+0x1a0>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	3307      	adds	r3, #7
 800c862:	f023 0307 	bic.w	r3, r3, #7
 800c866:	3308      	adds	r3, #8
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86c:	444b      	add	r3, r9
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	e76d      	b.n	800c74e <_svfiprintf_r+0x4a>
 800c872:	fb05 3202 	mla	r2, r5, r2, r3
 800c876:	2001      	movs	r0, #1
 800c878:	460f      	mov	r7, r1
 800c87a:	e7a6      	b.n	800c7ca <_svfiprintf_r+0xc6>
 800c87c:	2300      	movs	r3, #0
 800c87e:	3701      	adds	r7, #1
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	4619      	mov	r1, r3
 800c884:	250a      	movs	r5, #10
 800c886:	4638      	mov	r0, r7
 800c888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c88c:	3a30      	subs	r2, #48	; 0x30
 800c88e:	2a09      	cmp	r2, #9
 800c890:	d903      	bls.n	800c89a <_svfiprintf_r+0x196>
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c8      	beq.n	800c828 <_svfiprintf_r+0x124>
 800c896:	9105      	str	r1, [sp, #20]
 800c898:	e7c6      	b.n	800c828 <_svfiprintf_r+0x124>
 800c89a:	fb05 2101 	mla	r1, r5, r1, r2
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	e7f0      	b.n	800c886 <_svfiprintf_r+0x182>
 800c8a4:	ab03      	add	r3, sp, #12
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c8ac:	a904      	add	r1, sp, #16
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	f7fe f848 	bl	800a944 <_printf_float>
 800c8b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	d1d6      	bne.n	800c86a <_svfiprintf_r+0x166>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	065b      	lsls	r3, r3, #25
 800c8c0:	f53f af35 	bmi.w	800c72e <_svfiprintf_r+0x2a>
 800c8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c6:	b01d      	add	sp, #116	; 0x74
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	ab03      	add	r3, sp, #12
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <_svfiprintf_r+0x1ec>)
 800c8d4:	a904      	add	r1, sp, #16
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	f7fe faea 	bl	800aeb0 <_printf_i>
 800c8dc:	e7ea      	b.n	800c8b4 <_svfiprintf_r+0x1b0>
 800c8de:	bf00      	nop
 800c8e0:	0800cbb4 	.word	0x0800cbb4
 800c8e4:	0800cbba 	.word	0x0800cbba
 800c8e8:	0800cbbe 	.word	0x0800cbbe
 800c8ec:	0800a945 	.word	0x0800a945
 800c8f0:	0800c651 	.word	0x0800c651

0800c8f4 <_sbrk_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4c06      	ldr	r4, [pc, #24]	; (800c910 <_sbrk_r+0x1c>)
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	f7f6 fac6 	bl	8002e90 <_sbrk>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d102      	bne.n	800c90e <_sbrk_r+0x1a>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	b103      	cbz	r3, 800c90e <_sbrk_r+0x1a>
 800c90c:	602b      	str	r3, [r5, #0]
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	20000a34 	.word	0x20000a34

0800c914 <__ascii_wctomb>:
 800c914:	b149      	cbz	r1, 800c92a <__ascii_wctomb+0x16>
 800c916:	2aff      	cmp	r2, #255	; 0xff
 800c918:	bf85      	ittet	hi
 800c91a:	238a      	movhi	r3, #138	; 0x8a
 800c91c:	6003      	strhi	r3, [r0, #0]
 800c91e:	700a      	strbls	r2, [r1, #0]
 800c920:	f04f 30ff 	movhi.w	r0, #4294967295
 800c924:	bf98      	it	ls
 800c926:	2001      	movls	r0, #1
 800c928:	4770      	bx	lr
 800c92a:	4608      	mov	r0, r1
 800c92c:	4770      	bx	lr

0800c92e <memmove>:
 800c92e:	4288      	cmp	r0, r1
 800c930:	b510      	push	{r4, lr}
 800c932:	eb01 0302 	add.w	r3, r1, r2
 800c936:	d807      	bhi.n	800c948 <memmove+0x1a>
 800c938:	1e42      	subs	r2, r0, #1
 800c93a:	4299      	cmp	r1, r3
 800c93c:	d00a      	beq.n	800c954 <memmove+0x26>
 800c93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c942:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c946:	e7f8      	b.n	800c93a <memmove+0xc>
 800c948:	4283      	cmp	r3, r0
 800c94a:	d9f5      	bls.n	800c938 <memmove+0xa>
 800c94c:	1881      	adds	r1, r0, r2
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	42d3      	cmn	r3, r2
 800c952:	d100      	bne.n	800c956 <memmove+0x28>
 800c954:	bd10      	pop	{r4, pc}
 800c956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c95e:	e7f7      	b.n	800c950 <memmove+0x22>

0800c960 <__malloc_lock>:
 800c960:	4770      	bx	lr

0800c962 <__malloc_unlock>:
 800c962:	4770      	bx	lr

0800c964 <_realloc_r>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	4607      	mov	r7, r0
 800c968:	4614      	mov	r4, r2
 800c96a:	460e      	mov	r6, r1
 800c96c:	b921      	cbnz	r1, 800c978 <_realloc_r+0x14>
 800c96e:	4611      	mov	r1, r2
 800c970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c974:	f7ff be12 	b.w	800c59c <_malloc_r>
 800c978:	b922      	cbnz	r2, 800c984 <_realloc_r+0x20>
 800c97a:	f7ff fdc1 	bl	800c500 <_free_r>
 800c97e:	4625      	mov	r5, r4
 800c980:	4628      	mov	r0, r5
 800c982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c984:	f000 f814 	bl	800c9b0 <_malloc_usable_size_r>
 800c988:	42a0      	cmp	r0, r4
 800c98a:	d20f      	bcs.n	800c9ac <_realloc_r+0x48>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4638      	mov	r0, r7
 800c990:	f7ff fe04 	bl	800c59c <_malloc_r>
 800c994:	4605      	mov	r5, r0
 800c996:	2800      	cmp	r0, #0
 800c998:	d0f2      	beq.n	800c980 <_realloc_r+0x1c>
 800c99a:	4631      	mov	r1, r6
 800c99c:	4622      	mov	r2, r4
 800c99e:	f7ff fabb 	bl	800bf18 <memcpy>
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff fdab 	bl	800c500 <_free_r>
 800c9aa:	e7e9      	b.n	800c980 <_realloc_r+0x1c>
 800c9ac:	4635      	mov	r5, r6
 800c9ae:	e7e7      	b.n	800c980 <_realloc_r+0x1c>

0800c9b0 <_malloc_usable_size_r>:
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f18      	subs	r0, r3, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfbc      	itt	lt
 800c9ba:	580b      	ldrlt	r3, [r1, r0]
 800c9bc:	18c0      	addlt	r0, r0, r3
 800c9be:	4770      	bx	lr

0800c9c0 <_init>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr

0800c9cc <_fini>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr
